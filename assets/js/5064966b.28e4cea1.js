"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[315],{6050:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var i=t(4848),l=t(8453);const a={id:"installation",title:"Installation",sidebar_label:"Installation"},o=void 0,r={id:"installation",title:"Installation",description:"Celerity can be built and installed from",source:"@site/celerity-runtime/docs/installation.md",sourceDirName:".",slug:"/installation",permalink:"/docs/installation",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Fabian Knorr",lastUpdatedAt:1723021792e3,frontMatter:{id:"installation",title:"Installation",sidebar_label:"Installation"},sidebar:"docs",previous:{title:"Getting Started",permalink:"/docs/getting-started"},next:{title:"Tutorial",permalink:"/docs/tutorial"}},s={},c=[{value:"Picking a SYCL Implementation",id:"picking-a-sycl-implementation",level:2},{value:"AdaptiveCpp",id:"adaptivecpp",level:3},{value:"DPC++",id:"dpc",level:3},{value:"Configuring CMake",id:"configuring-cmake",level:2},{value:"Building and Installing",id:"building-and-installing",level:2},{value:"Running Examples",id:"running-examples",level:2},{value:"Bootstrap your own Application",id:"bootstrap-your-own-application",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Celerity can be built and installed from\n",(0,i.jsx)(n.a,{href:"https://github.com/celerity/celerity-runtime",children:"source"})," using\n",(0,i.jsx)(n.a,{href:"https://cmake.org",children:"CMake"}),". It requires the following dependencies:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["A MPI 2 implementation (for example ",(0,i.jsx)(n.a,{href:"https://www.open-mpi.org",children:"OpenMPI 4"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"A C++17 compiler"}),"\n",(0,i.jsx)(n.li,{children:"A supported SYCL implementation (see below)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Note that while Celerity does support compilation and execution on Windows in\nprinciple, in this documentation we focus exclusively on Linux, as it\nrepresents the de-facto standard in HPC nowadays."}),"\n",(0,i.jsx)(n.h2,{id:"picking-a-sycl-implementation",children:"Picking a SYCL Implementation"}),"\n",(0,i.jsx)(n.p,{children:"Celerity currently supports two different SYCL implementations. If you're\nsimply giving Celerity a try, the choice does not matter all that much. For\nmore advanced use cases or specific hardware setups it might however make\nsense to prefer one over the other."}),"\n",(0,i.jsx)(n.h3,{id:"adaptivecpp",children:"AdaptiveCpp"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/AdaptiveCpp/AdaptiveCpp",children:"AdaptiveCpp"})," is an open source SYCL\nand C++ standard parallelism implementation focused on leveraging existing toolchains\nsuch as CUDA or HIP, making it a great choice when directly targeting Nvidia CUDA\nand AMD ROCm platforms."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"AdaptiveCpp is currently available on Linux and has experimental/partial support\nfor OSX and Windows."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"dpc",children:"DPC++"}),"\n",(0,i.jsxs)(n.p,{children:["Intel's LLVM fork ",(0,i.jsx)(n.a,{href:"https://github.com/intel/llvm",children:"DPC++"})," brings SYCL to the\nlatest Intel CPU and GPU hardware and also, experimentally, to CUDA and HIP\ndevices. Celerity will automatically detect when ",(0,i.jsx)(n.code,{children:"CMAKE_CXX_COMPILER"})," points to\na DPC++ Clang."]}),"\n",(0,i.jsxs)(n.p,{children:["To launch kernels on Intel GPUs, you will also need to install a recent version of the\n",(0,i.jsx)(n.a,{href:"https://github.com/intel/compute-runtime/releases",children:"Intel Compute Runtime"})," (failing to do so will\nresult in mysterious segfaults in the DPC++ SYCL library!)"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Celerity works with DPC++ on Linux."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Until its discontinuation in July 2023, Celerity also supported ComputeCpp as a SYCL implementation."}),"\n",(0,i.jsx)(n.h2,{id:"configuring-cmake",children:"Configuring CMake"}),"\n",(0,i.jsxs)(n.p,{children:["After installing all of the aforementioned dependencies, clone (we recommend\nusing ",(0,i.jsx)(n.code,{children:"git clone --recurse-submodules"}),") or download\nthe ",(0,i.jsx)(n.a,{href:"https://github.com/celerity/celerity-runtime",children:"Celerity source files"})," from GitHub. Next, create\na ",(0,i.jsx)(n.code,{children:"build"})," folder inside the Celerity root folder and navigate into it."]}),"\n",(0,i.jsx)(n.p,{children:"The exact CMake configuration call you need depends on a few factors, for example the SYCL\nimplementation you chose, as well as your target hardware\nplatform. Here are a couple of examples:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'cmake -G Ninja .. -DCMAKE_PREFIX_PATH="<path-to-acpp-install>" -DACPP_TARGETS="cuda:sm_52" -DCMAKE_INSTALL_PREFIX="<install-path>" -DCMAKE_BUILD_TYPE=Release\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'cmake -G "Unix Makefiles" .. -DCMAKE_CXX_COMPILER="/path/to/dpc++/bin/clang++" -DCMAKE_INSTALL_PREFIX="<install-path>" -DCMAKE_BUILD_TYPE=Release\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In case multiple SYCL implementations are in CMake's search path, you can disambiguate them\nusing ",(0,i.jsx)(n.code,{children:"-DCELERITY_SYCL_IMPL=AdaptiveCpp|DPC++"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Note that the ",(0,i.jsx)(n.code,{children:"CMAKE_PREFIX_PATH"})," parameter should only be required if you\ninstalled SYCL in a non-standard location. See the ",(0,i.jsx)(n.a,{href:"https://cmake.org/documentation/",children:"CMake\ndocumentation"})," as well as the documentation\nfor your SYCL implementation for more information on the other parameters."]}),"\n",(0,i.jsxs)(n.p,{children:["Celerity comes with several example applications that are built by default.\nIf you don't want to build examples, provide ",(0,i.jsx)(n.code,{children:"-DCELERITY_BUILD_EXAMPLES=0"})," as\nan additional parameter to your CMake configuration call."]}),"\n",(0,i.jsx)(n.h2,{id:"building-and-installing",children:"Building and Installing"}),"\n",(0,i.jsxs)(n.p,{children:["After you have successfully configured CMake, building and installing\nCelerity should be as simple as calling ",(0,i.jsx)(n.code,{children:"ninja install"})," or ",(0,i.jsx)(n.code,{children:"make install"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["If you just want to run the examples, you can skip the installation and\nsimply call ",(0,i.jsx)(n.code,{children:"ninja"})," or ",(0,i.jsx)(n.code,{children:"make"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"running-examples",children:"Running Examples"}),"\n",(0,i.jsx)(n.p,{children:"If you have configured CMake to build the Celerity example applications, you\ncan now run them from within the build directory. For example, try running:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"mpirun -n 2 ./examples/matmul/matmul\n"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Tip:"})," You might also want to try and run the unit tests that come with Celerity.\nTo do so, simply run ",(0,i.jsx)(n.code,{children:"ninja test"})," or ",(0,i.jsx)(n.code,{children:"make test"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"bootstrap-your-own-application",children:"Bootstrap your own Application"}),"\n",(0,i.jsxs)(n.p,{children:["All projects in the ",(0,i.jsx)(n.code,{children:"examples/"})," directory are stand-alone Celerity programs\n\u2013 if you like a template for getting started, just copy one of them to\nbootstrap on your own Celerity application. You can find out more about that\n",(0,i.jsx)(n.a,{href:"https://github.com/celerity/celerity-runtime/blob/master/examples",children:"here"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var i=t(6540);const l={},a=i.createContext(l);function o(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);