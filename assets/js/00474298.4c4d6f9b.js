"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8461],{22715:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>n,metadata:()=>o,toc:()=>l});var t=a(74848),i=a(28453);const s='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#06885D8AE2CD6C63"><span>namespace detail</span></a></li><li><a href="/docs/api/namespaces/#F04B845B7443865D"><span>namespace instruction_graph_generator_detail</span></a></li><li class="is-active"><a aria-current="page7823E109B5EAFCE1"><span>struct buffer_state</span></a></li></ul></nav>\n<main><h1>struct buffer_state</h1><h2>Declaration</h2><pre class="p-0"><code class="hdoc-record-code language-cpp">struct buffer_state { /* full declaration omitted */ };</code></pre><h2>Description</h2><p><p>State for a single buffer.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/instruction_graph_generator.cc#L369">src/instruction_graph_generator.cc:369</a></p><h2>Member Variables</h2><dl><dt class="is-family-code" id="var_debug_name" data-member-name="debug_name">  <a href="https://en.cppreference.com/w/cpp/string/basic_string">std::string</a> <b>debug_name</b></dt><dt class="is-family-code" id="var_range" data-member-name="range">  <a href="/docs/api/records/B13622E7024342AF/">celerity::range</a>&lt;3&gt; <b>range</b></dt><dt class="is-family-code" id="var_elem_size" data-member-name="elem_size">  size_t <b>elem_size</b></dt><dd>in bytes</dd><dt class="is-family-code" id="var_elem_align" data-member-name="elem_align">  size_t <b>elem_align</b></dt><dd>in bytes</dd><dt class="is-family-code" id="var_memories" data-member-name="memories">  <a href="/docs/api/records/7F709CB15C3D9013/">dense_map</a>&lt;memory_id, buffer_memory_state&gt; <b>memories</b></dt><dd>Per-memory and per-allocation state of this buffer.</dd><dt class="is-family-code" id="var_up_to_date_memories" data-member-name="up_to_date_memories">  <a href="/docs/api/records/42DEA3E8277ABF6F/">region_map</a>&lt;memory_mask&gt; <b>up_to_date_memories</b></dt><dd>Contains a mask for every memory_id that either was written to by the original-producer instruction or that has already been made coherent previously.</dd><dt class="is-family-code" id="var_original_writers" data-member-name="original_writers">  <a href="/docs/api/records/42DEA3E8277ABF6F/">region_map</a>&lt;instruction*&gt; <b>original_writers</b></dt><dd>Tracks the instruction that initially produced each buffer element on the local node - this can be a kernel, host task, region-receive or reduce-instruction, or - in case of a host-initialized buffer - an epoch. It is different from `buffer_allocation_state::last_writers` in that it never contains copy instructions. Copy- and send source regions are split on their original producer instructions to facilitate computation-communication overlap when different producers finish at different times.</dd><dt class="is-family-code" id="var_original_write_memories" data-member-name="original_write_memories">  <a href="/docs/api/records/42DEA3E8277ABF6F/">region_map</a>&lt;memory_id&gt; <b>original_write_memories</b></dt><dd>Tracks the memory to which the original_writer instruction wrote each buffer element. `original_write_memories[box]` is meaningless when `up_to_date_memories[box]` is empty (i.e. the buffer is not up-to-date on the local node due to being uninitialized or await-pushed without being consumed).</dd><dt class="is-family-code" id="var_pending_receives" data-member-name="pending_receives">  <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;region_receive&gt; <b>pending_receives</b></dt><dt class="is-family-code" id="var_pending_gathers" data-member-name="pending_gathers">  <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;gather_receive&gt; <b>pending_gathers</b></dt></dl><h2>Member Function Overview</h2><ul><li class="is-family-code"><a href="#5059FB4C557830E1"><b>apply_epoch</b></a>(instruction * epoch) &rarr; void</li><li class="is-family-code"><a href="#C532C7D6C485771E"><b>buffer_state</b></a>(const celerity::range&lt;3&gt; &amp; range, size_t elem_size, size_t elem_align, size_t n_memories) &rarr; explicit</li><li class="is-family-code"><a href="#A3E8F884D6418F4A"><b>track_original_write</b></a>(const region&lt;3&gt; &amp; region, instruction * instr, memory_id mid) &rarr; void</li></ul><h2>Member Functions</h2><h3 id="5059FB4C557830E1" data-function-name="apply_epoch"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#5059FB4C557830E1">\xb6</a><code class="hdoc-function-code language-cpp">void apply_epoch(<a href="/docs/api/records/406117B5A814B8B4/">instruction</a>* epoch)</code></pre></h3><h4>Description</h4><p><p>Replace all tracked instructions that are older than <code>epoch</code> with <code>epoch</code>.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/instruction_graph_generator.cc#L429">src/instruction_graph_generator.cc:429</a></p><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/406117B5A814B8B4/">instruction</a>*<b> epoch</b></dt></dl><hr class="member-fun-separator"></hr><h3 id="C532C7D6C485771E" data-function-name="buffer_state"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#C532C7D6C485771E">\xb6</a><code class="hdoc-function-code language-cpp">explicit buffer_state(\n    const <a href="/docs/api/records/B13622E7024342AF/">celerity::range</a>&lt;3&gt;&amp; range,\n    size_t elem_size,\n    size_t elem_align,\n    size_t n_memories)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/instruction_graph_generator.cc#L418">src/instruction_graph_generator.cc:418</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/B13622E7024342AF/">celerity::range</a>&lt;3&gt;&amp;<b> range</b></dt><dt class="is-family-code">size_t<b> elem_size</b></dt><dt class="is-family-code">size_t<b> elem_align</b></dt><dt class="is-family-code">size_t<b> n_memories</b></dt></dl><hr class="member-fun-separator"></hr><h3 id="A3E8F884D6418F4A" data-function-name="track_original_write"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#A3E8F884D6418F4A">\xb6</a><code class="hdoc-function-code language-cpp">void track_original_write(const <a href="/docs/api/records/A3975FE869EB8647/">region</a>&lt;3&gt;&amp; region,\n                          <a href="/docs/api/records/406117B5A814B8B4/">instruction</a>* instr,\n                          <a href="/docs/api/records/1AFCD7D3D6F8EF79/">memory_id</a> mid)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/instruction_graph_generator.cc#L422">src/instruction_graph_generator.cc:422</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/A3975FE869EB8647/">region</a>&lt;3&gt;&amp;<b> region</b></dt><dt class="is-family-code"><a href="/docs/api/records/406117B5A814B8B4/">instruction</a>*<b> instr</b></dt><dt class="is-family-code"><a href="/docs/api/records/1AFCD7D3D6F8EF79/">memory_id</a><b> mid</b></dt></dl><hr class="member-fun-separator"></hr></main>',n={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"struct buffer_state"},c=void 0,o={id:"api/records/7823E109B5EAFCE1",title:"struct buffer_state",description:"",source:"@site/celerity-runtime/docs/api/records/7823E109B5EAFCE1.mdx",sourceDirName:"api/records",slug:"/api/records/7823E109B5EAFCE1",permalink:"/docs/api/records/7823E109B5EAFCE1",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"struct buffer_state"},sidebar:"api"},d={},l=[];function m(e){const{Head:r}={...(0,i.R)(),...e.components};return r||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(r,{children:[(0,t.jsx)("script",{src:"/js/highlight.min.js"}),(0,t.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,t.jsx)("div",{dangerouslySetInnerHTML:{__html:s}})]})}function p(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},28453:(e,r,a)=>{a.d(r,{R:()=>n,x:()=>c});var t=a(96540);const i={},s=t.createContext(i);function n(e){const r=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:n(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);