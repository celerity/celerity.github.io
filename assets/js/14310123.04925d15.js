"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[16336],{89795:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var n=i(74848),a=i(28453);const r='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#06885D8AE2CD6C63"><span>namespace detail</span></a></li><li><a href="/docs/api/namespaces/#04B6F7A15A2A2D0A"><span>namespace mpi_detail</span></a></li><li class="is-active"><a aria-current="page80877F486E52C383"><span>function normalize_strided_pointer</span></a></li></ul></nav>\n<main><section><h3 id="80877F486E52C383" data-function-name="normalize_strided_pointer"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#80877F486E52C383">\xb6</a><code class="hdoc-function-code language-cpp">template &lt;typename Void&gt;\nconstexpr <a href="https://en.cppreference.com/w/cpp/utility/tuple">std::tuple</a>&lt;Void*, <a href="/docs/api/records/0E8486033E50D99A/">communicator::stride</a>&gt;\nnormalize_strided_pointer(\n    Void* ptr,\n    communicator::stride stride)</code></pre></h3><section><h4>Description</h4><p><p>Strides that only differ e.g. in their dim0 allocation size are equivalent when adjusting the base pointer. This not only improves mpi_communicator type cache efficiency, but is in fact necessary to make sure all boxes that instruction_graph_generator emits for send instructions and inbound pilots are representable in the 32-bit integer world of MPI.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/mpi_communicator.cc#L63">src/mpi_communicator.cc:63</a></p></aside><section><h4>Template Parameters</h4><dl><dt class="is-family-code"><b> Void</b></dt><dd>Either `void` or `const void`.</dd></dl></section><section><h4>Parameters</h4><dl><dt class="is-family-code">Void*<b> ptr</b></dt><dt class="is-family-code"><a href="/docs/api/records/0E8486033E50D99A/">communicator::stride</a><b> stride</b></dt></dl></section></section><hr class="member-fun-separator"></hr></main>',s={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"function normalize_strided_pointer"},o=void 0,c={id:"api/functions/celerity_detail_mpi_detail-normalize_strided_pointer",title:"function normalize_strided_pointer",description:"",source:"@site/celerity-runtime/docs/api/functions/celerity_detail_mpi_detail-normalize_strided_pointer.mdx",sourceDirName:"api/functions",slug:"/api/functions/celerity_detail_mpi_detail-normalize_strided_pointer",permalink:"/docs/api/functions/celerity_detail_mpi_detail-normalize_strided_pointer",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"function normalize_strided_pointer"},sidebar:"api"},d={},l=[];function p(e){const{Head:t}={...(0,a.R)(),...e.components};return t||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t,{children:[(0,n.jsx)("script",{src:"/js/highlight.min.js"}),(0,n.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,n.jsx)("div",{dangerouslySetInnerHTML:{__html:r}})]})}function m(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>s,x:()=>o});var n=i(96540);const a={},r=n.createContext(a);function s(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);