"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[66119],{45163:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var r=a(74848),n=a(28453);const s='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#06885D8AE2CD6C63"><span>namespace detail</span></a></li><li><a href="/docs/api/records/0DE118E8B7E22055/"><span>class double_buffered_queue</span></a></li><li class="is-active"><a aria-current="pageC3F1B4A896820CEE"><span>struct double_buffered_queue::write_end</span></a></li></ul></nav>\n<main><h1>struct double_buffered_queue::write_end</h1><h2>Declaration</h2><pre class="p-0"><code class="hdoc-record-code language-cpp">struct double_buffered_queue::write_end { /* full declaration omitted */ };</code></pre><section><h2>Description</h2><p><p>Aligned group 1: The write-queue and its associated synchronization primitives will move between threads on push, pop, and wait.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/double_buffered_queue.h#L56">include/double_buffered_queue.h:56</a></p></aside><section><h2>Member Variables</h2><dl><dt class="is-family-code" id="var_mutex" data-member-name="mutex">  <a href="https://en.cppreference.com/w/cpp/thread/mutex">std::mutex</a> <b>mutex</b></dt><dt class="is-family-code" id="var_resume" data-member-name="resume">  <a href="https://en.cppreference.com/w/cpp/thread/condition_variable">std::condition_variable</a> <b>resume</b></dt><dt class="is-family-code" id="var_queue" data-member-name="queue">  <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;T&gt; <b>queue</b></dt><dt class="is-family-code" id="var_queue_nonempty" data-member-name="queue_nonempty">  <a href="https://en.cppreference.com/w/cpp/atomic/atomic">std::atomic</a>&lt;bool&gt; <b>queue_nonempty</b> = {false}</dt></dl></section><section></section></main>',i={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"struct double_buffered_queue::write_end"},c=void 0,o={id:"api/records/C3F1B4A896820CEE",title:"struct double_buffered_queue::write_end",description:"",source:"@site/celerity-runtime/docs/api/records/C3F1B4A896820CEE.mdx",sourceDirName:"api/records",slug:"/api/records/C3F1B4A896820CEE",permalink:"/docs/api/records/C3F1B4A896820CEE",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"struct double_buffered_queue::write_end"},sidebar:"api"},d={},u=[];function l(e){const{Head:t}={...(0,n.R)(),...e.components};return t||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t,{children:[(0,r.jsx)("script",{src:"/js/highlight.min.js"}),(0,r.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,r.jsx)("div",{dangerouslySetInnerHTML:{__html:s}})]})}function p(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>c});var r=a(96540);const n={},s=r.createContext(n);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);