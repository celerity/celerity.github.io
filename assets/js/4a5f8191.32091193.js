"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[12424],{96578:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>l,contentTitle:()=>n,default:()=>u,frontMatter:()=>c,metadata:()=>o,toc:()=>d});var i=r(74848),s=r(28453);const t='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#06885D8AE2CD6C63"><span>namespace detail</span></a></li><li><a href="/docs/api/namespaces/#1BF0FAA9C863A6A8"><span>namespace receive_arbiter_detail</span></a></li><li class="is-active"><a aria-current="page176CD8C7F7EB3D85"><span>class subregion_receive_event</span></a></li></ul></nav>\n<main><h1>class subregion_receive_event</h1><h2>Declaration</h2><pre class="p-0"><code class="hdoc-record-code language-cpp">class subregion_receive_event : public async_event_impl { /* full declaration omitted */ };</code></pre><h2>Description</h2><p><p>Event for <code>receive_arbiter::await_split_receive_subregion</code>, which awaits a specific subregion of a split receive.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/receive_arbiter.cc#L27">src/receive_arbiter.cc:27</a></p><p>Inherits from: <a href="/docs/api/records/073311E635D32F96/">async_event_impl</a></p><h2>Member Variables</h2><dl><dt class="is-family-code hdoc-private" id="var_m_request" data-member-name="m_request">  weak_region_request <b>m_request</b></dt><dt class="is-family-code hdoc-private" id="var_m_awaited_region" data-member-name="m_awaited_region">  <a href="/docs/api/records/A3975FE869EB8647/">region</a>&lt;3&gt; <b>m_awaited_region</b></dt></dl><h2>Member Function Overview</h2><ul><li class="is-family-code"><a href="#89ACBC5F5DD9744C"><b>is_complete</b></a>() &rarr; bool</li><li class="is-family-code"><a href="#4EBEACD46976F793"><b>subregion_receive_event</b></a>(const stable_region_request &amp; rr, const region&lt;3&gt; &amp; awaited_subregion) &rarr; explicit</li></ul><p>Inherited from <a href="/docs/api/records/073311E635D32F96/">async_event_impl</a>:</p><ul><li class="is-family-code"><a href="/docs/api/records/073311E635D32F96/#586AC2FBEF390DDA">public <b>get_native_execution_time</b></a></li><li class="is-family-code"><a href="/docs/api/records/073311E635D32F96/#BBCC63BE793ABAF2">public <b>get_result</b></a></li><li class="is-family-code"><a href="/docs/api/records/073311E635D32F96/#C0338F7BBBCA1682">public <b>is_complete</b></a></li><li class="is-family-code"><a href="/docs/api/records/073311E635D32F96/#956FA9230ED98EAA">public <b>operator=</b></a></li><li class="is-family-code"><a href="/docs/api/records/073311E635D32F96/#0094266AA4523532">public <b>operator=</b></a></li></ul><h2>Member Functions</h2><h3 id="89ACBC5F5DD9744C" data-function-name="is_complete"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#89ACBC5F5DD9744C">\xb6</a><code class="hdoc-function-code language-cpp">bool is_complete()</code></pre></h3><h4>Description</h4><p><p>If this function returns true once, the implementation must guarantee that it will always do so in the future. The event is expected to be cheap to poll repeatedly, and the operation must proceed in the background even while not being polled.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/receive_arbiter.cc#L32">src/receive_arbiter.cc:32</a></p><hr class="member-fun-separator"></hr><h3 id="4EBEACD46976F793" data-function-name="subregion_receive_event"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#4EBEACD46976F793">\xb6</a><code class="hdoc-function-code language-cpp">explicit sub<a href="/docs/api/records/A3975FE869EB8647/">region</a>_receive_event(\n    const stable_region_request&amp; rr,\n    const region&lt;3&gt;&amp; awaited_subregion)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/receive_arbiter.cc#L29">src/receive_arbiter.cc:29</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const stable_region_request&amp;<b> rr</b></dt><dt class="is-family-code">const <a href="/docs/api/records/A3975FE869EB8647/">region</a>&lt;3&gt;&amp;<b> awaited_subregion</b></dt></dl><hr class="member-fun-separator"></hr></main>',c={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class subregion_receive_event"},n=void 0,o={id:"api/records/176CD8C7F7EB3D85",title:"class subregion_receive_event",description:"",source:"@site/celerity-runtime/docs/api/records/176CD8C7F7EB3D85.mdx",sourceDirName:"api/records",slug:"/api/records/176CD8C7F7EB3D85",permalink:"/docs/api/records/176CD8C7F7EB3D85",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class subregion_receive_event"},sidebar:"api"},l={},d=[];function p(e){const{Head:a}={...(0,s.R)(),...e.components};return a||function(e,a){throw new Error("Expected "+(a?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(a,{children:[(0,i.jsx)("script",{src:"/js/highlight.min.js"}),(0,i.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,i.jsx)("div",{dangerouslySetInnerHTML:{__html:t}})]})}function u(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},28453:(e,a,r)=>{r.d(a,{R:()=>c,x:()=>n});var i=r(96540);const s={},t=i.createContext(s);function c(e){const a=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function n(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),i.createElement(t.Provider,{value:a},e.children)}}}]);