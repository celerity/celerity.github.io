"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[88470],{58299:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>n,metadata:()=>o,toc:()=>d});var a=i(74848),r=i(28453);const s='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#06885D8AE2CD6C63"><span>namespace detail</span></a></li><li><a href="/docs/api/namespaces/#1BF0FAA9C863A6A8"><span>namespace receive_arbiter_detail</span></a></li><li class="is-active"><a aria-current="pageD43CE5971F1570AE"><span>struct multi_region_transfer</span></a></li></ul></nav>\n<main><h1>struct multi_region_transfer</h1><h2>Declaration</h2><pre class="p-0"><code class="hdoc-record-code language-cpp">struct multi_region_transfer { /* full declaration omitted */ };</code></pre><section><h2>Description</h2><p><p>A (non-gather) transfer that has been mentioned in one or more calls to <code>receive</code> / <code>begin_split_receive</code>. Note that there may be multiple disjoint receives mapping to the same <code>transfer_id</code> as long as their regions are pairwise disconnected.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/receive_arbiter.h#L58">include/receive_arbiter.h:58</a></p></aside><section><h2>Member Variables</h2><dl><dt class="is-family-code" id="var_elem_size" data-member-name="elem_size">  size_t <b>elem_size</b></dt><dd>in bytes</dd><dt class="is-family-code" id="var_active_requests" data-member-name="active_requests">  <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;stable_region_request&gt; <b>active_requests</b></dt><dd>all `receive`s and `begin_split_receive`s active for this transfer id.</dd><dt class="is-family-code" id="var_unassigned_pilots" data-member-name="unassigned_pilots">  <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;inbound_pilot&gt; <b>unassigned_pilots</b></dt><dd>all inbound pilots that do not map to any `active_request`.</dd></dl></section><section><h2>Member Function Overview</h2><ul><li class="is-family-code"><a href="#0102CD08D4865FF1"><b>do_complete</b></a>() &rarr; bool</li><li class="is-family-code"><a href="#A7BD3F9B7A7DC32C"><b>multi_region_transfer</b></a>(size_t elem_size) &rarr; explicit</li><li class="is-family-code"><a href="#2CA4810366763C64"><b>multi_region_transfer</b></a>(size_t elem_size, std::vector&lt;inbound_pilot&gt; &amp;&amp; unassigned_pilots) &rarr; explicit</li></ul></section><section><h2>Member Functions</h2><section><h3 id="0102CD08D4865FF1" data-function-name="do_complete"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#0102CD08D4865FF1">\xb6</a><code class="hdoc-function-code language-cpp">bool do_complete()</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/receive_arbiter.h#L66">include/receive_arbiter.h:66</a></p></aside></section><hr class="member-fun-separator"></hr><section><h3 id="A7BD3F9B7A7DC32C" data-function-name="multi_region_transfer"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#A7BD3F9B7A7DC32C">\xb6</a><code class="hdoc-function-code language-cpp">explicit multi_region_transfer(size_t elem_size)</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/receive_arbiter.h#L63">include/receive_arbiter.h:63</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">size_t<b> elem_size</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="2CA4810366763C64" data-function-name="multi_region_transfer"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#2CA4810366763C64">\xb6</a><code class="hdoc-function-code language-cpp">explicit multi_region_transfer(\n    size_t elem_size,\n    <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;inbound_pilot&gt;&amp;&amp;\n        unassigned_pilots)</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/receive_arbiter.h#L64">include/receive_arbiter.h:64</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">size_t<b> elem_size</b></dt><dt class="is-family-code"><a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;inbound_pilot&gt;&amp;&amp;<b> unassigned_pilots</b></dt></dl></section></section><hr class="member-fun-separator"></hr></section></main>',n={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"struct multi_region_transfer"},c=void 0,o={id:"api/records/D43CE5971F1570AE",title:"struct multi_region_transfer",description:"",source:"@site/celerity-runtime/docs/api/records/D43CE5971F1570AE.mdx",sourceDirName:"api/records",slug:"/api/records/D43CE5971F1570AE",permalink:"/docs/api/records/D43CE5971F1570AE",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"struct multi_region_transfer"},sidebar:"api"},l={},d=[];function p(e){const{Head:t}={...(0,r.R)(),...e.components};return t||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t,{children:[(0,a.jsx)("script",{src:"/js/highlight.min.js"}),(0,a.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:s}})]})}function m(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>n,x:()=>c});var a=i(96540);const r={},s=a.createContext(r);function n(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:n(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);