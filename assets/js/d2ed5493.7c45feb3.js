"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[27189],{7667:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>n,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var r=t(74848),c=t(28453);const i='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#06885D8AE2CD6C63"><span>namespace detail</span></a></li><li><a href="/docs/api/namespaces/#F619A510E58C18DF"><span>namespace out_of_order_engine_detail</span></a></li><li class="is-active"><a aria-current="pageD0694B3A541187E8"><span>struct engine_impl</span></a></li></ul></nav>\n<main><h1>struct engine_impl</h1><h2>Declaration</h2><pre class="p-0"><code class="hdoc-record-code language-cpp">struct engine_impl { /* full declaration omitted */ };</code></pre><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/out_of_order_engine.cc#L86">src/out_of_order_engine.cc:86</a></p><h2>Member Variables</h2><dl><dt class="is-family-code" id="var_system" data-member-name="system">  const <a href="/docs/api/records/8B87A955194B6925/">system_info</a> <b>system</b></dt><dt class="is-family-code" id="var_host_queue_target_state" data-member-name="host_queue_target_state">  <a href="/docs/api/records/71919CDFB59F90F9/">target_state</a> <b>host_queue_target_state</b></dt><dt class="is-family-code" id="var_device_queue_target_states" data-member-name="device_queue_target_states">  <a href="/docs/api/records/7F709CB15C3D9013/">dense_map</a>&lt;device_id, target_state&gt; <b>device_queue_target_states</b></dt><dt class="is-family-code" id="var_incomplete_instructions" data-member-name="incomplete_instructions">  <a href="https://en.cppreference.com/w/cpp/container/unordered_map">std::unordered_map</a>&lt;instruction_id,\n                   incomplete_instruction_state&gt; <b>incomplete_instructions</b></dt><dd>The set of all instructions between submit() and complete_assigned(). Keyed by `instruction_id` to allow collecting successors through iterating over a newly submitted instruction&apos;s dependencies, which are given in terms of instruction ids. Any dependency that is not found in `incomplete_instructions` is assumed to have completed earlier (triggering its removal from the map).</dd><dt class="is-family-code" id="var_assignment_queue" data-member-name="assignment_queue">  <a href="https://en.cppreference.com/w/cpp/container/priority_queue">std::priority_queue</a>&lt;\n    const instruction*,\n    std::vector&lt;const instruction*&gt;,\n    instruction_priority_less&gt; <b>assignment_queue</b></dt><dd>Queue of all instructions in `conditional_eagerly_assignable_state` and `unconditional_assignable_state`, in decreasing order of instruction priority.</dd></dl><h2>Member Function Overview</h2><ul><li class="is-family-code"><a href="#FF304E3F1DBB36C8"><b>assign_one</b></a>() &rarr; std::optional&lt;assignment&gt;</li><li class="is-family-code"><a href="#3B46034FB51F74E0"><b>complete</b></a>(instruction_id iid) &rarr; void</li><li class="is-family-code"><a href="#7CA2AB2E15554763"><b>engine_impl</b></a>(const system_info &amp; system) &rarr; explicit</li><li class="is-family-code"><a href="#0E8C30BBF64D4FA3"><b>engine_impl</b></a>(const engine_impl &amp;)</li><li class="is-family-code"><a href="#9FF01C4B19AB63F4"><b>engine_impl</b></a>(engine_impl &amp;&amp;)</li><li class="is-family-code"><a href="#DBECD1AEB3F92C89"><b>get_free_lane_id</b></a>(target tgt, const std::optional&lt;device_id&gt; &amp; device) &rarr; lane_id</li><li class="is-family-code"><a href="#156B497BD79B4BB5"><b>get_lane_state</b></a>(target tgt, const std::optional&lt;device_id&gt; &amp; device, lane_id lane) &rarr; lane_state &amp;</li><li class="is-family-code"><a href="#4C4ED8DAE2664B9A"><b>get_target_state</b></a>(target tgt, const std::optional&lt;device_id&gt; &amp; device) &rarr; target_state &amp;</li><li class="is-family-code"><a href="#007EF49347059D74"><b>is_idle</b></a>() const &rarr; bool</li><li class="is-family-code"><a href="#8E1AA1150011C550"><b>operator=</b></a>(const engine_impl &amp;) &rarr; engine_impl &amp;</li><li class="is-family-code"><a href="#8CF3AFE45112B479"><b>operator=</b></a>(engine_impl &amp;&amp;) &rarr; engine_impl &amp;</li><li class="is-family-code"><a href="#530DD7025CBC1C7E"><b>pop_assignable</b></a>() &rarr; incomplete_instruction_state *</li><li class="is-family-code"><a href="#A5DF10C10251C5B5"><b>submit</b></a>(const instruction * instr) &rarr; void</li><li class="is-family-code"><a href="#DA0BC98927C7E6BC"><b>try_mark_for_assignment</b></a>(incomplete_instruction_state &amp; node) &rarr; void</li><li class="is-family-code"><a href="#2EEB8B8D7BFEEB09"><b>~engine_impl</b></a>()</li></ul><h2>Member Functions</h2><h3 id="FF304E3F1DBB36C8" data-function-name="assign_one"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#FF304E3F1DBB36C8">\xb6</a><code class="hdoc-function-code language-cpp"><a href="https://en.cppreference.com/w/cpp/utility/optional">std::optional</a>&lt;assignment&gt; assign_one()</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/out_of_order_engine.cc#L130">src/out_of_order_engine.cc:130</a></p><hr class="member-fun-separator"></hr><h3 id="3B46034FB51F74E0" data-function-name="complete"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#3B46034FB51F74E0">\xb6</a><code class="hdoc-function-code language-cpp">void complete(<a href="/docs/api/records/A10FDF2DB5485BE8/">instruction_id</a> iid)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/out_of_order_engine.cc#L123">src/out_of_order_engine.cc:123</a></p><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/A10FDF2DB5485BE8/">instruction_id</a><b> iid</b></dt></dl><hr class="member-fun-separator"></hr><h3 id="7CA2AB2E15554763" data-function-name="engine_impl"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#7CA2AB2E15554763">\xb6</a><code class="hdoc-function-code language-cpp">explicit engine_impl(const <a href="/docs/api/records/8B87A955194B6925/">system_info</a>&amp; system)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/out_of_order_engine.cc#L100">src/out_of_order_engine.cc:100</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/8B87A955194B6925/">system_info</a>&amp;<b> system</b></dt></dl><hr class="member-fun-separator"></hr><h3 id="0E8C30BBF64D4FA3" data-function-name="engine_impl"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#0E8C30BBF64D4FA3">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/D0694B3A541187E8/">engine_impl</a>(const engine_impl&amp;)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/out_of_order_engine.cc#L104">src/out_of_order_engine.cc:104</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/D0694B3A541187E8/">engine_impl</a>&amp;<b> </b></dt></dl><hr class="member-fun-separator"></hr><h3 id="9FF01C4B19AB63F4" data-function-name="engine_impl"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#9FF01C4B19AB63F4">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/D0694B3A541187E8/">engine_impl</a>(engine_impl&amp;&amp;)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/out_of_order_engine.cc#L105">src/out_of_order_engine.cc:105</a></p><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/D0694B3A541187E8/">engine_impl</a>&amp;&amp;<b> </b></dt></dl><hr class="member-fun-separator"></hr><h3 id="DBECD1AEB3F92C89" data-function-name="get_free_lane_id"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#DBECD1AEB3F92C89">\xb6</a><code class="hdoc-function-code language-cpp">lane_id get_free_lane_id(\n    <a href="/docs/api/enums/8F429199F4665530/">target</a> tgt,\n    const <a href="https://en.cppreference.com/w/cpp/utility/optional">std::optional</a>&lt;device_id&gt;&amp; device)</code></pre></h3><h4>Description</h4><p><p>Linearly search for a lane that has no in-flight instructions within a target_state. If none exists, add an additional lane.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/out_of_order_engine.cc#L115">src/out_of_order_engine.cc:115</a></p><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/enums/8F429199F4665530/">target</a><b> tgt</b></dt><dt class="is-family-code">const <a href="https://en.cppreference.com/w/cpp/utility/optional">std::optional</a>&lt;device_id&gt;&amp;<b> device</b></dt></dl><hr class="member-fun-separator"></hr><h3 id="156B497BD79B4BB5" data-function-name="get_lane_state"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#156B497BD79B4BB5">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/233A411004EA00D3/">lane_state</a>&amp; get_lane_state(\n    <a href="/docs/api/enums/8F429199F4665530/">target</a> tgt,\n    const <a href="https://en.cppreference.com/w/cpp/utility/optional">std::optional</a>&lt;device_id&gt;&amp; device,\n    lane_id lane)</code></pre></h3><h4>Description</h4><p><p>Retrieve state for an existing lane.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/out_of_order_engine.cc#L112">src/out_of_order_engine.cc:112</a></p><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/enums/8F429199F4665530/">target</a><b> tgt</b></dt><dt class="is-family-code">const <a href="https://en.cppreference.com/w/cpp/utility/optional">std::optional</a>&lt;device_id&gt;&amp;<b> device</b></dt><dt class="is-family-code">lane_id<b> lane</b></dt></dl><hr class="member-fun-separator"></hr><h3 id="4C4ED8DAE2664B9A" data-function-name="get_target_state"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#4C4ED8DAE2664B9A">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/71919CDFB59F90F9/">target_state</a>&amp; get_<a href="/docs/api/enums/8F429199F4665530/">target</a>_state(\n    target tgt,\n    const <a href="https://en.cppreference.com/w/cpp/utility/optional">std::optional</a>&lt;device_id&gt;&amp; device)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/out_of_order_engine.cc#L109">src/out_of_order_engine.cc:109</a></p><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/enums/8F429199F4665530/">target</a><b> tgt</b></dt><dt class="is-family-code">const <a href="https://en.cppreference.com/w/cpp/utility/optional">std::optional</a>&lt;device_id&gt;&amp;<b> device</b></dt></dl><hr class="member-fun-separator"></hr><h3 id="007EF49347059D74" data-function-name="is_idle"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#007EF49347059D74">\xb6</a><code class="hdoc-function-code language-cpp">bool is_idle() const</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/out_of_order_engine.cc#L125">src/out_of_order_engine.cc:125</a></p><hr class="member-fun-separator"></hr><h3 id="8E1AA1150011C550" data-function-name="operator="><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#8E1AA1150011C550">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/D0694B3A541187E8/">engine_impl</a>&amp; operator=(const <a href="/docs/api/records/D0694B3A541187E8/">engine_impl</a>&amp;)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/out_of_order_engine.cc#L106">src/out_of_order_engine.cc:106</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/D0694B3A541187E8/">engine_impl</a>&amp;<b> </b></dt></dl><hr class="member-fun-separator"></hr><h3 id="8CF3AFE45112B479" data-function-name="operator="><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#8CF3AFE45112B479">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/D0694B3A541187E8/">engine_impl</a>&amp; operator=(<a href="/docs/api/records/D0694B3A541187E8/">engine_impl</a>&amp;&amp;)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/out_of_order_engine.cc#L107">src/out_of_order_engine.cc:107</a></p><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/D0694B3A541187E8/">engine_impl</a>&amp;&amp;<b> </b></dt></dl><hr class="member-fun-separator"></hr><h3 id="530DD7025CBC1C7E" data-function-name="pop_assignable"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#530DD7025CBC1C7E">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/3F9D4E07110E5FFD/">incomplete_instruction_state</a>* pop_assignable()</code></pre></h3><h4>Description</h4><p><p>Return the highest-priority instruction from <code>assignment_queue</code> that is unconditionally assignable (helper).</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/out_of_order_engine.cc#L128">src/out_of_order_engine.cc:128</a></p><hr class="member-fun-separator"></hr><h3 id="A5DF10C10251C5B5" data-function-name="submit"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#A5DF10C10251C5B5">\xb6</a><code class="hdoc-function-code language-cpp">void submit(const <a href="/docs/api/records/406117B5A814B8B4/">instruction</a>* instr)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/out_of_order_engine.cc#L121">src/out_of_order_engine.cc:121</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/406117B5A814B8B4/">instruction</a>*<b> instr</b></dt></dl><hr class="member-fun-separator"></hr><h3 id="DA0BC98927C7E6BC" data-function-name="try_mark_for_assignment"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#DA0BC98927C7E6BC">\xb6</a><code class="hdoc-function-code language-cpp">void try_mark_for_assignment(\n    <a href="/docs/api/records/3F9D4E07110E5FFD/">incomplete_instruction_state</a>&amp; node)</code></pre></h3><h4>Description</h4><p><p>Attempt to replace assignment state for an incomplete instruction with <code>conditional_eagerly_assignable_state</code> or <code>unconditional_assignable_state</code> in response to either the initial submission or to completion of one or more predecessors. If successful, the instruction ends up in <code>assignment_queue</code>.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/out_of_order_engine.cc#L119">src/out_of_order_engine.cc:119</a></p><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/3F9D4E07110E5FFD/">incomplete_instruction_state</a>&amp;<b> node</b></dt></dl><hr class="member-fun-separator"></hr><h3 id="2EEB8B8D7BFEEB09" data-function-name="~engine_impl"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#2EEB8B8D7BFEEB09">\xb6</a><code class="hdoc-function-code language-cpp">~engine_impl()</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/out_of_order_engine.cc#L103">src/out_of_order_engine.cc:103</a></p><hr class="member-fun-separator"></hr></main>',s={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"struct engine_impl"},n=void 0,o={id:"api/records/D0694B3A541187E8",title:"struct engine_impl",description:"",source:"@site/celerity-runtime/docs/api/records/D0694B3A541187E8.mdx",sourceDirName:"api/records",slug:"/api/records/D0694B3A541187E8",permalink:"/docs/api/records/D0694B3A541187E8",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"struct engine_impl"},sidebar:"api"},l={},d=[];function p(e){const{Head:a}={...(0,c.R)(),...e.components};return a||function(e,a){throw new Error("Expected "+(a?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(a,{children:[(0,r.jsx)("script",{src:"/js/highlight.min.js"}),(0,r.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,r.jsx)("div",{dangerouslySetInnerHTML:{__html:i}})]})}function m(e={}){const{wrapper:a}={...(0,c.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},28453:(e,a,t)=>{t.d(a,{R:()=>s,x:()=>n});var r=t(96540);const c={},i=r.createContext(c);function s(e){const a=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function n(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),r.createElement(i.Provider,{value:a},e.children)}}}]);