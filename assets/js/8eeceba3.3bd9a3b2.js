"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[58003],{12777:(e,a,c)=>{c.r(a),c.d(a,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>t,metadata:()=>n,toc:()=>l});var o=c(74848),r=c(28453);const i='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#06885D8AE2CD6C63"><span>namespace detail</span></a></li><li class="is-active"><a aria-current="page5445ADDDC225FF35"><span>class communicator</span></a></li></ul></nav>\n<main><h1>class communicator</h1><h2>Declaration</h2><pre class="p-0"><code class="hdoc-record-code language-cpp">class communicator { /* full declaration omitted */ };</code></pre><h2>Description</h2><p><p>Interface for peer-to-peer and collective communication across nodes to be implemented for MPI or similar system APIs. Celerity maintains one root communicator which can be cloned collectively, and the same communicator instance in this &quot;cloning tree&quot; must participate in corresponding operations on each node. Communicator instances themselves are not thread-safe, but if there are multiple (cloned) instances, each may be used from their own thread. Peer-to-peer operations (send/receive/poll) can be arbitrarily re-ordered by the communicator, but collectives will always be executed precisely in the order they are submitted.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/communicator.h#L17">include/communicator.h:17</a></p><h2>Member Function Overview</h2><ul><li class="is-family-code"><a href="#7BCF839B16C5EBE1"><b>collective_barrier</b></a>() &rarr; virtual void</li><li class="is-family-code"><a href="#22BAFC41D4411DCD"><b>collective_clone</b></a>() &rarr; virtual std::unique_ptr&lt;communicator&gt;</li><li class="is-family-code"><a href="#F88583DFD344FC0E"><b>communicator</b></a>()</li><li class="is-family-code"><a href="#5D1F3CB519D5E1CD"><b>communicator</b></a>(const communicator &amp;)</li><li class="is-family-code"><a href="#27DBEDF1EFCF7A96"><b>communicator</b></a>(communicator &amp;&amp;)</li><li class="is-family-code"><a href="#9F965B7E1293CE79"><b>get_local_node_id</b></a>() const &rarr; virtual node_id</li><li class="is-family-code"><a href="#A4690FA0C34240CC"><b>get_num_nodes</b></a>() const &rarr; virtual size_t</li><li class="is-family-code"><a href="#1875381CEE79ED55"><b>operator=</b></a>(const communicator &amp;) &rarr; communicator &amp;</li><li class="is-family-code"><a href="#A69457B3CAE37CD7"><b>operator=</b></a>(communicator &amp;&amp;) &rarr; communicator &amp;</li><li class="is-family-code"><a href="#126A40BF50AC7DEF"><b>poll_inbound_pilots</b></a>() &rarr; [[nodiscard]] virtual std::vector&lt;inbound_pilot&gt;</li><li class="is-family-code"><a href="#39C30A5FAF8E83D3"><b>receive_payload</b></a>(node_id from, message_id msgid, void * base, const stride &amp; stride) &rarr; [[nodiscard]] virtual async_event</li><li class="is-family-code"><a href="#FC6C8A695F081561"><b>send_outbound_pilot</b></a>(const outbound_pilot &amp; pilot) &rarr; virtual void</li><li class="is-family-code"><a href="#AAE1C0CF167AF8C5"><b>send_payload</b></a>(node_id to, message_id msgid, const void * base, const stride &amp; stride) &rarr; [[nodiscard]] virtual async_event</li><li class="is-family-code"><a href="#D30BB49D53A653DA"><b>~communicator</b></a>() &rarr; virtual</li></ul><h2>Member Functions</h2><h3 id="7BCF839B16C5EBE1" data-function-name="collective_barrier"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#7BCF839B16C5EBE1">\xb6</a><code class="hdoc-function-code language-cpp">virtual void collective_barrier()</code></pre></h3><h4>Description</h4><p><p>Blocks until all nodes in this communicator have called <code>collective_barrier()</code>. Must be ordered identically to all other collective operations on this communicator across all nodes.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/communicator.h#L71">include/communicator.h:71</a></p><hr class="member-fun-separator"></hr><h3 id="22BAFC41D4411DCD" data-function-name="collective_clone"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#22BAFC41D4411DCD">\xb6</a><code class="hdoc-function-code language-cpp">virtual <a href="https://en.cppreference.com/w/cpp/memory/unique_ptr">std::unique_ptr</a>&lt;communicator&gt;\ncollective_clone()</code></pre></h3><h4>Description</h4><p><p>Creates a new communicator that is fully concurrent to this one, and which has its own &quot;namespace&quot; for peer-to-peer and collective operations. Must be ordered identically to all other collective operations on this communicator across all nodes.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/communicator.h#L66">include/communicator.h:66</a></p><hr class="member-fun-separator"></hr><h3 id="F88583DFD344FC0E" data-function-name="communicator"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#F88583DFD344FC0E">\xb6</a><code class="hdoc-function-code language-cpp">communicator()</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/communicator.h#L31">include/communicator.h:31</a></p><hr class="member-fun-separator"></hr><h3 id="5D1F3CB519D5E1CD" data-function-name="communicator"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#5D1F3CB519D5E1CD">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/5445ADDDC225FF35/">communicator</a>(const communicator&amp;)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/communicator.h#L32">include/communicator.h:32</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/5445ADDDC225FF35/">communicator</a>&amp;<b> </b></dt></dl><hr class="member-fun-separator"></hr><h3 id="27DBEDF1EFCF7A96" data-function-name="communicator"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#27DBEDF1EFCF7A96">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/5445ADDDC225FF35/">communicator</a>(communicator&amp;&amp;)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/communicator.h#L33">include/communicator.h:33</a></p><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/5445ADDDC225FF35/">communicator</a>&amp;&amp;<b> </b></dt></dl><hr class="member-fun-separator"></hr><h3 id="9F965B7E1293CE79" data-function-name="get_local_node_id"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#9F965B7E1293CE79">\xb6</a><code class="hdoc-function-code language-cpp">virtual <a href="/docs/api/records/DBE63D9D086598BC/">node_id</a> get_local_node_id() const</code></pre></h3><h4>Description</h4><p><p>Returns the 0-based id of the local node in the communicator.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/communicator.h#L46">include/communicator.h:46</a></p><hr class="member-fun-separator"></hr><h3 id="A4690FA0C34240CC" data-function-name="get_num_nodes"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#A4690FA0C34240CC">\xb6</a><code class="hdoc-function-code language-cpp">virtual size_t get_num_nodes() const</code></pre></h3><h4>Description</h4><p><p>Returns the number of nodes (processes) that are part of this communicator.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/communicator.h#L43">include/communicator.h:43</a></p><hr class="member-fun-separator"></hr><h3 id="1875381CEE79ED55" data-function-name="operator="><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#1875381CEE79ED55">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/5445ADDDC225FF35/">communicator</a>&amp; operator=(const <a href="/docs/api/records/5445ADDDC225FF35/">communicator</a>&amp;)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/communicator.h#L34">include/communicator.h:34</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/5445ADDDC225FF35/">communicator</a>&amp;<b> </b></dt></dl><hr class="member-fun-separator"></hr><h3 id="A69457B3CAE37CD7" data-function-name="operator="><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#A69457B3CAE37CD7">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/5445ADDDC225FF35/">communicator</a>&amp; operator=(<a href="/docs/api/records/5445ADDDC225FF35/">communicator</a>&amp;&amp;)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/communicator.h#L35">include/communicator.h:35</a></p><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/5445ADDDC225FF35/">communicator</a>&amp;&amp;<b> </b></dt></dl><hr class="member-fun-separator"></hr><h3 id="126A40BF50AC7DEF" data-function-name="poll_inbound_pilots"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#126A40BF50AC7DEF">\xb6</a><code class="hdoc-function-code language-cpp">[[nodiscard]] virtual <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;inbound_pilot&gt;\npoll_inbound_pilots()</code></pre></h3><h4>Description</h4><p><p>Returns all inbound pilots received on this communicator since the last invocation of the same function. Never blocks.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/communicator.h#L53">include/communicator.h:53</a></p><hr class="member-fun-separator"></hr><h3 id="39C30A5FAF8E83D3" data-function-name="receive_payload"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#39C30A5FAF8E83D3">\xb6</a><code class="hdoc-function-code language-cpp">[[nodiscard]] virtual <a href="/docs/api/records/75C01CF859B866AB/">async_event</a> receive_payload(\n    <a href="/docs/api/records/DBE63D9D086598BC/">node_id</a> from,\n    <a href="/docs/api/records/9CC04BC93AB17E32/">message_id</a> msgid,\n    void* base,\n    const <a href="/docs/api/records/0E8486033E50D99A/">stride</a>&amp; stride)</code></pre></h3><h4>Description</h4><p><p>Begins receiving strided data (which was previously announced using an inbound_pilot) from the specified node. The <code>base</code> allocation must remain live until the returned event completes, and no element inside <code>stride</code> must be written to during that time.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/communicator.h#L61">include/communicator.h:61</a></p><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/DBE63D9D086598BC/">node_id</a><b> from</b></dt><dt class="is-family-code"><a href="/docs/api/records/9CC04BC93AB17E32/">message_id</a><b> msgid</b></dt><dt class="is-family-code">void*<b> base</b></dt><dt class="is-family-code">const <a href="/docs/api/records/0E8486033E50D99A/">stride</a>&amp;<b> stride</b></dt></dl><hr class="member-fun-separator"></hr><h3 id="FC6C8A695F081561" data-function-name="send_outbound_pilot"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#FC6C8A695F081561">\xb6</a><code class="hdoc-function-code language-cpp">virtual void send_<a href="/docs/api/records/346CE9659132E3D3/">outbound_pilot</a>(\n    const outbound_pilot&amp; pilot)</code></pre></h3><h4>Description</h4><p><p>Asynchronously sends a pilot message, returning without acknowledgement from the receiver. The pilot is copied internally and the reference does not need to remain live after the function returns.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/communicator.h#L50">include/communicator.h:50</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/346CE9659132E3D3/">outbound_pilot</a>&amp;<b> pilot</b></dt></dl><hr class="member-fun-separator"></hr><h3 id="AAE1C0CF167AF8C5" data-function-name="send_payload"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#AAE1C0CF167AF8C5">\xb6</a><code class="hdoc-function-code language-cpp">[[nodiscard]] virtual <a href="/docs/api/records/75C01CF859B866AB/">async_event</a> send_payload(\n    <a href="/docs/api/records/DBE63D9D086598BC/">node_id</a> to,\n    <a href="/docs/api/records/9CC04BC93AB17E32/">message_id</a> msgid,\n    const void* base,\n    const <a href="/docs/api/records/0E8486033E50D99A/">stride</a>&amp; stride)</code></pre></h3><h4>Description</h4><p><p>Begins sending strided data (that was previously announced using an outbound_pilot) to the specified node. The <code>base</code> allocation must remain live until the returned event completes, and no element inside <code>stride</code> must be written to during that time.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/communicator.h#L57">include/communicator.h:57</a></p><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/DBE63D9D086598BC/">node_id</a><b> to</b></dt><dt class="is-family-code"><a href="/docs/api/records/9CC04BC93AB17E32/">message_id</a><b> msgid</b></dt><dt class="is-family-code">const void*<b> base</b></dt><dt class="is-family-code">const <a href="/docs/api/records/0E8486033E50D99A/">stride</a>&amp;<b> stride</b></dt></dl><hr class="member-fun-separator"></hr><h3 id="D30BB49D53A653DA" data-function-name="~communicator"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#D30BB49D53A653DA">\xb6</a><code class="hdoc-function-code language-cpp">virtual ~communicator()</code></pre></h3><h4>Description</h4><p><p>Communicator destruction is a collective operation like <code>collective_barrier</code>. The user must ensure that any asynchronous operation is already complete when the destructor runs.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/communicator.h#L40">include/communicator.h:40</a></p><hr class="member-fun-separator"></hr></main>',t={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class communicator"},s=void 0,n={id:"api/records/5445ADDDC225FF35",title:"class communicator",description:"",source:"@site/celerity-runtime/docs/api/records/5445ADDDC225FF35.mdx",sourceDirName:"api/records",slug:"/api/records/5445ADDDC225FF35",permalink:"/docs/api/records/5445ADDDC225FF35",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class communicator"},sidebar:"api"},d={},l=[];function m(e){const{Head:a}={...(0,r.R)(),...e.components};return a||function(e,a){throw new Error("Expected "+(a?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(a,{children:[(0,o.jsx)("script",{src:"/js/highlight.min.js"}),(0,o.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,o.jsx)("div",{dangerouslySetInnerHTML:{__html:i}})]})}function p(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,o.jsx)(a,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},28453:(e,a,c)=>{c.d(a,{R:()=>t,x:()=>s});var o=c(96540);const r={},i=o.createContext(r);function t(e){const a=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function s(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),o.createElement(i.Provider,{value:a},e.children)}}}]);