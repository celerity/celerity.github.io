"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[87195],{49499:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>a});var i=t(74848),r=t(28453);const o={id:"core-principles",title:"Core Principles",sidebar_label:"Core Principles"},s=void 0,l={id:"core-principles",title:"Core Principles",description:"The Celerity API and runtime system follow a small number of core principles,",source:"@site/celerity-runtime/docs/core-principles.md",sourceDirName:".",slug:"/core-principles",permalink:"/docs/core-principles",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Philip Salzmann",lastUpdatedAt:1567688078e3,frontMatter:{id:"core-principles",title:"Core Principles",sidebar_label:"Core Principles"},sidebar:"docs",previous:{title:"Overview",permalink:"/docs/overview"},next:{title:"Platform Support",permalink:"/docs/platform-support"}},c={},a=[];function d(e){const n={li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"The Celerity API and runtime system follow a small number of core principles,\nwhich help us to focus on the goals of the project and guide our design\ndecisions."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Data flow over control flow"})," - dependencies in computations using the\nCelerity API should be defined by their respective data flow rather than\nexplicit control flow. Avoid creating two potentially redundant\nsynchronization paths."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Everything is asynchronous"})," - in the runtime implementation, all command\ngeneration and data transfers should happen asynchronously. This applies\nboth across distributed memory nodes and between individual runtime threads\non each node."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"When in doubt, stay close to SYCL"})," - when introducing new API\nfunctionality and concepts, try to stick as closely as possible to SYCL, to\nease the migration path for new users. Of course, some functionality needs\nto be reconsidered for distributed memory."]}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var i=t(96540);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);