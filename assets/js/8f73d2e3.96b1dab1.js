"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[99489],{37753:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>l,toc:()=>o});var i=t(74848),n=t(28453);const s='<!DOCTYPE html><html><head><meta charset="utf-8"></meta><meta content="width=device-width, initial-scale=1" name="viewport"></meta><title>class intrusive_graph_node: Celerity 0.6.0 documentation</title><link href="../styles.css" rel="stylesheet"></link><script src="../highlight.min.js"><\/script><script>hljs.highlightAll();<\/script><link href="../katex.min.css" rel="stylesheet"></link><script src="../katex.min.js"><\/script><script src="../auto-render.min.js"><\/script><script>\n      document.addEventListener("DOMContentLoaded", function() {\n        renderMathInElement(document.body, {\n          delimiters: [\n            {left: \'$$\', right: \'$$\', display: true},\n            {left: \'$\', right: \'$\', display: false},\n          ],\n        });\n      });\n    <\/script><link href="../apple-touch-icon.png" sizes="180x180" rel="apple-touch-icon"></link><link href="../favicon-32x32.png" sizes="32x32" type="image/png" rel="icon"></link><link href="../favicon-16x16.png" sizes="16x16" type="image/png" rel="icon"></link></head><body><div id="wrapper"><section class="section"><div class="container"><div class="columns"><aside class="column is-one-fifth"><ul class="menu-list"><p class="is-size-4">Celerity 0.6.0</p><p class="menu-label">Navigation</p><li><a href="../index/">Home</a></li><li><a href="../search/">Search</a></li><li><a href="https://github.com/celerity/celerity-runtime/">Repository</a></li><p class="menu-label">API Documentation</p><li><a href="/docs/api/namespaces/">Namespaces</a></li><li><a href="/docs/api/records/">Records</a></li><li><a href="/docs/api/enums/">Enums</a></li><li><a href="/docs/api/functions/">Functions</a></li><li><a href="/docs/api/aliases/">Aliases</a></li></ul></aside><div class="column" style="overflow-x: auto"><nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#06885D8AE2CD6C63"><span>namespace detail</span></a></li><li class="is-active"><a aria-current="pageF8F1F36C21FE7546"><span>class intrusive_graph_node</span></a></li></ul></nav><main class="content"><h1>class intrusive_graph_node</h1><h2>Declaration</h2><pre class="p-0"><code class="hdoc-record-code language-cpp">template &lt;typename T&gt;\nclass intrusive_graph_node { /* full declaration omitted */ };</code></pre><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/intrusive_graph.h#L47">include/intrusive_graph.h:47</a></p><h2>Template Parameters</h2><dl><dt class="is-family-code"><b> T</b></dt></dl><h2>Member Variables</h2><dl><dt class="is-family-code hdoc-private" id="var_m_dependencies" data-member-name="m_dependencies">  gch::small_vector&lt;dependency&gt; <b>m_dependencies</b></dt><dt class="is-family-code hdoc-private" id="var_m_dependents" data-member-name="m_dependents">  gch::small_vector&lt;dependent&gt; <b>m_dependents</b></dt><dt class="is-family-code hdoc-private" id="var_m_pseudo_critical_path_length" data-member-name="m_pseudo_critical_path_length">  int <b>m_pseudo_critical_path_length</b> = 0</dt></dl><h2>Member Aliases</h2><ul><li class="is-family-code">using dependent = dependency;</li></ul><h2>Member Function Overview</h2><ul><li class="is-family-code"><a href="#D71FB20C786AEF2C"><b>add_dependency</b></a>(dependency dep) &rarr; void</li><li class="is-family-code"><a href="#48FC4146E72D3666"><b>get_dependencies</b></a>() const &rarr; auto</li><li class="is-family-code"><a href="#80DF3A361494B7B9"><b>get_dependents</b></a>() const &rarr; auto</li><li class="is-family-code"><a href="#95A827328A7C93F0"><b>get_pseudo_critical_path_length</b></a>() const &rarr; int</li><li class="is-family-code"><a href="#9EFA4035CD63C5FD"><b>has_dependency</b></a>(const T * node, std::optional&lt;dependency_kind&gt; kind = std::nullopt) const &rarr; bool</li><li class="is-family-code"><a href="#6705C8E2B23C59CE"><b>has_dependent</b></a>(const T * node, std::optional&lt;dependency_kind&gt; kind = std::nullopt) const &rarr; bool</li><li class="is-family-code"><a href="#59D36FE15E3F1F8A"><b>intrusive_graph_node</b></a>()</li><li class="is-family-code"><a href="#B6DDDB68DDCF2AA7"><b>remove_dependency</b></a>(const T * node) &rarr; void</li><li class="is-family-code hdoc-protected"><a href="#AC94071BCE03A238"><b>~intrusive_graph_node</b></a>()</li><li class="is-family-code hdoc-private"><span class="hdoc-overview-template">template &lt;typename Range&gt;</span><br><a href="#DCCC4A2BC18C0B32"><b>find_by_node</b></a>(Range &amp; rng, const T * node) &rarr; static auto</li></ul><h2>Member Functions</h2><h3 id="D71FB20C786AEF2C" data-function-name="add_dependency"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#D71FB20C786AEF2C">\xb6</a><code class="hdoc-function-code language-cpp">void add_<a href="/docs/api/records/4855152CFBD2F2B4/">dependency</a>(dependency dep)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/intrusive_graph.h#L76">include/intrusive_graph.h:76</a></p><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/4855152CFBD2F2B4/">dependency</a><b> dep</b></dt></dl><hr class="member-fun-separator"></hr><h3 id="48FC4146E72D3666" data-function-name="get_dependencies"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#48FC4146E72D3666">\xb6</a><code class="hdoc-function-code language-cpp">auto get_dependencies() const</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/intrusive_graph.h#L126">include/intrusive_graph.h:126</a></p><hr class="member-fun-separator"></hr><h3 id="80DF3A361494B7B9" data-function-name="get_dependents"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#80DF3A361494B7B9">\xb6</a><code class="hdoc-function-code language-cpp">auto get_dependents() const</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/intrusive_graph.h#L127">include/intrusive_graph.h:127</a></p><hr class="member-fun-separator"></hr><h3 id="95A827328A7C93F0" data-function-name="get_pseudo_critical_path_length"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#95A827328A7C93F0">\xb6</a><code class="hdoc-function-code language-cpp">int get_pseudo_critical_path_length() const</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/intrusive_graph.h#L129">include/intrusive_graph.h:129</a></p><hr class="member-fun-separator"></hr><h3 id="9EFA4035CD63C5FD" data-function-name="has_dependency"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#9EFA4035CD63C5FD">\xb6</a><code class="hdoc-function-code language-cpp">bool has_dependency(const T* node,\n                    <a href="https://en.cppreference.com/w/cpp/utility/optional">std::optional</a>&lt;dependency_kind&gt;\n                        kind = std::nullopt) const</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/intrusive_graph.h#L116">include/intrusive_graph.h:116</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const T*<b> node</b></dt><dt class="is-family-code"><a href="https://en.cppreference.com/w/cpp/utility/optional">std::optional</a>&lt;dependency_kind&gt;<b> kind</b> = std::nullopt</dt></dl><hr class="member-fun-separator"></hr><h3 id="6705C8E2B23C59CE" data-function-name="has_dependent"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#6705C8E2B23C59CE">\xb6</a><code class="hdoc-function-code language-cpp">bool has_dependent(const T* node,\n                   <a href="https://en.cppreference.com/w/cpp/utility/optional">std::optional</a>&lt;dependency_kind&gt;\n                       kind = std::nullopt) const</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/intrusive_graph.h#L121">include/intrusive_graph.h:121</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const T*<b> node</b></dt><dt class="is-family-code"><a href="https://en.cppreference.com/w/cpp/utility/optional">std::optional</a>&lt;dependency_kind&gt;<b> kind</b> = std::nullopt</dt></dl><hr class="member-fun-separator"></hr><h3 id="59D36FE15E3F1F8A" data-function-name="intrusive_graph_node"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#59D36FE15E3F1F8A">\xb6</a><code class="hdoc-function-code language-cpp">intrusive_graph_node()</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/intrusive_graph.h#L58">include/intrusive_graph.h:58</a></p><hr class="member-fun-separator"></hr><h3 id="B6DDDB68DDCF2AA7" data-function-name="remove_dependency"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#B6DDDB68DDCF2AA7">\xb6</a><code class="hdoc-function-code language-cpp">void remove_dependency(const T* node)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/intrusive_graph.h#L106">include/intrusive_graph.h:106</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const T*<b> node</b></dt></dl><hr class="member-fun-separator"></hr><h3 id="AC94071BCE03A238" data-function-name="~intrusive_graph_node"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#AC94071BCE03A238">\xb6</a><code class="hdoc-function-code language-cpp">~intrusive_graph_node()</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/intrusive_graph.h#L61">include/intrusive_graph.h:61</a></p><hr class="member-fun-separator"></hr><h3 id="DCCC4A2BC18C0B32" data-function-name="find_by_node"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#DCCC4A2BC18C0B32">\xb6</a><code class="hdoc-function-code language-cpp">template &lt;typename Range&gt;\nstatic auto find_by_node(Range&amp; rng,\n                         const T* node)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/intrusive_graph.h#L144">include/intrusive_graph.h:144</a></p><h4>Template Parameters</h4><dl><dt class="is-family-code"><b> Range</b></dt></dl><h4>Parameters</h4><dl><dt class="is-family-code">Range&amp;<b> rng</b></dt><dt class="is-family-code">const T*<b> node</b></dt></dl><hr class="member-fun-separator"></hr></main></div></div></div></section></div><footer class="footer"><p>Documentation for Celerity 0.6.0.</p><p>Generated by <a href="https://github.com/PeterTh/hdoc">&#129388;doc</a> version 1.5-internal on 2024-08-13T12:22:54 UTC.</p><p class="has-text-grey-light">19AD43E11B2996</p></footer></body></html>',c={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class intrusive_graph_node"},r=void 0,l={id:"api/records/F8F1F36C21FE7546",title:"class intrusive_graph_node",description:"",source:"@site/celerity-runtime/docs/api/records/F8F1F36C21FE7546.mdx",sourceDirName:"api/records",slug:"/api/records/F8F1F36C21FE7546",permalink:"/docs/api/records/F8F1F36C21FE7546",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class intrusive_graph_node"},sidebar:"api"},d={},o=[];function p(e){const{Head:a}={...(0,n.R)(),...e.components};return a||function(e,a){throw new Error("Expected "+(a?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(a,{children:[(0,i.jsx)("script",{src:"/js/highlight.min.js"}),(0,i.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,i.jsx)("div",{dangerouslySetInnerHTML:{__html:s}})]})}function h(e={}){const{wrapper:a}={...(0,n.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},28453:(e,a,t)=>{t.d(a,{R:()=>c,x:()=>r});var i=t(96540);const n={},s=i.createContext(n);function c(e){const a=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),i.createElement(s.Provider,{value:a},e.children)}}}]);