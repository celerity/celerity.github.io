"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[42745],{50688:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>n,metadata:()=>c,toc:()=>l});var i=a(74848),r=a(28453);const s='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#06885D8AE2CD6C63"><span>namespace detail</span></a></li><li class="is-active"><a aria-current="page976FD5990A15DC9E"><span>struct pilot_message</span></a></li></ul></nav>\n<main><h1>struct pilot_message</h1><h2>Declaration</h2><pre class="p-0"><code class="hdoc-record-code language-cpp">struct pilot_message { /* full declaration omitted */ };</code></pre><h2>Description</h2><p><p>Metadata exchanged in preparation for a peer-to-peer data transfer with send_instruction / receive_instruction (and cousins). Pilots allow the receiving side to issue MPI_*recv instructions directly to the appropriate target memory and (optionally) stride without additional staging or buffering.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/pilot.h#L11">include/pilot.h:11</a></p><h2>Member Variables</h2><dl><dt class="is-family-code" id="var_id" data-member-name="id">  <a href="/docs/api/records/9CC04BC93AB17E32/">detail::message_id</a> <b>id</b> = -1</dt><dt class="is-family-code" id="var_transfer_id" data-member-name="transfer_id">  <a href="/docs/api/records/3330F4171361EBD0/">detail::transfer_id</a> <b>transfer_id</b></dt><dt class="is-family-code" id="var_box" data-member-name="box">  <a href="/docs/api/records/A87962C2586A4E24/">detail::box</a>&lt;3&gt; <b>box</b></dt></dl></main>',n={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"struct pilot_message"},o=void 0,c={id:"api/records/976FD5990A15DC9E",title:"struct pilot_message",description:"",source:"@site/celerity-runtime/docs/api/records/976FD5990A15DC9E.mdx",sourceDirName:"api/records",slug:"/api/records/976FD5990A15DC9E",permalink:"/docs/api/records/976FD5990A15DC9E",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"struct pilot_message"},sidebar:"api"},d={},l=[];function p(e){const{Head:t}={...(0,r.R)(),...e.components};return t||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t,{children:[(0,i.jsx)("script",{src:"/js/highlight.min.js"}),(0,i.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,i.jsx)("div",{dangerouslySetInnerHTML:{__html:s}})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},28453:(e,t,a)=>{a.d(t,{R:()=>n,x:()=>o});var i=a(96540);const r={},s=i.createContext(r);function n(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:n(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);