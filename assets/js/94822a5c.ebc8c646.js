"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[38405],{46691:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>n,toc:()=>d});var t=r(74848),s=r(28453);const c='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#06885D8AE2CD6C63"><span>namespace detail</span></a></li><li class="is-active"><a aria-current="page0DE118E8B7E22055"><span>class double_buffered_queue</span></a></li></ul></nav>\n<main><h1>class double_buffered_queue</h1><h2>Declaration</h2><pre class="p-0"><code class="hdoc-record-code language-cpp">template &lt;typename T&gt;\nclass double_buffered_queue { /* full declaration omitted */ };</code></pre><h2>Description</h2><p><p>(Thread-safe) multi-producer single-consumer queue that uses double-buffering to avoid lock contention and keep dequeueing latency as low as possible.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/double_buffered_queue.h#L19">include/double_buffered_queue.h:19</a></p><h2>Template Parameters</h2><dl><dt class="is-family-code"><b> T</b></dt></dl><h2>Member Variables</h2><dl><dt class="is-family-code hdoc-private" id="var_m_write" data-member-name="m_write">  struct <a href="/docs/api/records/C3F1B4A896820CEE/">write_end</a> <b>m_write</b></dt><dt class="is-family-code hdoc-private" id="var_m_read" data-member-name="m_read">  struct <a href="/docs/api/records/78D9D22665AB53F6/">read_end</a> <b>m_read</b></dt></dl><h2>Member Function Overview</h2><ul><li class="is-family-code"><a href="#4BE7DECD9766034C"><b>pop_all</b></a>() &rarr; [[nodiscard]] std::vector&lt;T&gt; &amp;</li><li class="is-family-code"><a href="#9B56BAE985E60DD3"><b>push</b></a>(T v) &rarr; void</li><li class="is-family-code"><a href="#34D859BBCD03D77E"><b>wait_while_empty</b></a>() &rarr; void</li></ul><h2>Member Functions</h2><h3 id="4BE7DECD9766034C" data-function-name="pop_all"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#4BE7DECD9766034C">\xb6</a><code class="hdoc-function-code language-cpp">[[nodiscard]] <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;T&gt;&amp; pop_all()</code></pre></h3><h4>Description</h4><p><p>Returns all elements pushed to the queue since the last <code>pop_all</code>. The returned reference is valid until the next call to <code>pop_all</code>.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/double_buffered_queue.h#L35">include/double_buffered_queue.h:35</a></p><hr class="member-fun-separator"></hr><h3 id="9B56BAE985E60DD3" data-function-name="push"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#9B56BAE985E60DD3">\xb6</a><code class="hdoc-function-code language-cpp">void push(T v)</code></pre></h3><h4>Description</h4><p><p>Push a single element to the queue. Instead of frequently pushing multiple elements, consider using a vector \x3c!-- raw HTML omitted --\x3e as the element type.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/double_buffered_queue.h#L22">include/double_buffered_queue.h:22</a></p><h4>Parameters</h4><dl><dt class="is-family-code">T<b> v</b></dt></dl><hr class="member-fun-separator"></hr><h3 id="34D859BBCD03D77E" data-function-name="wait_while_empty"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#34D859BBCD03D77E">\xb6</a><code class="hdoc-function-code language-cpp">void wait_while_empty()</code></pre></h3><h4>Description</h4><p><p>After this function returns, the result of <code>pop_all</code> is non-empty as long as there is only a single reader thread.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/double_buffered_queue.h#L47">include/double_buffered_queue.h:47</a></p><hr class="member-fun-separator"></hr></main>',i={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class double_buffered_queue"},l=void 0,n={id:"api/records/0DE118E8B7E22055",title:"class double_buffered_queue",description:"",source:"@site/celerity-runtime/docs/api/records/0DE118E8B7E22055.mdx",sourceDirName:"api/records",slug:"/api/records/0DE118E8B7E22055",permalink:"/docs/api/records/0DE118E8B7E22055",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class double_buffered_queue"},sidebar:"api"},o={},d=[];function u(e){const{Head:a}={...(0,s.R)(),...e.components};return a||function(e,a){throw new Error("Expected "+(a?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(a,{children:[(0,t.jsx)("script",{src:"/js/highlight.min.js"}),(0,t.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,t.jsx)("div",{dangerouslySetInnerHTML:{__html:c}})]})}function p(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},28453:(e,a,r)=>{r.d(a,{R:()=>i,x:()=>l});var t=r(96540);const s={},c=t.createContext(s);function i(e){const a=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function l(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(c.Provider,{value:a},e.children)}}}]);