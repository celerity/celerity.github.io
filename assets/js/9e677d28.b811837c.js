"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[93611],{60452:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var n=a(74848),r=a(28453);const i='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#06885D8AE2CD6C63"><span>namespace detail</span></a></li><li><a href="/docs/api/namespaces/#F04B845B7443865D"><span>namespace instruction_graph_generator_detail</span></a></li><li class="is-active"><a aria-current="page35FDE58191AAA4FF"><span>struct batch</span></a></li></ul></nav>\n<main><h1>struct batch</h1><h2>Declaration</h2><pre class="p-0"><code class="hdoc-record-code language-cpp">struct batch { /* full declaration omitted */ };</code></pre><section><h2>Description</h2><p><p>We submit the set of instructions and pilots generated within a call to compile() en-bloc to relieve contention on the executor queue lock. To collect all instructions that are generated in the call stack without polluting internal state, we pass a <code>batch &amp; </code> output parameter to any function that transitively generates instructions or pilots.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/instruction_graph_generator.cc#L469">src/instruction_graph_generator.cc:469</a></p></aside><section><h2>Member Variables</h2><dl><dt class="is-family-code" id="var_generated_instructions" data-member-name="generated_instructions">  <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;const instruction*&gt; <b>generated_instructions</b></dt><dt class="is-family-code" id="var_generated_pilots" data-member-name="generated_pilots">  <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;outbound_pilot&gt; <b>generated_pilots</b></dt><dt class="is-family-code" id="var_base_priority" data-member-name="base_priority">  int <b>base_priority</b> = 0</dt><dd>The base priority of a batch adds to the priority per instruction type to transitively prioritize dependencies of important instructions.</dd></dl></section><section></section></main>',s={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"struct batch"},c=void 0,o={id:"api/records/35FDE58191AAA4FF",title:"struct batch",description:"",source:"@site/celerity-runtime/docs/api/records/35FDE58191AAA4FF.mdx",sourceDirName:"api/records",slug:"/api/records/35FDE58191AAA4FF",permalink:"/docs/api/records/35FDE58191AAA4FF",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"struct batch"},sidebar:"api"},l={},d=[];function p(e){const{Head:t}={...(0,r.R)(),...e.components};return t||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t,{children:[(0,n.jsx)("script",{src:"/js/highlight.min.js"}),(0,n.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,n.jsx)("div",{dangerouslySetInnerHTML:{__html:i}})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},28453:(e,t,a)=>{a.d(t,{R:()=>s,x:()=>c});var n=a(96540);const r={},i=n.createContext(r);function s(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);