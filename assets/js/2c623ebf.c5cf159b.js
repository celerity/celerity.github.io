"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[11438],{34974:(e,c,a)=>{a.r(c),a.d(c,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>n,metadata:()=>r,toc:()=>l});var s=a(74848),i=a(28453);const o='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#06885D8AE2CD6C63"><span>namespace detail</span></a></li><li class="is-active"><a aria-current="page6AA200E81C0E2212"><span>class sycl_backend</span></a></li></ul></nav>\n<main><h1>class sycl_backend</h1><h2>Declaration</h2><pre class="p-0"><code class="hdoc-record-code language-cpp">class sycl_backend : public backend { /* full declaration omitted */ };</code></pre><section><h2>Description</h2><p><p>Backend implementation which sources all allocations from SYCL and dispatches device kernels to SYCL in-order queues. This abstract class implements all <code>backend</code> functions except copies, which not subject to platform-dependent specialization.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/backend/sycl_backend.h#L40">include/backend/sycl_backend.h:40</a></p></aside><section><p>Inherits from: <a href="/docs/api/records/52288636C43413DD/">backend</a></p></section><section><h2>Member Variables</h2><dl><dt class="is-family-code hdoc-private" id="var_m_impl" data-member-name="m_impl">  <a href="https://en.cppreference.com/w/cpp/memory/unique_ptr">std::unique_ptr</a>&lt;impl&gt; <b>m_impl</b></dt></dl></section><section><h2>Member Function Overview</h2><ul><li class="is-family-code"><a href="#BA7AC279F85BC7EF"><b>check_async_errors</b></a>() &rarr; void</li><li class="is-family-code"><a href="#7C19575861E8FE10"><b>debug_alloc</b></a>(size_t size) &rarr; void *</li><li class="is-family-code"><a href="#3DD39FC76EF305CA"><b>debug_free</b></a>(void * ptr) &rarr; void</li><li class="is-family-code"><a href="#2DEFFB8CB83D1B15"><b>enqueue_device_alloc</b></a>(device_id device, size_t size, size_t alignment) &rarr; async_event</li><li class="is-family-code"><a href="#2362E0A37ED19293"><b>enqueue_device_free</b></a>(device_id device, void * ptr) &rarr; async_event</li><li class="is-family-code"><a href="#F82BE05FE011926F"><b>enqueue_device_kernel</b></a>(device_id device, size_t device_lane, const device_kernel_launcher &amp; launcher, std::vector&lt;closure_hydrator::accessor_info&gt; accessor_infos, const box&lt;3&gt; &amp; execution_range, const std::vector&lt;void *&gt; &amp; reduction_ptrs) &rarr; async_event</li><li class="is-family-code"><a href="#4EE88CC8CD57F368"><b>enqueue_host_alloc</b></a>(size_t size, size_t alignment) &rarr; async_event</li><li class="is-family-code"><a href="#CB90925654331A5D"><b>enqueue_host_copy</b></a>(size_t host_lane, const void * source_base, void * dest_base, const box&lt;3&gt; &amp; source_box, const box&lt;3&gt; &amp; dest_box, const region&lt;3&gt; &amp; copy_region, size_t elem_size) &rarr; async_event</li><li class="is-family-code"><a href="#EC2072218F1500ED"><b>enqueue_host_free</b></a>(void * ptr) &rarr; async_event</li><li class="is-family-code"><a href="#A8CFDFAB7E40061F"><b>enqueue_host_task</b></a>(size_t host_lane, const host_task_launcher &amp; launcher, std::vector&lt;closure_hydrator::accessor_info&gt; accessor_infos, const box&lt;3&gt; &amp; execution_range, const communicator * collective_comm) &rarr; async_event</li><li class="is-family-code"><a href="#AE04E71169E73D55"><b>get_system_info</b></a>() const &rarr; const system_info &amp;</li><li class="is-family-code"><a href="#76747C126864C9F6"><b>init</b></a>() &rarr; void</li><li class="is-family-code"><a href="#7FFA241E162E772B"><b>operator=</b></a>(const sycl_backend &amp;) &rarr; sycl_backend &amp;</li><li class="is-family-code"><a href="#C911414E87A16BF3"><b>operator=</b></a>(sycl_backend &amp;&amp;) &rarr; sycl_backend &amp;</li><li class="is-family-code"><a href="#E04CFDB10BE5DD3B"><b>sycl_backend</b></a>(const sycl_backend &amp;)</li><li class="is-family-code"><a href="#50C93AF7AEE92EFB"><b>sycl_backend</b></a>(sycl_backend &amp;&amp;)</li><li class="is-family-code"><a href="#625DD76DD5BA3721"><b>sycl_backend</b></a>(const std::vector&lt;sycl::device&gt; &amp; devices, bool enable_profiling) &rarr; explicit</li><li class="is-family-code"><a href="#D5D817424931AE71"><b>~sycl_backend</b></a>()</li><li class="is-family-code hdoc-protected"><a href="#5F8CED001DCD87B4"><b>get_device_queue</b></a>(device_id device, size_t lane) &rarr; sycl::queue &amp;</li><li class="is-family-code hdoc-protected"><a href="#A99C29A85DE29BD1"><b>get_system_info</b></a>() &rarr; system_info &amp;</li><li class="is-family-code hdoc-protected"><a href="#BC1975FD08D82FC2"><b>is_profiling_enabled</b></a>() const &rarr; bool</li></ul><p>Inherited from <a href="/docs/api/records/52288636C43413DD/">backend</a>:</p><ul><li class="is-family-code"><a href="/docs/api/records/52288636C43413DD/#7B5D61A4C233B23C">public <b>check_async_errors</b></a></li><li class="is-family-code"><a href="/docs/api/records/52288636C43413DD/#9F10776D1F091BD7">public <b>debug_alloc</b></a></li><li class="is-family-code"><a href="/docs/api/records/52288636C43413DD/#3B8B979563F43E0B">public <b>debug_free</b></a></li><li class="is-family-code"><a href="/docs/api/records/52288636C43413DD/#7BD72B983005E9FC">public <b>enqueue_device_alloc</b></a></li><li class="is-family-code"><a href="/docs/api/records/52288636C43413DD/#F1776E7E1F5EDD9C">public <b>enqueue_device_copy</b></a></li><li class="is-family-code"><a href="/docs/api/records/52288636C43413DD/#6CEA6D96E1227F1E">public <b>enqueue_device_free</b></a></li><li class="is-family-code"><a href="/docs/api/records/52288636C43413DD/#C932330DC6FE754B">public <b>enqueue_device_kernel</b></a></li><li class="is-family-code"><a href="/docs/api/records/52288636C43413DD/#3A452D8B0C7274F4">public <b>enqueue_host_alloc</b></a></li><li class="is-family-code"><a href="/docs/api/records/52288636C43413DD/#BD55A8545B3EA959">public <b>enqueue_host_copy</b></a></li><li class="is-family-code"><a href="/docs/api/records/52288636C43413DD/#19067DC859C8FFC4">public <b>enqueue_host_free</b></a></li><li class="is-family-code"><a href="/docs/api/records/52288636C43413DD/#72E6FBD0117C142B">public <b>enqueue_host_task</b></a></li><li class="is-family-code"><a href="/docs/api/records/52288636C43413DD/#6675BBE0A2F39379">public <b>get_system_info</b></a></li><li class="is-family-code"><a href="/docs/api/records/52288636C43413DD/#436DCB904D8F8947">public <b>init</b></a></li><li class="is-family-code"><a href="/docs/api/records/52288636C43413DD/#1B19948B8D471D20">public <b>operator=</b></a></li><li class="is-family-code"><a href="/docs/api/records/52288636C43413DD/#F57E6BC1D167DE27">public <b>operator=</b></a></li></ul></section><section><h2>Member Functions</h2><section><h3 id="BA7AC279F85BC7EF" data-function-name="check_async_errors"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#BA7AC279F85BC7EF">\xb6</a><code class="hdoc-function-code language-cpp">void check_async_errors()</code></pre></h3><section><h4>Description</h4><p><p>Check internal queues and panic if any asynchronous errors occurred.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/backend/sycl_backend.h#L74">include/backend/sycl_backend.h:74</a></p></aside></section><hr class="member-fun-separator"></hr><section><h3 id="7C19575861E8FE10" data-function-name="debug_alloc"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#7C19575861E8FE10">\xb6</a><code class="hdoc-function-code language-cpp">void* debug_alloc(size_t size)</code></pre></h3><section><h4>Description</h4><p><p>Synchronously allocates device-accessible host memory. This is slow and meant for debugging purposes only.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/backend/sycl_backend.h#L53">include/backend/sycl_backend.h:53</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">size_t<b> size</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="3DD39FC76EF305CA" data-function-name="debug_free"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#3DD39FC76EF305CA">\xb6</a><code class="hdoc-function-code language-cpp">void debug_free(void* ptr)</code></pre></h3><section><h4>Description</h4><p><p>Synchronously frees device-accessible host memory. This is slow and meant for debugging purposes only.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/backend/sycl_backend.h#L55">include/backend/sycl_backend.h:55</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">void*<b> ptr</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="2DEFFB8CB83D1B15" data-function-name="enqueue_device_alloc"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#2DEFFB8CB83D1B15">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/75C01CF859B866AB/">async_event</a> enqueue_device_alloc(<a href="/docs/api/records/7D949A34B7A05510/">device_id</a> device,\n                                 size_t size,\n                                 size_t alignment)</code></pre></h3><section><h4>Description</h4><p><p>Schedules the allocation of device memory with the specified size and alignment. The operation will complete in-order with respect to any other asynchronous <code>alloc</code> and <code>free</code> operation on the same backend.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/backend/sycl_backend.h#L59">include/backend/sycl_backend.h:59</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/7D949A34B7A05510/">device_id</a><b> device</b></dt><dt class="is-family-code">size_t<b> size</b></dt><dt class="is-family-code">size_t<b> alignment</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="2362E0A37ED19293" data-function-name="enqueue_device_free"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#2362E0A37ED19293">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/75C01CF859B866AB/">async_event</a> enqueue_device_free(<a href="/docs/api/records/7D949A34B7A05510/">device_id</a> device,\n                                void* ptr)</code></pre></h3><section><h4>Description</h4><p><p>Schedules the release of memory allocated via <code>enqueue_device_alloc</code>. The operation will complete in-order with respect to any other asynchronous <code>alloc</code> and <code>free</code> operation on the same backend.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/backend/sycl_backend.h#L63">include/backend/sycl_backend.h:63</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/7D949A34B7A05510/">device_id</a><b> device</b></dt><dt class="is-family-code">void*<b> ptr</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="F82BE05FE011926F" data-function-name="enqueue_device_kernel"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#F82BE05FE011926F">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/75C01CF859B866AB/">async_event</a> enqueue_device_kernel(\n    <a href="/docs/api/records/7D949A34B7A05510/">device_id</a> device,\n    size_t device_lane,\n    const device_kernel_launcher&amp; launcher,\n    <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;closure_hydrator::accessor_info&gt;\n        accessor_infos,\n    const <a href="/docs/api/records/A87962C2586A4E24/">box</a>&lt;3&gt;&amp; execution_range,\n    const <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;void*&gt;&amp; reduction_ptrs)</code></pre></h3><section><h4>Description</h4><p><p>Enqueues the asynchronous execution of a kernel in an in-order device queue identified by <code>device</code> and <code>device_lane</code>. The operation will complete in-order with respect to any other asynchronous device operation on <code>device</code> and <code>device_lane</code>.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/backend/sycl_backend.h#L68">include/backend/sycl_backend.h:68</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/7D949A34B7A05510/">device_id</a><b> device</b></dt><dt class="is-family-code">size_t<b> device_lane</b></dt><dt class="is-family-code">const device_kernel_launcher&amp;<b> launcher</b></dt><dt class="is-family-code"><a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;closure_hydrator::accessor_info&gt;<b> accessor_infos</b></dt><dt class="is-family-code">const <a href="/docs/api/records/A87962C2586A4E24/">box</a>&lt;3&gt;&amp;<b> execution_range</b></dt><dt class="is-family-code">const <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;void*&gt;&amp;<b> reduction_ptrs</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="4EE88CC8CD57F368" data-function-name="enqueue_host_alloc"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#4EE88CC8CD57F368">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/75C01CF859B866AB/">async_event</a> enqueue_host_alloc(size_t size,\n                               size_t alignment)</code></pre></h3><section><h4>Description</h4><p><p>Schedules the allocation of device-accessible host memory with the specified size and alignment. The operation will complete in-order with respect to any other asynchronous <code>alloc</code> and <code>free</code> operation on the same backend.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/backend/sycl_backend.h#L57">include/backend/sycl_backend.h:57</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">size_t<b> size</b></dt><dt class="is-family-code">size_t<b> alignment</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="CB90925654331A5D" data-function-name="enqueue_host_copy"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#CB90925654331A5D">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/75C01CF859B866AB/">async_event</a> enqueue_host_copy(\n    size_t host_lane,\n    const void* source_base,\n    void* dest_base,\n    const <a href="/docs/api/records/A87962C2586A4E24/">box</a>&lt;3&gt;&amp; source_<a href="/docs/api/records/A87962C2586A4E24/">box</a>,\n    const box&lt;3&gt;&amp; dest_box,\n    const <a href="/docs/api/records/A3975FE869EB8647/">region</a>&lt;3&gt;&amp; copy_region,\n    size_t elem_size)</code></pre></h3><section><h4>Description</h4><p><p>Enqueues an n-dimensional copy between two host allocations (both either device-accessible or user-allocated). The operation will complete in-order with respect to any other asynchronous host operation on <code>host_lane</code>.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/backend/sycl_backend.h#L71">include/backend/sycl_backend.h:71</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">size_t<b> host_lane</b></dt><dt class="is-family-code">const void*<b> source_base</b></dt><dt class="is-family-code">void*<b> dest_base</b></dt><dt class="is-family-code">const <a href="/docs/api/records/A87962C2586A4E24/">box</a>&lt;3&gt;&amp;<b> source_box</b></dt><dt class="is-family-code">const <a href="/docs/api/records/A87962C2586A4E24/">box</a>&lt;3&gt;&amp;<b> dest_box</b></dt><dt class="is-family-code">const <a href="/docs/api/records/A3975FE869EB8647/">region</a>&lt;3&gt;&amp;<b> copy_region</b></dt><dt class="is-family-code">size_t<b> elem_size</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="EC2072218F1500ED" data-function-name="enqueue_host_free"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#EC2072218F1500ED">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/75C01CF859B866AB/">async_event</a> enqueue_host_free(void* ptr)</code></pre></h3><section><h4>Description</h4><p><p>Schedules the release of memory allocated via <code>enqueue_host_alloc</code>. The operation will complete in-order with respect to any other asynchronous <code>alloc</code> and <code>free</code> operation on the same backend.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/backend/sycl_backend.h#L61">include/backend/sycl_backend.h:61</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">void*<b> ptr</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="A8CFDFAB7E40061F" data-function-name="enqueue_host_task"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#A8CFDFAB7E40061F">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/75C01CF859B866AB/">async_event</a> enqueue_host_task(\n    size_t host_lane,\n    const host_task_launcher&amp; launcher,\n    <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;closure_hydrator::accessor_info&gt;\n        accessor_infos,\n    const <a href="/docs/api/records/A87962C2586A4E24/">box</a>&lt;3&gt;&amp; execution_range,\n    const <a href="/docs/api/records/5445ADDDC225FF35/">communicator</a>* collective_comm)</code></pre></h3><section><h4>Description</h4><p><p>Enqueues the asynchronous execution of a host task in a background thread identified by <code>host_lane</code>. The operation will complete in-order with respect to any other asynchronous host operation on <code>host_lane</code>.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/backend/sycl_backend.h#L65">include/backend/sycl_backend.h:65</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">size_t<b> host_lane</b></dt><dt class="is-family-code">const host_task_launcher&amp;<b> launcher</b></dt><dt class="is-family-code"><a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;closure_hydrator::accessor_info&gt;<b> accessor_infos</b></dt><dt class="is-family-code">const <a href="/docs/api/records/A87962C2586A4E24/">box</a>&lt;3&gt;&amp;<b> execution_range</b></dt><dt class="is-family-code">const <a href="/docs/api/records/5445ADDDC225FF35/">communicator</a>*<b> collective_comm</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="AE04E71169E73D55" data-function-name="get_system_info"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#AE04E71169E73D55">\xb6</a><code class="hdoc-function-code language-cpp">const <a href="/docs/api/records/8B87A955194B6925/">system_info</a>&amp; get_system_info() const</code></pre></h3><section><h4>Description</h4><p><p>Returns metadata about the system as it appears to the backend implementation.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/backend/sycl_backend.h#L49">include/backend/sycl_backend.h:49</a></p></aside></section><hr class="member-fun-separator"></hr><section><h3 id="76747C126864C9F6" data-function-name="init"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#76747C126864C9F6">\xb6</a><code class="hdoc-function-code language-cpp">void init()</code></pre></h3><section><h4>Description</h4><p><p>Performs (possibly latency-intensive) backend initialization. Separate from the constructor to allow this function to be called from a different thread.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/backend/sycl_backend.h#L51">include/backend/sycl_backend.h:51</a></p></aside></section><hr class="member-fun-separator"></hr><section><h3 id="7FFA241E162E772B" data-function-name="operator="><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#7FFA241E162E772B">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/6AA200E81C0E2212/">sycl_backend</a>&amp; operator=(const <a href="/docs/api/records/6AA200E81C0E2212/">sycl_backend</a>&amp;)</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/backend/sycl_backend.h#L45">include/backend/sycl_backend.h:45</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/6AA200E81C0E2212/">sycl_backend</a>&amp;<b> </b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="C911414E87A16BF3" data-function-name="operator="><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#C911414E87A16BF3">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/6AA200E81C0E2212/">sycl_backend</a>&amp; operator=(<a href="/docs/api/records/6AA200E81C0E2212/">sycl_backend</a>&amp;&amp;)</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/backend/sycl_backend.h#L46">include/backend/sycl_backend.h:46</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/6AA200E81C0E2212/">sycl_backend</a>&amp;&amp;<b> </b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="E04CFDB10BE5DD3B" data-function-name="sycl_backend"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#E04CFDB10BE5DD3B">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/6AA200E81C0E2212/">sycl_backend</a>(const sycl_backend&amp;)</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/backend/sycl_backend.h#L43">include/backend/sycl_backend.h:43</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/6AA200E81C0E2212/">sycl_backend</a>&amp;<b> </b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="50C93AF7AEE92EFB" data-function-name="sycl_backend"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#50C93AF7AEE92EFB">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/6AA200E81C0E2212/">sycl_backend</a>(sycl_backend&amp;&amp;)</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/backend/sycl_backend.h#L44">include/backend/sycl_backend.h:44</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/6AA200E81C0E2212/">sycl_backend</a>&amp;&amp;<b> </b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="625DD76DD5BA3721" data-function-name="sycl_backend"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#625DD76DD5BA3721">\xb6</a><code class="hdoc-function-code language-cpp">explicit sycl_backend(\n    const <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;sycl::device&gt;&amp; devices,\n    bool enable_profiling)</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/backend/sycl_backend.h#L42">include/backend/sycl_backend.h:42</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;sycl::device&gt;&amp;<b> devices</b></dt><dt class="is-family-code">bool<b> enable_profiling</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="D5D817424931AE71" data-function-name="~sycl_backend"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#D5D817424931AE71">\xb6</a><code class="hdoc-function-code language-cpp">~sycl_backend()</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/backend/sycl_backend.h#L47">include/backend/sycl_backend.h:47</a></p></aside></section><hr class="member-fun-separator"></hr><section><h3 id="5F8CED001DCD87B4" data-function-name="get_device_queue"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#5F8CED001DCD87B4">\xb6</a><code class="hdoc-function-code language-cpp">sycl::queue&amp; get_device_queue(<a href="/docs/api/records/7D949A34B7A05510/">device_id</a> device,\n                              size_t lane)</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/backend/sycl_backend.h#L77">include/backend/sycl_backend.h:77</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/7D949A34B7A05510/">device_id</a><b> device</b></dt><dt class="is-family-code">size_t<b> lane</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="A99C29A85DE29BD1" data-function-name="get_system_info"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#A99C29A85DE29BD1">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/8B87A955194B6925/">system_info</a>&amp; get_system_info()</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/backend/sycl_backend.h#L79">include/backend/sycl_backend.h:79</a></p></aside></section><hr class="member-fun-separator"></hr><section><h3 id="BC1975FD08D82FC2" data-function-name="is_profiling_enabled"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#BC1975FD08D82FC2">\xb6</a><code class="hdoc-function-code language-cpp">bool is_profiling_enabled() const</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/backend/sycl_backend.h#L81">include/backend/sycl_backend.h:81</a></p></aside></section><hr class="member-fun-separator"></hr></section></main>',n={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class sycl_backend"},t=void 0,r={id:"api/records/6AA200E81C0E2212",title:"class sycl_backend",description:"",source:"@site/celerity-runtime/docs/api/records/6AA200E81C0E2212.mdx",sourceDirName:"api/records",slug:"/api/records/6AA200E81C0E2212",permalink:"/docs/api/records/6AA200E81C0E2212",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class sycl_backend"},sidebar:"api"},d={},l=[];function p(e){const{Head:c}={...(0,i.R)(),...e.components};return c||function(e,c){throw new Error("Expected "+(c?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(c,{children:[(0,s.jsx)("script",{src:"/js/highlight.min.js"}),(0,s.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,s.jsx)("div",{dangerouslySetInnerHTML:{__html:o}})]})}function h(e={}){const{wrapper:c}={...(0,i.R)(),...e.components};return c?(0,s.jsx)(c,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},28453:(e,c,a)=>{a.d(c,{R:()=>n,x:()=>t});var s=a(96540);const i={},o=s.createContext(i);function n(e){const c=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(c):{...c,...e}}),[c,e])}function t(e){let c;return c=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:n(e.components),s.createElement(o.Provider,{value:c},e.children)}}}]);