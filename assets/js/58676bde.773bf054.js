"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[52288],{39310:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>n,metadata:()=>o,toc:()=>d});var s=t(74848),i=t(28453);const c='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#06885D8AE2CD6C63"><span>namespace detail</span></a></li><li><a href="/docs/api/namespaces/#629206E626947F81"><span>namespace region_map_detail</span></a></li><li class="is-active"><a aria-current="page4C80901179969331"><span>class inner_node</span></a></li></ul></nav>\n<main><h1>class inner_node</h1><h2>Declaration</h2><pre class="p-0"><code class="hdoc-record-code language-cpp">template &lt;typename ValueType, int Dims&gt;\nclass inner_node { /* full declaration omitted */ };</code></pre><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L169">include/region_map.h:169</a></p></aside><section><h2>Template Parameters</h2><dl><dt class="is-family-code"><b> ValueType</b></dt><dt class="is-family-code">int<b> Dims</b></dt></dl></section><section><h2>Member Variables</h2><dl><dt class="is-family-code hdoc-private" id="var_m_depth" data-member-name="m_depth">  size_t <b>m_depth</b></dt><dt class="is-family-code hdoc-private" id="var_m_contains_leaves" data-member-name="m_contains_leaves">  bool <b>m_contains_leaves</b></dt><dt class="is-family-code hdoc-private" id="var_m_child_boxes" data-member-name="m_child_boxes">  <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;box&lt;Dims&gt;&gt; <b>m_child_boxes</b></dt><dt class="is-family-code hdoc-private" id="var_m_children" data-member-name="m_children">  <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;typename types::inner_node_child_type&gt; <b>m_children</b></dt></dl></section><section><h2>Member Aliases</h2><ul><li class="is-family-code hdoc-private">using types = region_map_types&lt;ValueType, Dims&gt;;</li></ul></section><section><h2>Member Function Overview</h2><ul><li class="is-family-code"><span class="hdoc-overview-template">template &lt;typename Functor&gt;</span><br><a href="#1A9518056974011C"><b>apply_to_values</b></a>(const Functor &amp; f, std::vector&lt;typename types::entry&gt; &amp; updated_nodes) &rarr; void</li><li class="is-family-code"><a href="#F82E1ADEC9D68BFF"><b>contains_leaves</b></a>() const &rarr; bool</li><li class="is-family-code"><a href="#79ED5F9BCE43A838"><b>eject_only_child</b></a>() &rarr; typename types::unique_inner_node_ptr</li><li class="is-family-code"><a href="#90F36633CA262DAC"><b>erase</b></a>(const box&lt;Dims&gt; &amp; box, std::vector&lt;typename types::orphan&gt; &amp; orphans) &rarr; bool</li><li class="is-family-code"><span class="hdoc-overview-template">template &lt;typename Callback&gt;</span><br><a href="#A7857D9ED2B52FE8"><b>for_each</b></a>(const Callback &amp; cb) const &rarr; void</li><li class="is-family-code"><a href="#B9C1B84926A105C7"><b>format_to</b></a>(fmt::format_context::iterator out, size_t level) const &rarr; auto</li><li class="is-family-code"><a href="#174ED4BAC67BAAA1"><b>get_bounding_box</b></a>() const &rarr; box&lt;Dims&gt;</li><li class="is-family-code"><a href="#F98071C195470EB3"><b>get_depth</b></a>() const &rarr; size_t</li><li class="is-family-code"><a href="#978FEE07B7D1DBE4"><b>inner_node</b></a>(inner_node&lt;ValueType, Dims&gt; &amp;&amp;) noexcept</li><li class="is-family-code"><a href="#27885FAA4DFCFE62"><b>inner_node</b></a>(const inner_node&lt;ValueType, Dims&gt; &amp;)</li><li class="is-family-code"><a href="#A6794E4E10CDFEB6"><b>inner_node</b></a>(bool contains_leaves, size_t depth)</li><li class="is-family-code"><a href="#1A6F5AA7B94DF00D"><b>insert</b></a>(const box&lt;Dims&gt; &amp; box, const ValueType &amp; value) &rarr; std::optional&lt;typename types::insert_result&gt;</li><li class="is-family-code"><a href="#A68B2067071F2692"><b>insert_child_node</b></a>(const box&lt;Dims&gt; &amp; box, std::unique_ptr&lt;inner_node&lt;ValueType, Dims&gt;&gt; &amp;&amp; node) &rarr; void</li><li class="is-family-code"><a href="#EC4BFD9325D94AD4"><b>insert_subtree</b></a>(const box&lt;Dims&gt; &amp; box, std::unique_ptr&lt;inner_node&lt;ValueType, Dims&gt;&gt; &amp;&amp; subtree) &rarr; std::optional&lt;typename types::insert_result&gt;</li><li class="is-family-code"><a href="#56175E2B71AA52D4"><b>num_children</b></a>() const &rarr; size_t</li><li class="is-family-code"><a href="#4DC32928997E1722"><b>operator=</b></a>(inner_node&lt;ValueType, Dims&gt; &amp;&amp;) noexcept &rarr; inner_node&lt;ValueType, Dims&gt; &amp;</li><li class="is-family-code"><a href="#096A8D502BA1B372"><b>operator=</b></a>(const inner_node&lt;ValueType, Dims&gt; &amp;) &rarr; inner_node&lt;ValueType, Dims&gt; &amp;</li><li class="is-family-code"><a href="#F538D3D4C400F6BE"><b>point_query</b></a>(const id&lt;Dims&gt; &amp; point) const &rarr; std::optional&lt;typename types::entry&gt;</li><li class="is-family-code"><a href="#BED5BAA08FE91EC5"><b>query</b></a>(const box&lt;Dims&gt; &amp; box, std::vector&lt;typename types::entry&gt; &amp; intersecting) const &rarr; void</li><li class="is-family-code"><a href="#663FBABC450FD8E7"><b>set_depth</b></a>(size_t depth) &rarr; void</li><li class="is-family-code"><a href="#7033C514998EB4CF"><b>update_box</b></a>(const box&lt;Dims&gt; &amp; box, const ValueType &amp; value, std::vector&lt;typename types::update_action&gt; &amp; actions) &rarr; bool</li><li class="is-family-code"><a href="#77CA5945D7E593C1"><b>~inner_node</b></a>()</li><li class="is-family-code hdoc-private"><a href="#DA967016F58456E2"><b>erase_child</b></a>(size_t index) &rarr; void</li><li class="is-family-code hdoc-private"><a href="#6F7F5B117C4E147D"><b>get_child_node</b></a>(size_t index) &rarr; inner_node&lt;ValueType, Dims&gt; &amp;</li><li class="is-family-code hdoc-private"><a href="#7B78D2E8FFA962A4"><b>get_child_node</b></a>(size_t index) const &rarr; const inner_node&lt;ValueType, Dims&gt; &amp;</li><li class="is-family-code hdoc-private"><a href="#4ED1DF51677F4D56"><b>get_child_value</b></a>(size_t index) &rarr; ValueType &amp;</li><li class="is-family-code hdoc-private"><a href="#68669F5D2B97D82A"><b>get_child_value</b></a>(size_t index) const &rarr; const ValueType &amp;</li><li class="is-family-code hdoc-private"><a href="#A84F2DD240A21C8E"><b>insert_child_value</b></a>(const box&lt;Dims&gt; &amp; box, const ValueType &amp; value) &rarr; void</li><li class="is-family-code hdoc-private"><a href="#A6056560592517C7"><b>is_underfull</b></a>() const &rarr; bool</li><li class="is-family-code hdoc-private"><a href="#BF0E86A4F5222C63"><b>pick_split_seeds</b></a>() &rarr; std::pair&lt;size_t, size_t&gt;</li><li class="is-family-code hdoc-private"><a href="#9057A7449CD5EBC1"><b>sanity_check_bounding_boxes</b></a>() const &rarr; box&lt;Dims&gt;</li></ul></section><section><h2>Member Functions</h2><section><h3 id="1A9518056974011C" data-function-name="apply_to_values"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#1A9518056974011C">\xb6</a><code class="hdoc-function-code language-cpp">template &lt;typename Functor&gt;\nvoid apply_to_values(\n    const Functor&amp; f,\n    <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;typename types::entry&gt;&amp;\n        updated_nodes)</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L338">include/region_map.h:338</a></p></aside><section><h4>Template Parameters</h4><dl><dt class="is-family-code"><b> Functor</b></dt></dl></section><section><h4>Parameters</h4><dl><dt class="is-family-code">const Functor&amp;<b> f</b></dt><dt class="is-family-code"><a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;typename types::entry&gt;&amp;<b> updated_nodes</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="F82E1ADEC9D68BFF" data-function-name="contains_leaves"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#F82E1ADEC9D68BFF">\xb6</a><code class="hdoc-function-code language-cpp">bool contains_leaves() const</code></pre></h3><section><h4>Description</h4><p><p>Whether this node contains leaves, i.e. ValueType entries, or more inner_nodes.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L190">include/region_map.h:190</a></p></aside></section><hr class="member-fun-separator"></hr><section><h3 id="79ED5F9BCE43A838" data-function-name="eject_only_child"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#79ED5F9BCE43A838">\xb6</a><code class="hdoc-function-code language-cpp">typename types::unique_inner_node_ptr\neject_only_child()</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L681">include/region_map.h:681</a></p></aside></section><hr class="member-fun-separator"></hr><section><h3 id="90F36633CA262DAC" data-function-name="erase"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#90F36633CA262DAC">\xb6</a><code class="hdoc-function-code language-cpp">bool erase(\n    const box&lt;Dims&gt;&amp; box,\n    <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;typename types::orphan&gt;&amp; orphans)</code></pre></h3><section><h4>Description</h4><p><p>Erases a box if it is contained in the subtree.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L610">include/region_map.h:610</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">const box&lt;Dims&gt;&amp;<b> box</b></dt><dt class="is-family-code"><a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;typename types::orphan&gt;&amp;<b> orphans</b></dt><dd>A list of entries or subtrees that were orphaned due to dissolving a node.</dd></dl></section><h4>Returns</h4><p>True if the box was erased in this subtree.</p></section><hr class="member-fun-separator"></hr><section><h3 id="A7857D9ED2B52FE8" data-function-name="for_each"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#A7857D9ED2B52FE8">\xb6</a><code class="hdoc-function-code language-cpp">template &lt;typename Callback&gt;\nvoid for_each(const Callback&amp; cb) const</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L707">include/region_map.h:707</a></p></aside><section><h4>Template Parameters</h4><dl><dt class="is-family-code"><b> Callback</b></dt></dl></section><section><h4>Parameters</h4><dl><dt class="is-family-code">const Callback&amp;<b> cb</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="B9C1B84926A105C7" data-function-name="format_to"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#B9C1B84926A105C7">\xb6</a><code class="hdoc-function-code language-cpp">auto format_to(fmt::format_context::iterator out,\n               size_t level) const</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L717">include/region_map.h:717</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">fmt::format_context::iterator<b> out</b></dt><dt class="is-family-code">size_t<b> level</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="174ED4BAC67BAAA1" data-function-name="get_bounding_box"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#174ED4BAC67BAAA1">\xb6</a><code class="hdoc-function-code language-cpp">box&lt;Dims&gt; get_bounding_box() const</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L691">include/region_map.h:691</a></p></aside></section><hr class="member-fun-separator"></hr><section><h3 id="F98071C195470EB3" data-function-name="get_depth"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#F98071C195470EB3">\xb6</a><code class="hdoc-function-code language-cpp">size_t get_depth() const</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L194">include/region_map.h:194</a></p></aside></section><hr class="member-fun-separator"></hr><section><h3 id="978FEE07B7D1DBE4" data-function-name="inner_node"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#978FEE07B7D1DBE4">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/4C80901179969331/">inner_node</a>(inner_node&lt;ValueType, Dims&gt;&amp;&amp;) noexcept</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L183">include/region_map.h:183</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/4C80901179969331/">inner_node</a>&lt;ValueType, Dims&gt;&amp;&amp;<b> </b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="27885FAA4DFCFE62" data-function-name="inner_node"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#27885FAA4DFCFE62">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/4C80901179969331/">inner_node</a>(const inner_node&lt;ValueType, Dims&gt;&amp;)</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L182">include/region_map.h:182</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/4C80901179969331/">inner_node</a>&lt;ValueType, Dims&gt;&amp;<b> </b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="A6794E4E10CDFEB6" data-function-name="inner_node"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#A6794E4E10CDFEB6">\xb6</a><code class="hdoc-function-code language-cpp">inner_node(bool contains_leaves, size_t depth)</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L175">include/region_map.h:175</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">bool<b> contains_leaves</b></dt><dt class="is-family-code">size_t<b> depth</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="1A6F5AA7B94DF00D" data-function-name="insert"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#1A6F5AA7B94DF00D">\xb6</a><code class="hdoc-function-code language-cpp"><a href="https://en.cppreference.com/w/cpp/utility/optional">std::optional</a>&lt;typename types::insert_result&gt;\ninsert(const box&lt;Dims&gt;&amp; box,\n       const ValueType&amp; value)</code></pre></h3><section><h4>Description</h4><p><p>Inserts a the provided entry into the tree. It is assumed that the box fits into a currently existing hole and does not overlap with any other box in the subtree. TODO: Structurally very similar to insert_subtree - can we DRY up?</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L365">include/region_map.h:365</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">const box&lt;Dims&gt;&amp;<b> box</b></dt><dt class="is-family-code">const ValueType&amp;<b> value</b></dt></dl></section><h4>Returns</h4><p>If the insertion caused a node to be split, the spilled node is returned.</p></section><hr class="member-fun-separator"></hr><section><h3 id="A68B2067071F2692" data-function-name="insert_child_node"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#A68B2067071F2692">\xb6</a><code class="hdoc-function-code language-cpp">void insert_child_node(\n    const box&lt;Dims&gt;&amp; box,\n    <a href="https://en.cppreference.com/w/cpp/memory/unique_ptr">std::unique_ptr</a>&lt;inner_node&lt;ValueType, Dims&gt;&gt;&amp;&amp;\n        node)</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L700">include/region_map.h:700</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">const box&lt;Dims&gt;&amp;<b> box</b></dt><dt class="is-family-code"><a href="https://en.cppreference.com/w/cpp/memory/unique_ptr">std::unique_ptr</a>&lt;inner_node&lt;ValueType, Dims&gt;&gt;&amp;&amp;<b> node</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="EC4BFD9325D94AD4" data-function-name="insert_subtree"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#EC4BFD9325D94AD4">\xb6</a><code class="hdoc-function-code language-cpp"><a href="https://en.cppreference.com/w/cpp/utility/optional">std::optional</a>&lt;typename types::insert_result&gt;\ninsert_subtree(\n    const box&lt;Dims&gt;&amp; box,\n    <a href="https://en.cppreference.com/w/cpp/memory/unique_ptr">std::unique_ptr</a>&lt;inner_node&lt;ValueType, Dims&gt;&gt;&amp;&amp;\n        subtree)</code></pre></h3><section><h4>Description</h4><p><p>Inserts the given subtree as a child into this subtree, either directly or further down (depending on its depth). TODO: Structurally very similar to insert - can we DRY up?</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L517">include/region_map.h:517</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">const box&lt;Dims&gt;&amp;<b> box</b></dt><dt class="is-family-code"><a href="https://en.cppreference.com/w/cpp/memory/unique_ptr">std::unique_ptr</a>&lt;inner_node&lt;ValueType, Dims&gt;&gt;&amp;&amp;<b> subtree</b></dt></dl></section><h4>Returns</h4><p>If the insertion caused a node to be split, the spilled node is returned.</p></section><hr class="member-fun-separator"></hr><section><h3 id="56175E2B71AA52D4" data-function-name="num_children"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#56175E2B71AA52D4">\xb6</a><code class="hdoc-function-code language-cpp">size_t num_children() const</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L192">include/region_map.h:192</a></p></aside></section><hr class="member-fun-separator"></hr><section><h3 id="4DC32928997E1722" data-function-name="operator="><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#4DC32928997E1722">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/4C80901179969331/">inner_node</a>&lt;ValueType, Dims&gt;&amp; operator=(\n    <a href="/docs/api/records/4C80901179969331/">inner_node</a>&lt;ValueType, Dims&gt;&amp;&amp;) noexcept</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L185">include/region_map.h:185</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/4C80901179969331/">inner_node</a>&lt;ValueType, Dims&gt;&amp;&amp;<b> </b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="096A8D502BA1B372" data-function-name="operator="><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#096A8D502BA1B372">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/4C80901179969331/">inner_node</a>&lt;ValueType, Dims&gt;&amp; operator=(\n    const <a href="/docs/api/records/4C80901179969331/">inner_node</a>&lt;ValueType, Dims&gt;&amp;)</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L184">include/region_map.h:184</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/4C80901179969331/">inner_node</a>&lt;ValueType, Dims&gt;&amp;<b> </b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="F538D3D4C400F6BE" data-function-name="point_query"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#F538D3D4C400F6BE">\xb6</a><code class="hdoc-function-code language-cpp"><a href="https://en.cppreference.com/w/cpp/utility/optional">std::optional</a>&lt;typename types::entry&gt; point_query(\n    const id&lt;Dims&gt;&amp; point) const</code></pre></h3><section><h4>Description</h4><p><p>Returns the entry containing a given point, if such an entry exists.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L667">include/region_map.h:667</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">const id&lt;Dims&gt;&amp;<b> point</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="BED5BAA08FE91EC5" data-function-name="query"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#BED5BAA08FE91EC5">\xb6</a><code class="hdoc-function-code language-cpp">void query(const box&lt;Dims&gt;&amp; box,\n           <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;typename types::entry&gt;&amp;\n               intersecting) const</code></pre></h3><section><h4>Description</h4><p><p>Recursively finds all entries that intersect with box.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L652">include/region_map.h:652</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">const box&lt;Dims&gt;&amp;<b> box</b></dt><dt class="is-family-code"><a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;typename types::entry&gt;&amp;<b> intersecting</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="663FBABC450FD8E7" data-function-name="set_depth"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#663FBABC450FD8E7">\xb6</a><code class="hdoc-function-code language-cpp">void set_depth(size_t depth)</code></pre></h3><section><h4>Description</h4><p><p>Recursively sets depth on this node and all of its children.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L199">include/region_map.h:199</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">size_t<b> depth</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="7033C514998EB4CF" data-function-name="update_box"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#7033C514998EB4CF">\xb6</a><code class="hdoc-function-code language-cpp">bool update_box(\n    const box&lt;Dims&gt;&amp; box,\n    const ValueType&amp; value,\n    <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;typename types::update_action&gt;&amp;\n        actions)</code></pre></h3><section><h4>Description</h4><p><p>Either updates the value of the given box directly, or prepares the subtree for insertion of said entry by creating a hole of the appropriate size. Inserting a new value usually means splitting up existing boxes within the tree (for example placing a smaller rectangle inside a larger one results in 5 total rectangles). This function calculates the set of actions required to perform such a split, which are then dispatched from the root. There are two special cases that can be handled more efficiently: - If the number of new boxes created due to a split is determined to fit inside this subtree without overflowing it, a localized update is performed, and no actions need to be dispatched from the root. - If the box to be updated matches an existing box inside this subtree exactly, an in-place update is performed and no further actions are required.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L225">include/region_map.h:225</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">const box&lt;Dims&gt;&amp;<b> box</b></dt><dt class="is-family-code">const ValueType&amp;<b> value</b></dt><dt class="is-family-code"><a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;typename types::update_action&gt;&amp;<b> actions</b></dt><dd>The list of erase and insert actions required to create a hole for the new entry.</dd></dl></section><h4>Returns</h4><p>True if a localized update operation was performed that may require a bounding box recomputation.</p></section><hr class="member-fun-separator"></hr><section><h3 id="77CA5945D7E593C1" data-function-name="~inner_node"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#77CA5945D7E593C1">\xb6</a><code class="hdoc-function-code language-cpp">~inner_node()</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L180">include/region_map.h:180</a></p></aside></section><hr class="member-fun-separator"></hr><section><h3 id="DA967016F58456E2" data-function-name="erase_child"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#DA967016F58456E2">\xb6</a><code class="hdoc-function-code language-cpp">void erase_child(size_t index)</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L770">include/region_map.h:770</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">size_t<b> index</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="6F7F5B117C4E147D" data-function-name="get_child_node"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#6F7F5B117C4E147D">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/4C80901179969331/">inner_node</a>&lt;ValueType, Dims&gt;&amp; get_child_node(\n    size_t index)</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L752">include/region_map.h:752</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">size_t<b> index</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="7B78D2E8FFA962A4" data-function-name="get_child_node"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#7B78D2E8FFA962A4">\xb6</a><code class="hdoc-function-code language-cpp">const <a href="/docs/api/records/4C80901179969331/">inner_node</a>&lt;ValueType, Dims&gt;&amp; get_child_node(\n    size_t index) const</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L753">include/region_map.h:753</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">size_t<b> index</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="4ED1DF51677F4D56" data-function-name="get_child_value"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#4ED1DF51677F4D56">\xb6</a><code class="hdoc-function-code language-cpp">ValueType&amp; get_child_value(size_t index)</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L755">include/region_map.h:755</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">size_t<b> index</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="68669F5D2B97D82A" data-function-name="get_child_value"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#68669F5D2B97D82A">\xb6</a><code class="hdoc-function-code language-cpp">const ValueType&amp; get_child_value(\n    size_t index) const</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L756">include/region_map.h:756</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">size_t<b> index</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="A84F2DD240A21C8E" data-function-name="insert_child_value"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#A84F2DD240A21C8E">\xb6</a><code class="hdoc-function-code language-cpp">void insert_child_value(const box&lt;Dims&gt;&amp; box,\n                        const ValueType&amp; value)</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L758">include/region_map.h:758</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">const box&lt;Dims&gt;&amp;<b> box</b></dt><dt class="is-family-code">const ValueType&amp;<b> value</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="A6056560592517C7" data-function-name="is_underfull"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#A6056560592517C7">\xb6</a><code class="hdoc-function-code language-cpp">bool is_underfull() const</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L795">include/region_map.h:795</a></p></aside></section><hr class="member-fun-separator"></hr><section><h3 id="BF0E86A4F5222C63" data-function-name="pick_split_seeds"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#BF0E86A4F5222C63">\xb6</a><code class="hdoc-function-code language-cpp"><a href="https://en.cppreference.com/w/cpp/utility/pair">std::pair</a>&lt;size_t, size_t&gt; pick_split_seeds()</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L776">include/region_map.h:776</a></p></aside></section><hr class="member-fun-separator"></hr><section><h3 id="9057A7449CD5EBC1" data-function-name="sanity_check_bounding_boxes"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#9057A7449CD5EBC1">\xb6</a><code class="hdoc-function-code language-cpp">box&lt;Dims&gt; sanity_check_bounding_boxes() const</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/region_map.h#L797">include/region_map.h:797</a></p></aside></section><hr class="member-fun-separator"></hr></section></main>',n={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class inner_node"},r=void 0,o={id:"api/records/4C80901179969331",title:"class inner_node",description:"",source:"@site/celerity-runtime/docs/api/records/4C80901179969331.mdx",sourceDirName:"api/records",slug:"/api/records/4C80901179969331",permalink:"/docs/api/records/4C80901179969331",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class inner_node"},sidebar:"api"},l={},d=[];function p(e){const{Head:a}={...(0,i.R)(),...e.components};return a||function(e,a){throw new Error("Expected "+(a?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(a,{children:[(0,s.jsx)("script",{src:"/js/highlight.min.js"}),(0,s.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,s.jsx)("div",{dangerouslySetInnerHTML:{__html:c}})]})}function h(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},28453:(e,a,t)=>{t.d(a,{R:()=>n,x:()=>r});var s=t(96540);const i={},c=s.createContext(i);function n(e){const a=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:n(e.components),s.createElement(c.Provider,{value:a},e.children)}}}]);