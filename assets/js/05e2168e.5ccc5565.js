"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[18811],{36264:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var r=a(74848),n=a(28453);const s='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#06885D8AE2CD6C63"><span>namespace detail</span></a></li><li><a href="/docs/api/namespaces/#F04B845B7443865D"><span>namespace instruction_graph_generator_detail</span></a></li><li class="is-active"><a aria-current="pageEC659C7DAB928C1D"><span>struct memory_state</span></a></li></ul></nav>\n<main><h1>struct memory_state</h1><h2>Declaration</h2><pre class="p-0"><code class="hdoc-record-code language-cpp">struct memory_state { /* full declaration omitted */ };</code></pre><h2>Description</h2><p><p><code>allocation_id</code>s are &quot;namespaced&quot; to their memory ID, so we maintain the next <code>raw_allocation_id</code> for each memory separately.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/instruction_graph_generator.cc#L215">src/instruction_graph_generator.cc:215</a></p><h2>Member Variables</h2><dl><dt class="is-family-code" id="var_next_raw_aid" data-member-name="next_raw_aid">  <a href="/docs/api/records/36072153F47DBF20/">raw_allocation_id</a> <b>next_raw_aid</b> = 1</dt></dl></main>',i={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"struct memory_state"},o=void 0,c={id:"api/records/EC659C7DAB928C1D",title:"struct memory_state",description:"",source:"@site/celerity-runtime/docs/api/records/EC659C7DAB928C1D.mdx",sourceDirName:"api/records",slug:"/api/records/EC659C7DAB928C1D",permalink:"/docs/api/records/EC659C7DAB928C1D",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"struct memory_state"},sidebar:"api"},l={},d=[];function p(e){const{Head:t}={...(0,n.R)(),...e.components};return t||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t,{children:[(0,r.jsx)("script",{src:"/js/highlight.min.js"}),(0,r.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,r.jsx)("div",{dangerouslySetInnerHTML:{__html:s}})]})}function m(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},28453:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>o});var r=a(96540);const n={},s=r.createContext(n);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);