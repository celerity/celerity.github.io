"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[61092],{97246:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>o});var t=r(74848),c=r(28453);const s='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#06885D8AE2CD6C63"><span>namespace detail</span></a></li><li class="is-active"><a aria-current="page62C07277EB594DA2"><span>class thread_queue</span></a></li></ul></nav>\n<main><h1>class thread_queue</h1><h2>Declaration</h2><pre class="p-0"><code class="hdoc-record-code language-cpp">class thread_queue { /* full declaration omitted */ };</code></pre><h2>Description</h2><p><p>A single-thread job queue accepting functors and returning events that conditionally forward job results.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/thread_queue.h#L18">include/thread_queue.h:18</a></p><h2>Member Variables</h2><dl><dt class="is-family-code hdoc-private" id="var_m_impl" data-member-name="m_impl">  <a href="https://en.cppreference.com/w/cpp/memory/unique_ptr">std::unique_ptr</a>&lt;impl&gt; <b>m_impl</b></dt></dl><h2>Member Function Overview</h2><ul><li class="is-family-code"><a href="#35EC7D2A8405680E"><b>operator=</b></a>(const thread_queue &amp;) &rarr; thread_queue &amp;</li><li class="is-family-code"><a href="#3AD016F557359890"><b>operator=</b></a>(thread_queue &amp;&amp;) &rarr; thread_queue &amp;</li><li class="is-family-code"><span class="hdoc-overview-template">template &lt;typename Fn&gt;</span><br><a href="#EE226F96D41DFEB6"><b>submit</b></a>(Fn &amp;&amp; fn) &rarr; async_event</li><li class="is-family-code"><a href="#1C97C2DBDF736B50"><b>thread_queue</b></a>()</li><li class="is-family-code"><a href="#296F093BEBBB8F4C"><b>thread_queue</b></a>(std::string thread_name, bool enable_profiling = false) &rarr; explicit</li><li class="is-family-code"><a href="#346665CC0EEB4508"><b>thread_queue</b></a>(const thread_queue &amp;)</li><li class="is-family-code"><a href="#A3D0CF98D47BEAC4"><b>thread_queue</b></a>(thread_queue &amp;&amp;)</li><li class="is-family-code"><a href="#79ADAC1DF04DC579"><b>~thread_queue</b></a>()</li></ul><h2>Member Functions</h2><h3 id="35EC7D2A8405680E" data-function-name="operator="><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#35EC7D2A8405680E">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/62C07277EB594DA2/">thread_queue</a>&amp; operator=(const <a href="/docs/api/records/62C07277EB594DA2/">thread_queue</a>&amp;)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/thread_queue.h#L30">include/thread_queue.h:30</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/62C07277EB594DA2/">thread_queue</a>&amp;<b> </b></dt></dl><hr class="member-fun-separator"></hr><h3 id="3AD016F557359890" data-function-name="operator="><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#3AD016F557359890">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/62C07277EB594DA2/">thread_queue</a>&amp; operator=(<a href="/docs/api/records/62C07277EB594DA2/">thread_queue</a>&amp;&amp;)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/thread_queue.h#L31">include/thread_queue.h:31</a></p><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/62C07277EB594DA2/">thread_queue</a>&amp;&amp;<b> </b></dt></dl><hr class="member-fun-separator"></hr><h3 id="EE226F96D41DFEB6" data-function-name="submit"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#EE226F96D41DFEB6">\xb6</a><code class="hdoc-function-code language-cpp">template &lt;typename Fn&gt;\n<a href="/docs/api/records/75C01CF859B866AB/">async_event</a> submit(Fn&amp;&amp; fn)</code></pre></h3><h4>Description</h4><p><p>Submit a job to the thread queue. <code>fn</code> must take no arguments and return either <code>void</code> or a type convertible to <code>void *</code>, which will be forwarded as the result into the event.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/thread_queue.h#L44">include/thread_queue.h:44</a></p><h4>Template Parameters</h4><dl><dt class="is-family-code"><b> Fn</b></dt></dl><h4>Parameters</h4><dl><dt class="is-family-code">Fn&amp;&amp;<b> fn</b></dt></dl><hr class="member-fun-separator"></hr><h3 id="1C97C2DBDF736B50" data-function-name="thread_queue"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#1C97C2DBDF736B50">\xb6</a><code class="hdoc-function-code language-cpp">thread_queue()</code></pre></h3><h4>Description</h4><p><p>Constructs a null thread queue that cannot receive jobs.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/thread_queue.h#L21">include/thread_queue.h:21</a></p><hr class="member-fun-separator"></hr><h3 id="296F093BEBBB8F4C" data-function-name="thread_queue"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#296F093BEBBB8F4C">\xb6</a><code class="hdoc-function-code language-cpp">explicit thread_queue(\n    <a href="https://en.cppreference.com/w/cpp/string/basic_string">std::string</a> thread_name,\n    bool enable_profiling = false)</code></pre></h3><h4>Description</h4><p><p>Spawns a new thread queue with the given thread name. If <code>enable_profiling</code> is set to <code>true</code>, completed events from this thread queue will report a non-nullopt duration.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/thread_queue.h#L25">include/thread_queue.h:25</a></p><h4>Parameters</h4><dl><dt class="is-family-code"><a href="https://en.cppreference.com/w/cpp/string/basic_string">std::string</a><b> thread_name</b></dt><dt class="is-family-code">bool<b> enable_profiling</b> = false</dt></dl><hr class="member-fun-separator"></hr><h3 id="346665CC0EEB4508" data-function-name="thread_queue"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#346665CC0EEB4508">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/62C07277EB594DA2/">thread_queue</a>(const thread_queue&amp;)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/thread_queue.h#L28">include/thread_queue.h:28</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/62C07277EB594DA2/">thread_queue</a>&amp;<b> </b></dt></dl><hr class="member-fun-separator"></hr><h3 id="A3D0CF98D47BEAC4" data-function-name="thread_queue"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#A3D0CF98D47BEAC4">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/62C07277EB594DA2/">thread_queue</a>(thread_queue&amp;&amp;)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/thread_queue.h#L29">include/thread_queue.h:29</a></p><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/62C07277EB594DA2/">thread_queue</a>&amp;&amp;<b> </b></dt></dl><hr class="member-fun-separator"></hr><h3 id="79ADAC1DF04DC579" data-function-name="~thread_queue"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#79ADAC1DF04DC579">\xb6</a><code class="hdoc-function-code language-cpp">~thread_queue()</code></pre></h3><h4>Description</h4><p><p>Destruction will await all submitted and pending jobs.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/thread_queue.h#L34">include/thread_queue.h:34</a></p><hr class="member-fun-separator"></hr></main>',i={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class thread_queue"},d=void 0,n={id:"api/records/62C07277EB594DA2",title:"class thread_queue",description:"",source:"@site/celerity-runtime/docs/api/records/62C07277EB594DA2.mdx",sourceDirName:"api/records",slug:"/api/records/62C07277EB594DA2",permalink:"/docs/api/records/62C07277EB594DA2",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class thread_queue"},sidebar:"api"},l={},o=[];function p(e){const{Head:a}={...(0,c.R)(),...e.components};return a||function(e,a){throw new Error("Expected "+(a?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(a,{children:[(0,t.jsx)("script",{src:"/js/highlight.min.js"}),(0,t.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,t.jsx)("div",{dangerouslySetInnerHTML:{__html:s}})]})}function h(e={}){const{wrapper:a}={...(0,c.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},28453:(e,a,r)=>{r.d(a,{R:()=>i,x:()=>d});var t=r(96540);const c={},s=t.createContext(c);function i(e){const a=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function d(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:i(e.components),t.createElement(s.Provider,{value:a},e.children)}}}]);