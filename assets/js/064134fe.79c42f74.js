"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[97322],{40700:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var s=r(74848),a=r(28453);const n='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#06885D8AE2CD6C63"><span>namespace detail</span></a></li><li class="is-active"><a aria-current="page06A2F53358BB3078"><span>struct memory_info</span></a></li></ul></nav>\n<main><h1>struct memory_info</h1><h2>Declaration</h2><pre class="p-0"><code class="hdoc-record-code language-cpp">struct memory_info { /* full declaration omitted */ };</code></pre><h2>Description</h2><p><p>Information about a single memory in the local system.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/system_info.h#L32">include/system_info.h:32</a></p><h2>Member Variables</h2><dl><dt class="is-family-code" id="var_copy_peers" data-member-name="copy_peers">  memory_mask <b>copy_peers</b></dt><dd>This mask contains a 1-bit for every memory_id that the associated backend queue can copy data from or to directly. instruction_graph_generator expects this mapping to be reflexive, i.e. `system_info::memories[a].copy_peers[b] == system_info::memories[b].copy_peers[a]`. Further, copies must always be possible between `host_memory_id` and `user_memory_id` as well as between `host_memory_id` and every other memory. instruction_graph_generator will create a staging copy in host memory if data must be transferred between two memories that are not copy peers.</dd></dl></main>',o={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"struct memory_info"},i=void 0,c={id:"api/records/06A2F53358BB3078",title:"struct memory_info",description:"",source:"@site/celerity-runtime/docs/api/records/06A2F53358BB3078.mdx",sourceDirName:"api/records",slug:"/api/records/06A2F53358BB3078",permalink:"/docs/api/records/06A2F53358BB3078",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"struct memory_info"},sidebar:"api"},l={},d=[];function m(e){const{Head:t}={...(0,a.R)(),...e.components};return t||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t,{children:[(0,s.jsx)("script",{src:"/js/highlight.min.js"}),(0,s.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,s.jsx)("div",{dangerouslySetInnerHTML:{__html:n}})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},28453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>i});var s=r(96540);const a={},n=s.createContext(a);function o(e){const t=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(n.Provider,{value:t},e.children)}}}]);