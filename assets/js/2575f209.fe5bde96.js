"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[18209],{86426:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var n=i(74848),a=i(28453);const c='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#2B11B4E5D5B7143E"><span>namespace runtime</span></a></li><li class="is-active"><a aria-current="page4945C30DF8F4FAF3"><span>function init</span></a></li></ul></nav>\n<main><h3 id="4945C30DF8F4FAF3" data-function-name="init"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#4945C30DF8F4FAF3">\xb6</a><code class="hdoc-function-code language-cpp">inline void init(\n    int* argc,\n    char*** argv,\n    const <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;sycl::device&gt;&amp; devices)</code></pre></h3><h4>Description</h4><p><p>Initializes the Celerity runtime and instructs it to use a particular set of devices.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/celerity.h#L27">include/celerity.h:27</a></p><h4>Parameters</h4><dl><dt class="is-family-code">int*<b> argc</b></dt><dt class="is-family-code">char***<b> argv</b></dt><dt class="is-family-code">const <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;sycl::device&gt;&amp;<b> devices</b></dt><dd>The devices to be used on the current node. This can vary between nodes. If there are multiple nodes running on the same host, the list of devices must be the same across nodes on the same host.</dd></dl><hr class="member-fun-separator"></hr><h3 id="4F39CA4B2A396AE6" data-function-name="init"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#4F39CA4B2A396AE6">\xb6</a><code class="hdoc-function-code language-cpp">inline void init(int* argc,\n                 char*** argv,\n                 const detail::device_selector&amp;\n                     device_selector)</code></pre></h3><h4>Description</h4><p><p>Initializes the Celerity runtime and instructs it to use a particular set of devices.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/celerity.h#L35">include/celerity.h:35</a></p><h4>Parameters</h4><dl><dt class="is-family-code">int*<b> argc</b></dt><dt class="is-family-code">char***<b> argv</b></dt><dt class="is-family-code">const detail::device_selector&amp;<b> device_selector</b></dt><dd>The device selector to be used on the current node. This can vary between nodes. If there are multiple nodes running on the same host, the selector must be the same across nodes on the same host.</dd></dl><hr class="member-fun-separator"></hr><h3 id="6ED832C14F26B6A4" data-function-name="init"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#6ED832C14F26B6A4">\xb6</a><code class="hdoc-function-code language-cpp">inline void init(int* argc, char*** argv)</code></pre></h3><h4>Description</h4><p><p>Initializes the Celerity runtime.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/celerity.h#L19">include/celerity.h:19</a></p><h4>Parameters</h4><dl><dt class="is-family-code">int*<b> argc</b></dt><dt class="is-family-code">char***<b> argv</b></dt></dl><hr class="member-fun-separator"></hr></main>',s={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"function init"},r=void 0,o={id:"api/functions/celerity_runtime-init",title:"function init",description:"",source:"@site/celerity-runtime/docs/api/functions/celerity_runtime-init.mdx",sourceDirName:"api/functions",slug:"/api/functions/celerity_runtime-init",permalink:"/docs/api/functions/celerity_runtime-init",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"function init"},sidebar:"api"},l={},d=[];function p(e){const{Head:t}={...(0,a.R)(),...e.components};return t||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t,{children:[(0,n.jsx)("script",{src:"/js/highlight.min.js"}),(0,n.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,n.jsx)("div",{dangerouslySetInnerHTML:{__html:c}})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>s,x:()=>r});var n=i(96540);const a={},c=n.createContext(a);function s(e){const t=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),n.createElement(c.Provider,{value:t},e.children)}}}]);