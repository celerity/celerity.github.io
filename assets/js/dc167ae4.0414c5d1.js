"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[25550],{77195:(e,a,c)=>{c.r(a),c.d(a,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var n=c(74848),t=c(28453);const s='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#06885D8AE2CD6C63"><span>namespace detail</span></a></li><li class="is-active"><a aria-current="page073311E635D32F96"><span>class async_event_impl</span></a></li></ul></nav>\n<main><h1>class async_event_impl</h1><h2>Declaration</h2><pre class="p-0"><code class="hdoc-record-code language-cpp">class async_event_impl { /* full declaration omitted */ };</code></pre><h2>Description</h2><p><p>Abstract base class for <code>async_event</code> implementations.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/async_event.h#L12">include/async_event.h:12</a></p><h2>Member Function Overview</h2><ul><li class="is-family-code"><a href="#18382DC62DEBA31D"><b>async_event_impl</b></a>()</li><li class="is-family-code"><a href="#549A8BE53BD390DA"><b>async_event_impl</b></a>(const async_event_impl &amp;)</li><li class="is-family-code"><a href="#6714417D2C6D8DBC"><b>async_event_impl</b></a>(async_event_impl &amp;&amp;)</li><li class="is-family-code"><a href="#586AC2FBEF390DDA"><b>get_native_execution_time</b></a>() &rarr; virtual std::optional&lt;std::chrono::nanoseconds&gt;</li><li class="is-family-code"><a href="#BBCC63BE793ABAF2"><b>get_result</b></a>() &rarr; virtual void *</li><li class="is-family-code"><a href="#C0338F7BBBCA1682"><b>is_complete</b></a>() &rarr; virtual bool</li><li class="is-family-code"><a href="#956FA9230ED98EAA"><b>operator=</b></a>(const async_event_impl &amp;) &rarr; async_event_impl &amp;</li><li class="is-family-code"><a href="#0094266AA4523532"><b>operator=</b></a>(async_event_impl &amp;&amp;) &rarr; async_event_impl &amp;</li><li class="is-family-code"><a href="#8F63EE20D9979948"><b>~async_event_impl</b></a>() &rarr; virtual</li></ul><h2>Member Functions</h2><h3 id="18382DC62DEBA31D" data-function-name="async_event_impl"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#18382DC62DEBA31D">\xb6</a><code class="hdoc-function-code language-cpp">async_event_impl()</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/async_event.h#L14">include/async_event.h:14</a></p><hr class="member-fun-separator"></hr><h3 id="549A8BE53BD390DA" data-function-name="async_event_impl"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#549A8BE53BD390DA">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/073311E635D32F96/">async_event_impl</a>(const async_event_impl&amp;)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/async_event.h#L15">include/async_event.h:15</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/073311E635D32F96/">async_event_impl</a>&amp;<b> </b></dt></dl><hr class="member-fun-separator"></hr><h3 id="6714417D2C6D8DBC" data-function-name="async_event_impl"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#6714417D2C6D8DBC">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/073311E635D32F96/">async_event_impl</a>(async_event_impl&amp;&amp;)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/async_event.h#L16">include/async_event.h:16</a></p><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/073311E635D32F96/">async_event_impl</a>&amp;&amp;<b> </b></dt></dl><hr class="member-fun-separator"></hr><h3 id="586AC2FBEF390DDA" data-function-name="get_native_execution_time"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#586AC2FBEF390DDA">\xb6</a><code class="hdoc-function-code language-cpp">virtual <a href="https://en.cppreference.com/w/cpp/utility/optional">std::optional</a>&lt;std::chrono::nanoseconds&gt;\nget_native_execution_time()</code></pre></h3><h4>Description</h4><p><p>Returns the time execution time as measured if profiling was enabled in the issuing component. Requires <code>is_complete()</code> to be true.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/async_event.h#L30">include/async_event.h:30</a></p><hr class="member-fun-separator"></hr><h3 id="BBCC63BE793ABAF2" data-function-name="get_result"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#BBCC63BE793ABAF2">\xb6</a><code class="hdoc-function-code language-cpp">virtual void* get_result()</code></pre></h3><h4>Description</h4><p><p>There is only one instruction type which returns a result, namely alloc_instruction returning a pointer to the allocated memory, i.e. a void*. Having a void* return type on async_event_impl is somewhat leaky, but we don\'t gain much by wrapping it in a std::any.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/async_event.h#L27">include/async_event.h:27</a></p><hr class="member-fun-separator"></hr><h3 id="C0338F7BBBCA1682" data-function-name="is_complete"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#C0338F7BBBCA1682">\xb6</a><code class="hdoc-function-code language-cpp">virtual bool is_complete()</code></pre></h3><h4>Description</h4><p><p>If this function returns true once, the implementation must guarantee that it will always do so in the future. The event is expected to be cheap to poll repeatedly, and the operation must proceed in the background even while not being polled.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/async_event.h#L23">include/async_event.h:23</a></p><hr class="member-fun-separator"></hr><h3 id="956FA9230ED98EAA" data-function-name="operator="><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#956FA9230ED98EAA">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/073311E635D32F96/">async_event_impl</a>&amp; operator=(\n    const <a href="/docs/api/records/073311E635D32F96/">async_event_impl</a>&amp;)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/async_event.h#L17">include/async_event.h:17</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/073311E635D32F96/">async_event_impl</a>&amp;<b> </b></dt></dl><hr class="member-fun-separator"></hr><h3 id="0094266AA4523532" data-function-name="operator="><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#0094266AA4523532">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/073311E635D32F96/">async_event_impl</a>&amp; operator=(<a href="/docs/api/records/073311E635D32F96/">async_event_impl</a>&amp;&amp;)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/async_event.h#L18">include/async_event.h:18</a></p><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/073311E635D32F96/">async_event_impl</a>&amp;&amp;<b> </b></dt></dl><hr class="member-fun-separator"></hr><h3 id="8F63EE20D9979948" data-function-name="~async_event_impl"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#8F63EE20D9979948">\xb6</a><code class="hdoc-function-code language-cpp">virtual ~async_event_impl()</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/async_event.h#L19">include/async_event.h:19</a></p><hr class="member-fun-separator"></hr></main>',r={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class async_event_impl"},i=void 0,l={id:"api/records/073311E635D32F96",title:"class async_event_impl",description:"",source:"@site/celerity-runtime/docs/api/records/073311E635D32F96.mdx",sourceDirName:"api/records",slug:"/api/records/073311E635D32F96",permalink:"/docs/api/records/073311E635D32F96",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class async_event_impl"},sidebar:"api"},o={},p=[];function d(e){const{Head:a}={...(0,t.R)(),...e.components};return a||function(e,a){throw new Error("Expected "+(a?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(a,{children:[(0,n.jsx)("script",{src:"/js/highlight.min.js"}),(0,n.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,n.jsx)("div",{dangerouslySetInnerHTML:{__html:s}})]})}function h(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,a,c)=>{c.d(a,{R:()=>r,x:()=>i});var n=c(96540);const t={},s=n.createContext(t);function r(e){const a=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),n.createElement(s.Provider,{value:a},e.children)}}}]);