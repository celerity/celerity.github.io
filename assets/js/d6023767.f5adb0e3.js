"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[39844],{35781:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>n,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>l,toc:()=>d});var o=t(74848),s=t(28453);const i='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#06885D8AE2CD6C63"><span>namespace detail</span></a></li><li class="is-active"><a aria-current="pageE4D60A656EBA881D"><span>struct allocation_with_offset</span></a></li></ul></nav>\n<main><h1>struct allocation_with_offset</h1><h2>Declaration</h2><pre class="p-0"><code class="hdoc-record-code language-cpp">struct allocation_with_offset { /* full declaration omitted */ };</code></pre><h2>Description</h2><p><p>Instruction-graph equivalent of a USM pointer that permits pointer arithmetic. The offset will be applied by the executor once the allocation pointer is known.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/types.h#L137">include/types.h:137</a></p><h2>Member Variables</h2><dl><dt class="is-family-code" id="var_id" data-member-name="id">  <a href="/docs/api/records/1824FC8BEBAA39C7/">allocation_id</a> <b>id</b> = null_allocation_id</dt><dt class="is-family-code" id="var_offset_bytes" data-member-name="offset_bytes">  size_t <b>offset_bytes</b> = 0</dt></dl><h2>Member Function Overview</h2><ul><li class="is-family-code"><a href="#316917D01C06DB5E"><b>allocation_with_offset</b></a>()</li><li class="is-family-code"><a href="#C72233D719537E17"><b>allocation_with_offset</b></a>(detail::allocation_id aid, size_t offset_bytes = 0)</li></ul><h2>Friend Function Overview</h2><ul><li class="is-family-code"><a href="#3F796C2F70C82E5E"><b>operator!=</b></a>(const allocation_with_offset &amp; lhs, const allocation_with_offset &amp; rhs) &rarr; friend bool</li><li class="is-family-code"><a href="#B592D0CBC6310C58"><b>operator==</b></a>(const allocation_with_offset &amp; lhs, const allocation_with_offset &amp; rhs) &rarr; friend bool</li></ul><h2>Member Functions</h2><h3 id="316917D01C06DB5E" data-function-name="allocation_with_offset"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#316917D01C06DB5E">\xb6</a><code class="hdoc-function-code language-cpp">allocation_with_offset()</code></pre></h3><h4>Description</h4><p><p>Constructs the equivalent of a null pointer.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/types.h#L142">include/types.h:142</a></p><hr class="member-fun-separator"></hr><h3 id="C72233D719537E17" data-function-name="allocation_with_offset"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#C72233D719537E17">\xb6</a><code class="hdoc-function-code language-cpp">allocation_with_offset(<a href="/docs/api/records/1824FC8BEBAA39C7/">detail::allocation_id</a> aid,\n                       size_t offset_bytes = 0)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/types.h#L144">include/types.h:144</a></p><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/1824FC8BEBAA39C7/">detail::allocation_id</a><b> aid</b></dt><dt class="is-family-code">size_t<b> offset_bytes</b> = 0</dt></dl><hr class="member-fun-separator"></hr><h2>Friend Functions</h2><h3 id="3F796C2F70C82E5E" data-function-name="operator!="><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#3F796C2F70C82E5E">\xb6</a><code class="hdoc-function-code language-cpp">friend bool operator!=(\n    const <a href="/docs/api/records/E4D60A656EBA881D/">allocation_with_offset</a>&amp; lhs,\n    const <a href="/docs/api/records/E4D60A656EBA881D/">allocation_with_offset</a>&amp; rhs)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/types.h#L149">include/types.h:149</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/E4D60A656EBA881D/">allocation_with_offset</a>&amp;<b> lhs</b></dt><dt class="is-family-code">const <a href="/docs/api/records/E4D60A656EBA881D/">allocation_with_offset</a>&amp;<b> rhs</b></dt></dl><hr class="member-fun-separator"></hr><h3 id="B592D0CBC6310C58" data-function-name="operator=="><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#B592D0CBC6310C58">\xb6</a><code class="hdoc-function-code language-cpp">friend bool operator==(\n    const <a href="/docs/api/records/E4D60A656EBA881D/">allocation_with_offset</a>&amp; lhs,\n    const <a href="/docs/api/records/E4D60A656EBA881D/">allocation_with_offset</a>&amp; rhs)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/types.h#L146">include/types.h:146</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/E4D60A656EBA881D/">allocation_with_offset</a>&amp;<b> lhs</b></dt><dt class="is-family-code">const <a href="/docs/api/records/E4D60A656EBA881D/">allocation_with_offset</a>&amp;<b> rhs</b></dt></dl><hr class="member-fun-separator"></hr></main>',c={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"struct allocation_with_offset"},r=void 0,l={id:"api/records/E4D60A656EBA881D",title:"struct allocation_with_offset",description:"",source:"@site/celerity-runtime/docs/api/records/E4D60A656EBA881D.mdx",sourceDirName:"api/records",slug:"/api/records/E4D60A656EBA881D",permalink:"/docs/api/records/E4D60A656EBA881D",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"struct allocation_with_offset"},sidebar:"api"},n={},d=[];function p(e){const{Head:a}={...(0,s.R)(),...e.components};return a||function(e,a){throw new Error("Expected "+(a?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(a,{children:[(0,o.jsx)("script",{src:"/js/highlight.min.js"}),(0,o.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,o.jsx)("div",{dangerouslySetInnerHTML:{__html:i}})]})}function h(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,o.jsx)(a,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},28453:(e,a,t)=>{t.d(a,{R:()=>c,x:()=>r});var o=t(96540);const s={},i=o.createContext(s);function c(e){const a=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),o.createElement(i.Provider,{value:a},e.children)}}}]);