"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3794],{3876:(e,i,a)=>{a.r(i),a.d(i,{assets:()=>d,contentTitle:()=>n,default:()=>h,frontMatter:()=>c,metadata:()=>o,toc:()=>l});var t=a(74848),s=a(28453);const r='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#06885D8AE2CD6C63"><span>namespace detail</span></a></li><li class="is-active"><a aria-current="pageFC818C6470B7B811"><span>class gather_receive_instruction</span></a></li></ul></nav>\n<main><h1>class gather_receive_instruction</h1><h2>Declaration</h2><pre class="p-0"><code class="hdoc-record-code language-cpp">class gather_receive_instruction : public implement_acceptor { /* full declaration omitted */ };</code></pre><section><h2>Description</h2><p><p>A special type of receive instruction used for global reductions: Instructs the receive arbiter to wait for incoming transfers of the same region from every peer node and place the chunks side-by-side in a contiguous allocation. The offset in the output allocation are equal to the sender node id.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/instruction_graph.h#L314">include/instruction_graph.h:314</a></p></aside><section><p>Inherits from: implement_acceptor</p></section><section><h2>Member Variables</h2><dl><dt class="is-family-code hdoc-private" id="var_m_trid" data-member-name="m_trid">  <a href="/docs/api/records/3330F4171361EBD0/">transfer_id</a> <b>m_trid</b></dt><dt class="is-family-code hdoc-private" id="var_m_dest_aid" data-member-name="m_dest_aid">  <a href="/docs/api/records/1824FC8BEBAA39C7/">allocation_id</a> <b>m_dest_aid</b></dt><dt class="is-family-code hdoc-private" id="var_m_node_chunk_size" data-member-name="m_node_chunk_size">  size_t <b>m_node_chunk_size</b></dt></dl></section><section><h2>Member Function Overview</h2><ul><li class="is-family-code"><a href="#08C0476B00CF4C79"><b>gather_receive_instruction</b></a>(instruction_id iid, int priority, const transfer_id &amp; trid, allocation_id dest_aid, size_t node_chunk_size) &rarr; explicit</li><li class="is-family-code"><a href="#A5BB4B0004C5BB08"><b>get_dest_allocation_id</b></a>() const &rarr; allocation_id</li><li class="is-family-code"><a href="#3558FEDED657E40D"><b>get_node_chunk_size</b></a>() const &rarr; size_t</li><li class="is-family-code"><a href="#E119E3FB8DB8F6B7"><b>get_transfer_id</b></a>() const &rarr; transfer_id</li></ul></section><section><h2>Member Functions</h2><section><h3 id="08C0476B00CF4C79" data-function-name="gather_receive_instruction"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#08C0476B00CF4C79">\xb6</a><code class="hdoc-function-code language-cpp">explicit gather_receive_instruction(\n    <a href="/docs/api/records/A10FDF2DB5485BE8/">instruction_id</a> iid,\n    int priority,\n    const <a href="/docs/api/records/3330F4171361EBD0/">transfer_id</a>&amp; trid,\n    <a href="/docs/api/records/1824FC8BEBAA39C7/">allocation_id</a> dest_aid,\n    size_t node_chunk_size)</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/instruction_graph.h#L316">include/instruction_graph.h:316</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/A10FDF2DB5485BE8/">instruction_id</a><b> iid</b></dt><dt class="is-family-code">int<b> priority</b></dt><dt class="is-family-code">const <a href="/docs/api/records/3330F4171361EBD0/">transfer_id</a>&amp;<b> trid</b></dt><dt class="is-family-code"><a href="/docs/api/records/1824FC8BEBAA39C7/">allocation_id</a><b> dest_aid</b></dt><dt class="is-family-code">size_t<b> node_chunk_size</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="A5BB4B0004C5BB08" data-function-name="get_dest_allocation_id"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#A5BB4B0004C5BB08">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/1824FC8BEBAA39C7/">allocation_id</a> get_dest_allocation_id() const</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/instruction_graph.h#L321">include/instruction_graph.h:321</a></p></aside></section><hr class="member-fun-separator"></hr><section><h3 id="3558FEDED657E40D" data-function-name="get_node_chunk_size"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#3558FEDED657E40D">\xb6</a><code class="hdoc-function-code language-cpp">size_t get_node_chunk_size() const</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/instruction_graph.h#L322">include/instruction_graph.h:322</a></p></aside></section><hr class="member-fun-separator"></hr><section><h3 id="E119E3FB8DB8F6B7" data-function-name="get_transfer_id"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#E119E3FB8DB8F6B7">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/3330F4171361EBD0/">transfer_id</a> get_transfer_id() const</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/instruction_graph.h#L320">include/instruction_graph.h:320</a></p></aside></section><hr class="member-fun-separator"></hr></section></main>',c={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class gather_receive_instruction"},n=void 0,o={id:"api/records/FC818C6470B7B811",title:"class gather_receive_instruction",description:"",source:"@site/celerity-runtime/docs/api/records/FC818C6470B7B811.mdx",sourceDirName:"api/records",slug:"/api/records/FC818C6470B7B811",permalink:"/docs/api/records/FC818C6470B7B811",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class gather_receive_instruction"},sidebar:"api"},d={},l=[];function p(e){const{Head:i}={...(0,s.R)(),...e.components};return i||function(e,i){throw new Error("Expected "+(i?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(i,{children:[(0,t.jsx)("script",{src:"/js/highlight.min.js"}),(0,t.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,t.jsx)("div",{dangerouslySetInnerHTML:{__html:r}})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},28453:(e,i,a)=>{a.d(i,{R:()=>c,x:()=>n});var t=a(96540);const s={},r=t.createContext(s);function c(e){const i=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function n(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(r.Provider,{value:i},e.children)}}}]);