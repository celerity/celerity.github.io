"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[66082],{12436:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>c,metadata:()=>n,toc:()=>l});var t=r(74848),i=r(28453);const o='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#06885D8AE2CD6C63"><span>namespace detail</span></a></li><li class="is-active"><a aria-current="pageD8077D06AAAEBEFD"><span>class instruction_graph_generator</span></a></li></ul></nav>\n<main><h1>class instruction_graph_generator</h1><h2>Declaration</h2><pre class="p-0"><code class="hdoc-record-code language-cpp">class instruction_graph_generator { /* full declaration omitted */ };</code></pre><section><h2>Description</h2><p><p>Tracks the node-local state of buffers and host objects, receives commands at node granularity and emits instructions to allocate memory, establish coherence between devices and distribute work among the devices on the local system.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/instruction_graph_generator.h#L36">include/instruction_graph_generator.h:36</a></p></aside><section><h2>Member Variables</h2><dl><dt class="is-family-code hdoc-private" id="var_m_impl" data-member-name="m_impl">  <a href="https://en.cppreference.com/w/cpp/memory/unique_ptr">std::unique_ptr</a>&lt;\n    instruction_graph_generator_detail::\n        generator_impl&gt; <b>m_impl</b></dt></dl></section><section><h2>Member Function Overview</h2><ul><li class="is-family-code"><a href="#EC961A52747A4D18"><b>compile</b></a>(const abstract_command &amp; cmd) &rarr; void</li><li class="is-family-code"><a href="#BA4BE4FE97A67019"><b>instruction_graph_generator</b></a>(const task_manager &amp; tm, size_t num_nodes, node_id local_nid, const system_info &amp; system, instruction_graph &amp; idag, delegate * dlg = nullptr, instruction_recorder * recorder = nullptr, const policy_set &amp; policy = default_policy_set()) &rarr; explicit</li><li class="is-family-code"><a href="#B3C3661581C9A2AF"><b>instruction_graph_generator</b></a>(const instruction_graph_generator &amp;)</li><li class="is-family-code"><a href="#B26A34357F03198F"><b>instruction_graph_generator</b></a>(instruction_graph_generator &amp;&amp;)</li><li class="is-family-code"><a href="#21E6A86ADB8A2AFE"><b>notify_buffer_created</b></a>(buffer_id bid, const range&lt;3&gt; &amp; range, size_t elem_size, size_t elem_align, allocation_id user_allocation_id) &rarr; void</li><li class="is-family-code"><a href="#A7FC673692340E4D"><b>notify_buffer_debug_name_changed</b></a>(buffer_id bid, const std::string &amp; name) &rarr; void</li><li class="is-family-code"><a href="#C4D11D6BFD3F5AE6"><b>notify_buffer_destroyed</b></a>(buffer_id bid) &rarr; void</li><li class="is-family-code"><a href="#9AEFFD54594716C2"><b>notify_host_object_created</b></a>(host_object_id hoid, bool owns_instance) &rarr; void</li><li class="is-family-code"><a href="#1ECF4FA5945A52C4"><b>notify_host_object_destroyed</b></a>(host_object_id hoid) &rarr; void</li><li class="is-family-code"><a href="#6C13D77B1611C97B"><b>operator=</b></a>(const instruction_graph_generator &amp;) &rarr; instruction_graph_generator &amp;</li><li class="is-family-code"><a href="#75150146009906A3"><b>operator=</b></a>(instruction_graph_generator &amp;&amp;) &rarr; instruction_graph_generator &amp;</li><li class="is-family-code"><a href="#6CA2DAB973C1DDC2"><b>~instruction_graph_generator</b></a>()</li><li class="is-family-code hdoc-private"><a href="#EEA5A05E89B9BFA1"><b>default_policy_set</b></a>() &rarr; static constexpr policy_set</li></ul></section><section><h2>Member Functions</h2><section><h3 id="EC961A52747A4D18" data-function-name="compile"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#EC961A52747A4D18">\xb6</a><code class="hdoc-function-code language-cpp">void compile(const <a href="/docs/api/records/45953E750EDED50D/">abstract_command</a>&amp; cmd)</code></pre></h3><section><h4>Description</h4><p><p>Compiles a command-graph node into a set of instructions, which are inserted into the shared instruction graph, and updates tracking structures.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/instruction_graph_generator.h#L116">include/instruction_graph_generator.h:116</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/45953E750EDED50D/">abstract_command</a>&amp;<b> cmd</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="BA4BE4FE97A67019" data-function-name="instruction_graph_generator"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#BA4BE4FE97A67019">\xb6</a><code class="hdoc-function-code language-cpp">explicit instruction_graph_generator(\n    const <a href="/docs/api/records/AF217E212CB99D08/">task_manager</a>&amp; tm,\n    size_t num_nodes,\n    <a href="/docs/api/records/DBE63D9D086598BC/">node_id</a> local_nid,\n    const <a href="/docs/api/records/8B87A955194B6925/">system_info</a>&amp; system,\n    <a href="/docs/api/records/8F96988164AB067F/">instruction_graph</a>&amp; idag,\n    <a href="/docs/api/records/E0703723ACB4E8C8/">delegate</a>* dlg = nullptr,\n    <a href="/docs/api/records/E8FA12264299E0BA/">instruction_recorder</a>* recorder = nullptr,\n    const <a href="/docs/api/records/2CF0540537D19097/">policy_set</a>&amp; policy =\n        default_policy_set())</code></pre></h3><section><h4>Description</h4><p><p>Instruction graph generation requires information about the target system. <code>num_nodes</code> and <code>local_nid</code> affect the generation of communication instructions and reductions, and <code>system</code> is used to determine work assignment, memory allocation and data migration between memories. Generated instructions are inserted into (and subsequently owned by) the provided <code>idag</code>, and if <code>dlg</code> is provided, it is notified about any newly created instructions and outbound pilots. If and only if a <code>recorder</code> is present, the generator will collect debug information about each generated instruction and pass it to the recorder. Set this to <code>nullptr</code> in production code in order to avoid a performance penalty. Specify a non-default <code>policy</code> to influence what user-errors are detected at runtime and how they are reported. The default is is to throw exceptions which catch errors early in tests, but users of this class will want to ease these settings. Any policy set to a value other than <code>error_policy::ignore</code> will have a performance penalty.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/instruction_graph_generator.h#L86">include/instruction_graph_generator.h:86</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/AF217E212CB99D08/">task_manager</a>&amp;<b> tm</b></dt><dt class="is-family-code">size_t<b> num_nodes</b></dt><dt class="is-family-code"><a href="/docs/api/records/DBE63D9D086598BC/">node_id</a><b> local_nid</b></dt><dt class="is-family-code">const <a href="/docs/api/records/8B87A955194B6925/">system_info</a>&amp;<b> system</b></dt><dt class="is-family-code"><a href="/docs/api/records/8F96988164AB067F/">instruction_graph</a>&amp;<b> idag</b></dt><dt class="is-family-code"><a href="/docs/api/records/E0703723ACB4E8C8/">delegate</a>*<b> dlg</b> = nullptr</dt><dt class="is-family-code"><a href="/docs/api/records/E8FA12264299E0BA/">instruction_recorder</a>*<b> recorder</b> = nullptr</dt><dt class="is-family-code">const <a href="/docs/api/records/2CF0540537D19097/">policy_set</a>&amp;<b> policy</b> = default_policy_set()</dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="B3C3661581C9A2AF" data-function-name="instruction_graph_generator"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#B3C3661581C9A2AF">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/D8077D06AAAEBEFD/">instruction_graph_generator</a>(\n    const instruction_graph_generator&amp;)</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/instruction_graph_generator.h#L89">include/instruction_graph_generator.h:89</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/D8077D06AAAEBEFD/">instruction_graph_generator</a>&amp;<b> </b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="B26A34357F03198F" data-function-name="instruction_graph_generator"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#B26A34357F03198F">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/D8077D06AAAEBEFD/">instruction_graph_generator</a>(\n    instruction_graph_generator&amp;&amp;)</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/instruction_graph_generator.h#L90">include/instruction_graph_generator.h:90</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/D8077D06AAAEBEFD/">instruction_graph_generator</a>&amp;&amp;<b> </b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="21E6A86ADB8A2AFE" data-function-name="notify_buffer_created"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#21E6A86ADB8A2AFE">\xb6</a><code class="hdoc-function-code language-cpp">void notify_buffer_created(\n    <a href="/docs/api/records/72F1B234CCBF2E73/">buffer_id</a> bid,\n    const <a href="/docs/api/records/B13622E7024342AF/">range</a>&lt;3&gt;&amp; range,\n    size_t elem_size,\n    size_t elem_align,\n    <a href="/docs/api/records/1824FC8BEBAA39C7/">allocation_id</a> user_allocation_id)</code></pre></h3><section><h4>Description</h4><p><p>Begin tracking local data distribution and dependencies on the buffer with id <code>bid</code>. Allocations are made lazily on first access. Passing <code>user_allocation_id != null_allocation_id</code> means that the buffer is considered coherent in user memory and data will be lazily copied from that allocation when read from host tasks or device kernels.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/instruction_graph_generator.h#L100">include/instruction_graph_generator.h:100</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/72F1B234CCBF2E73/">buffer_id</a><b> bid</b></dt><dt class="is-family-code">const <a href="/docs/api/records/B13622E7024342AF/">range</a>&lt;3&gt;&amp;<b> range</b></dt><dt class="is-family-code">size_t<b> elem_size</b></dt><dt class="is-family-code">size_t<b> elem_align</b></dt><dt class="is-family-code"><a href="/docs/api/records/1824FC8BEBAA39C7/">allocation_id</a><b> user_allocation_id</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="A7FC673692340E4D" data-function-name="notify_buffer_debug_name_changed"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#A7FC673692340E4D">\xb6</a><code class="hdoc-function-code language-cpp">void notify_buffer_debug_name_changed(\n    <a href="/docs/api/records/72F1B234CCBF2E73/">buffer_id</a> bid,\n    const <a href="https://en.cppreference.com/w/cpp/string/basic_string">std::string</a>&amp; name)</code></pre></h3><section><h4>Description</h4><p><p>Changing an existing buffer\'s debug name causes all future instructions to refer to that buffer by the new name (if a recorder is present).</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/instruction_graph_generator.h#L103">include/instruction_graph_generator.h:103</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/72F1B234CCBF2E73/">buffer_id</a><b> bid</b></dt><dt class="is-family-code">const <a href="https://en.cppreference.com/w/cpp/string/basic_string">std::string</a>&amp;<b> name</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="C4D11D6BFD3F5AE6" data-function-name="notify_buffer_destroyed"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#C4D11D6BFD3F5AE6">\xb6</a><code class="hdoc-function-code language-cpp">void notify_buffer_destroyed(<a href="/docs/api/records/72F1B234CCBF2E73/">buffer_id</a> bid)</code></pre></h3><section><h4>Description</h4><p><p>End tracking buffer with the id <code>bid</code>. Emits <code>free_instructions</code> for all current allocations of that buffer.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/instruction_graph_generator.h#L106">include/instruction_graph_generator.h:106</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/72F1B234CCBF2E73/">buffer_id</a><b> bid</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="9AEFFD54594716C2" data-function-name="notify_host_object_created"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#9AEFFD54594716C2">\xb6</a><code class="hdoc-function-code language-cpp">void notify_host_object_created(\n    <a href="/docs/api/records/A0E5B68259E332A7/">host_object_id</a> hoid,\n    bool owns_instance)</code></pre></h3><section><h4>Description</h4><p><p>Begin tracking dependencies on the host object with id <code>hoid</code>. If <code>owns_instance</code> is true, a <code>destroy_host_object_instruction</code> will be emitted when <code>destroy_host_object</code> is subsequently called.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/instruction_graph_generator.h#L110">include/instruction_graph_generator.h:110</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/A0E5B68259E332A7/">host_object_id</a><b> hoid</b></dt><dt class="is-family-code">bool<b> owns_instance</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="1ECF4FA5945A52C4" data-function-name="notify_host_object_destroyed"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#1ECF4FA5945A52C4">\xb6</a><code class="hdoc-function-code language-cpp">void notify_host_object_destroyed(\n    <a href="/docs/api/records/A0E5B68259E332A7/">host_object_id</a> hoid)</code></pre></h3><section><h4>Description</h4><p><p>End tracking the host object with id <code>hoid</code>. Emits <code>destroy_host_object_instruction</code> if <code>create_host_object</code> was called with <code>owns_instance == true</code>.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/instruction_graph_generator.h#L113">include/instruction_graph_generator.h:113</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/A0E5B68259E332A7/">host_object_id</a><b> hoid</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="6C13D77B1611C97B" data-function-name="operator="><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#6C13D77B1611C97B">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/D8077D06AAAEBEFD/">instruction_graph_generator</a>&amp; operator=(\n    const <a href="/docs/api/records/D8077D06AAAEBEFD/">instruction_graph_generator</a>&amp;)</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/instruction_graph_generator.h#L91">include/instruction_graph_generator.h:91</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/D8077D06AAAEBEFD/">instruction_graph_generator</a>&amp;<b> </b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="75150146009906A3" data-function-name="operator="><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#75150146009906A3">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/D8077D06AAAEBEFD/">instruction_graph_generator</a>&amp; operator=(\n    <a href="/docs/api/records/D8077D06AAAEBEFD/">instruction_graph_generator</a>&amp;&amp;)</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/instruction_graph_generator.h#L92">include/instruction_graph_generator.h:92</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/D8077D06AAAEBEFD/">instruction_graph_generator</a>&amp;&amp;<b> </b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="6CA2DAB973C1DDC2" data-function-name="~instruction_graph_generator"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#6CA2DAB973C1DDC2">\xb6</a><code class="hdoc-function-code language-cpp">~instruction_graph_generator()</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/instruction_graph_generator.h#L94">include/instruction_graph_generator.h:94</a></p></aside></section><hr class="member-fun-separator"></hr><section><h3 id="EEA5A05E89B9BFA1" data-function-name="default_policy_set"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#EEA5A05E89B9BFA1">\xb6</a><code class="hdoc-function-code language-cpp">static constexpr <a href="/docs/api/records/2CF0540537D19097/">policy_set</a> default_policy_set()</code></pre></h3><section><h4>Description</h4><p><p>Default-constructs a <code>policy_set</code> - this must be a function because we can\'t use the implicit default constructor of <code>policy_set</code>, which has member initializers, within its surrounding class (Clang diagnostic).</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/instruction_graph_generator.h#L121">include/instruction_graph_generator.h:121</a></p></aside></section><hr class="member-fun-separator"></hr></section></main>',c={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class instruction_graph_generator"},s=void 0,n={id:"api/records/D8077D06AAAEBEFD",title:"class instruction_graph_generator",description:"",source:"@site/celerity-runtime/docs/api/records/D8077D06AAAEBEFD.mdx",sourceDirName:"api/records",slug:"/api/records/D8077D06AAAEBEFD",permalink:"/docs/api/records/D8077D06AAAEBEFD",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class instruction_graph_generator"},sidebar:"api"},d={},l=[];function p(e){const{Head:a}={...(0,i.R)(),...e.components};return a||function(e,a){throw new Error("Expected "+(a?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(a,{children:[(0,t.jsx)("script",{src:"/js/highlight.min.js"}),(0,t.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,t.jsx)("div",{dangerouslySetInnerHTML:{__html:o}})]})}function h(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},28453:(e,a,r)=>{r.d(a,{R:()=>c,x:()=>s});var t=r(96540);const i={},o=t.createContext(i);function c(e){const a=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function s(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(o.Provider,{value:a},e.children)}}}]);