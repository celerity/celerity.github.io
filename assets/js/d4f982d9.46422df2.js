"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1423],{37838:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var s=t(74848),n=t(28453);const i='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#36211E2D24C9AB8E"><span>namespace experimental</span></a></li><li><a href="/docs/api/namespaces/#055C21285505BD9F"><span>namespace access</span></a></li><li class="is-active"><a aria-current="page603E0BA63BB56EB1"><span>class even_split</span></a></li></ul></nav>\n<main><h1>class even_split</h1><h2>Declaration</h2><pre class="p-0"><code class="hdoc-record-code language-cpp">template &lt;int BufferDims&gt;\nclass even_split { /* full declaration omitted */ };</code></pre><section><h2>Description</h2><p><p>For a 1D kernel, splits an nD-buffer evenly along its slowest dimension. This range mapper is unique in the sense that the chunk parameter (i.e. the iteration space) is unrelated to the buffer indices it maps to. It is designed to distribute a buffer in contiguous portions between nodes for collective host tasks, allowing each node to output its portion in I/O operations. See <code>accessor::get_allocation_window</code> on how to access the resulting host memory.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/range_mapper.h#L231">include/range_mapper.h:231</a></p></aside><section><h2>Template Parameters</h2><dl><dt class="is-family-code">int<b> BufferDims</b></dt></dl></section><section><h2>Member Variables</h2><dl><dt class="is-family-code hdoc-private" id="var_m_granularity" data-member-name="m_granularity">  range&lt;BufferDims&gt; <b>m_granularity</b> = detail::range_cast&lt;BufferDims&gt;(celerity::range&lt;3&gt;(1, 1, 1))</dt></dl></section><section><h2>Member Function Overview</h2><ul><li class="is-family-code"><a href="#BB216C2B8EF9395C"><b>even_split</b></a>()</li><li class="is-family-code"><a href="#CD6F3F024856720E"><b>even_split</b></a>(const range&lt;BufferDims&gt; &amp; granularity) &rarr; explicit</li><li class="is-family-code"><a href="#C4AEC261A60FDC21"><b>operator()</b></a>(const chunk&lt;1&gt; &amp; chunk, const range&lt;BufferDims&gt; &amp; buffer_size) const &rarr; subrange&lt;BufferDims&gt;</li></ul></section><section><h2>Member Functions</h2><section><h3 id="BB216C2B8EF9395C" data-function-name="even_split"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#BB216C2B8EF9395C">\xb6</a><code class="hdoc-function-code language-cpp">even_split()</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/range_mapper.h#L235">include/range_mapper.h:235</a></p></aside></section><hr class="member-fun-separator"></hr><section><h3 id="CD6F3F024856720E" data-function-name="even_split"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#CD6F3F024856720E">\xb6</a><code class="hdoc-function-code language-cpp">explicit even_split(\n    const range&lt;BufferDims&gt;&amp; granularity)</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/range_mapper.h#L236">include/range_mapper.h:236</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">const range&lt;BufferDims&gt;&amp;<b> granularity</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="C4AEC261A60FDC21" data-function-name="operator()"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#C4AEC261A60FDC21">\xb6</a><code class="hdoc-function-code language-cpp">subrange&lt;BufferDims&gt; operator()(\n    const <a href="/docs/api/records/5911309998BAB26F/">chunk</a>&lt;1&gt;&amp; chunk,\n    const range&lt;BufferDims&gt;&amp; buffer_size) const</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/range_mapper.h#L238">include/range_mapper.h:238</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/5911309998BAB26F/">chunk</a>&lt;1&gt;&amp;<b> chunk</b></dt><dt class="is-family-code">const range&lt;BufferDims&gt;&amp;<b> buffer_size</b></dt></dl></section></section><hr class="member-fun-separator"></hr></section></main>',r={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class even_split"},c=void 0,o={id:"api/records/603E0BA63BB56EB1",title:"class even_split",description:"",source:"@site/celerity-runtime/docs/api/records/603E0BA63BB56EB1.mdx",sourceDirName:"api/records",slug:"/api/records/603E0BA63BB56EB1",permalink:"/docs/api/records/603E0BA63BB56EB1",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class even_split"},sidebar:"api"},l={},p=[];function d(e){const{Head:a}={...(0,n.R)(),...e.components};return a||function(e,a){throw new Error("Expected "+(a?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(a,{children:[(0,s.jsx)("script",{src:"/js/highlight.min.js"}),(0,s.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,s.jsx)("div",{dangerouslySetInnerHTML:{__html:i}})]})}function u(e={}){const{wrapper:a}={...(0,n.R)(),...e.components};return a?(0,s.jsx)(a,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,a,t)=>{t.d(a,{R:()=>r,x:()=>c});var s=t(96540);const n={},i=s.createContext(n);function r(e){const a=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),s.createElement(i.Provider,{value:a},e.children)}}}]);