"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[99562],{99147:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var r=t(74848),c=t(28453);const n='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#06885D8AE2CD6C63"><span>namespace detail</span></a></li><li><a href="/docs/api/records/D8077D06AAAEBEFD/"><span>class instruction_graph_generator</span></a></li><li class="is-active"><a aria-current="pageE0703723ACB4E8C8"><span>class instruction_graph_generator::delegate</span></a></li></ul></nav>\n<main><h1>class instruction_graph_generator::delegate</h1><h2>Declaration</h2><pre class="p-0"><code class="hdoc-record-code language-cpp">class instruction_graph_generator::delegate { /* full declaration omitted */ };</code></pre><h2>Description</h2><p><p>Implement this as the owner of instruction_graph_generator to receive callbacks on generated instructions and pilot messages.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/instruction_graph_generator.h#L39">include/instruction_graph_generator.h:39</a></p><h2>Member Function Overview</h2><ul><li class="is-family-code"><a href="#3FA3FB8C5D0C7EF3"><b>flush</b></a>(std::vector&lt;const instruction *&gt; instructions, std::vector&lt;outbound_pilot&gt; pilots) &rarr; virtual void</li><li class="is-family-code hdoc-protected"><a href="#C7FA052385A089A8"><b>delegate</b></a>()</li><li class="is-family-code hdoc-protected"><a href="#E163BC6A5BE21D9B"><b>delegate</b></a>(const delegate &amp;)</li><li class="is-family-code hdoc-protected"><a href="#71050B0293C4A956"><b>delegate</b></a>(delegate &amp;&amp;)</li><li class="is-family-code hdoc-protected"><a href="#89C5F9E174256CC5"><b>operator=</b></a>(const delegate &amp;) &rarr; delegate &amp;</li><li class="is-family-code hdoc-protected"><a href="#5D756216E8FA1307"><b>operator=</b></a>(delegate &amp;&amp;) &rarr; delegate &amp;</li><li class="is-family-code hdoc-protected"><a href="#4F065F7D07CA2FE4"><b>~delegate</b></a>()</li></ul><h2>Member Functions</h2><h3 id="3FA3FB8C5D0C7EF3" data-function-name="flush"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#3FA3FB8C5D0C7EF3">\xb6</a><code class="hdoc-function-code language-cpp">virtual void flush(\n    <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;const instruction*&gt; instructions,\n    <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;outbound_pilot&gt; pilots)</code></pre></h3><h4>Description</h4><p><p>Called whenever new instructions have been generated and inserted into the instruction graph, and / or new pilot messages have been generated that must be transmitted to peer nodes before they can accept data transmitted through <code>send_instruction</code>s originating from the local node. The vector of instructions is in topological order of dependencies, and so is the concatenation of all vectors that are passed through this function. Topological order here means that sequential execution in that order would fulfill all internal dependencies. The instruction graph generator guarantees that instruction pointers are stable and the pointed-to instructions are both immutable and safe to read from other threads. This is exposed as a single function on vectors to minimize lock contention in a threaded delegate implementations.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/instruction_graph_generator.h#L57">include/instruction_graph_generator.h:57</a></p><h4>Parameters</h4><dl><dt class="is-family-code"><a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;const instruction*&gt;<b> instructions</b></dt><dt class="is-family-code"><a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;outbound_pilot&gt;<b> pilots</b></dt></dl><hr class="member-fun-separator"></hr><h3 id="C7FA052385A089A8" data-function-name="delegate"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#C7FA052385A089A8">\xb6</a><code class="hdoc-function-code language-cpp">delegate()</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/instruction_graph_generator.h#L41">include/instruction_graph_generator.h:41</a></p><hr class="member-fun-separator"></hr><h3 id="E163BC6A5BE21D9B" data-function-name="delegate"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#E163BC6A5BE21D9B">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/E0703723ACB4E8C8/">delegate</a>(const delegate&amp;)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/instruction_graph_generator.h#L42">include/instruction_graph_generator.h:42</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/E0703723ACB4E8C8/">delegate</a>&amp;<b> </b></dt></dl><hr class="member-fun-separator"></hr><h3 id="71050B0293C4A956" data-function-name="delegate"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#71050B0293C4A956">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/E0703723ACB4E8C8/">delegate</a>(delegate&amp;&amp;)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/instruction_graph_generator.h#L43">include/instruction_graph_generator.h:43</a></p><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/E0703723ACB4E8C8/">delegate</a>&amp;&amp;<b> </b></dt></dl><hr class="member-fun-separator"></hr><h3 id="89C5F9E174256CC5" data-function-name="operator="><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#89C5F9E174256CC5">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/E0703723ACB4E8C8/">delegate</a>&amp; operator=(const <a href="/docs/api/records/E0703723ACB4E8C8/">delegate</a>&amp;)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/instruction_graph_generator.h#L44">include/instruction_graph_generator.h:44</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/E0703723ACB4E8C8/">delegate</a>&amp;<b> </b></dt></dl><hr class="member-fun-separator"></hr><h3 id="5D756216E8FA1307" data-function-name="operator="><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#5D756216E8FA1307">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/E0703723ACB4E8C8/">delegate</a>&amp; operator=(<a href="/docs/api/records/E0703723ACB4E8C8/">delegate</a>&amp;&amp;)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/instruction_graph_generator.h#L45">include/instruction_graph_generator.h:45</a></p><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/E0703723ACB4E8C8/">delegate</a>&amp;&amp;<b> </b></dt></dl><hr class="member-fun-separator"></hr><h3 id="4F065F7D07CA2FE4" data-function-name="~delegate"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#4F065F7D07CA2FE4">\xb6</a><code class="hdoc-function-code language-cpp">~delegate()</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/instruction_graph_generator.h#L46">include/instruction_graph_generator.h:46</a></p><hr class="member-fun-separator"></hr></main>',o={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class instruction_graph_generator::delegate"},s=void 0,i={id:"api/records/E0703723ACB4E8C8",title:"class instruction_graph_generator::delegate",description:"",source:"@site/celerity-runtime/docs/api/records/E0703723ACB4E8C8.mdx",sourceDirName:"api/records",slug:"/api/records/E0703723ACB4E8C8",permalink:"/docs/api/records/E0703723ACB4E8C8",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class instruction_graph_generator::delegate"},sidebar:"api"},l={},d=[];function p(e){const{Head:a}={...(0,c.R)(),...e.components};return a||function(e,a){throw new Error("Expected "+(a?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(a,{children:[(0,r.jsx)("script",{src:"/js/highlight.min.js"}),(0,r.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,r.jsx)("div",{dangerouslySetInnerHTML:{__html:n}})]})}function h(e={}){const{wrapper:a}={...(0,c.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},28453:(e,a,t)=>{t.d(a,{R:()=>o,x:()=>s});var r=t(96540);const c={},n=r.createContext(c);function o(e){const a=r.useContext(n);return r.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function s(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:o(e.components),r.createElement(n.Provider,{value:a},e.children)}}}]);