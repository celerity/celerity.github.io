"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[21154],{16989:(a,e,i)=>{i.r(e),i.d(e,{assets:()=>n,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var o=i(74848),t=i(28453);const r='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#06885D8AE2CD6C63"><span>namespace detail</span></a></li><li class="is-active"><a aria-current="page1824FC8BEBAA39C7"><span>class allocation_id</span></a></li></ul></nav>\n<main><h1>class allocation_id</h1><h2>Declaration</h2><pre class="p-0"><code class="hdoc-record-code language-cpp">class allocation_id { /* full declaration omitted */ };</code></pre><h2>Description</h2><p><p>Uniquely identifies an allocation across all memories on the local node. This is the instruction-graph equivalent of a USM pointer. As allocation_ids are used extensively within the code but its constituents (memory_id and raw_allocation_id) rarely need to be inspected, it is bit-encoded into a single integer member.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/types.h#L74">include/types.h:74</a></p><h2>Member Variables</h2><dl><dt class="is-family-code" id="var_memory_id_bits" data-member-name="memory_id_bits"> static  const size_t <b>memory_id_bits</b> = 8</dt><dt class="is-family-code" id="var_max_memory_id" data-member-name="max_memory_id"> static  const size_t <b>max_memory_id</b> = (1 &lt;&lt; memory_id_bits) - 1</dt><dt class="is-family-code" id="var_raw_allocation_id_bits" data-member-name="raw_allocation_id_bits"> static  const size_t <b>raw_allocation_id_bits</b> = sizeof(unsigned long) * 8 - memory_id_bits</dt><dt class="is-family-code" id="var_max_raw_allocation_id" data-member-name="max_raw_allocation_id"> static  const size_t <b>max_raw_allocation_id</b> = (unsigned long(1) &lt;&lt; raw_allocation_id_bits) - 1</dt><dt class="is-family-code hdoc-private" id="var_m_mid" data-member-name="m_mid">  size_t <b>m_mid</b></dt><dt class="is-family-code hdoc-private" id="var_m_raid" data-member-name="m_raid">  size_t <b>m_raid</b></dt></dl><h2>Member Function Overview</h2><ul><li class="is-family-code"><a href="#AAC4F38BF2A129BA"><b>allocation_id</b></a>() &rarr; constexpr</li><li class="is-family-code"><a href="#646BB7A2AEC1C4F4"><b>allocation_id</b></a>(memory_id mid, raw_allocation_id raid) &rarr; constexpr</li><li class="is-family-code"><a href="#E101BEED17D85E6B"><b>get_memory_id</b></a>() const &rarr; constexpr memory_id</li><li class="is-family-code"><a href="#443BEAD23543087F"><b>get_raw_allocation_id</b></a>() const &rarr; constexpr raw_allocation_id</li></ul><h2>Friend Function Overview</h2><ul><li class="is-family-code"><a href="#C8D02A076CC48742"><b>operator!=</b></a>(const allocation_id &amp; lhs, const allocation_id &amp; rhs) &rarr; friend constexpr bool</li><li class="is-family-code"><a href="#EA92BD895E1A8B17"><b>operator==</b></a>(const allocation_id &amp; lhs, const allocation_id &amp; rhs) &rarr; friend constexpr bool</li></ul><h2>Member Functions</h2><h3 id="AAC4F38BF2A129BA" data-function-name="allocation_id"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#AAC4F38BF2A129BA">\xb6</a><code class="hdoc-function-code language-cpp">constexpr allocation_id()</code></pre></h3><h4>Description</h4><p><p>Constructs an allocation_id that does not point to memory (equivalent to <code>null_allocation_id</code>).</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/types.h#L82">include/types.h:82</a></p><hr class="member-fun-separator"></hr><h3 id="646BB7A2AEC1C4F4" data-function-name="allocation_id"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#646BB7A2AEC1C4F4">\xb6</a><code class="hdoc-function-code language-cpp">constexpr allocation_id(<a href="/docs/api/records/1AFCD7D3D6F8EF79/">memory_id</a> mid,\n                        <a href="/docs/api/records/36072153F47DBF20/">raw_allocation_id</a> raid)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/types.h#L84">include/types.h:84</a></p><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/1AFCD7D3D6F8EF79/">memory_id</a><b> mid</b></dt><dt class="is-family-code"><a href="/docs/api/records/36072153F47DBF20/">raw_allocation_id</a><b> raid</b></dt></dl><hr class="member-fun-separator"></hr><h3 id="E101BEED17D85E6B" data-function-name="get_memory_id"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#E101BEED17D85E6B">\xb6</a><code class="hdoc-function-code language-cpp">constexpr <a href="/docs/api/records/1AFCD7D3D6F8EF79/">memory_id</a> get_memory_id() const</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/types.h#L89">include/types.h:89</a></p><hr class="member-fun-separator"></hr><h3 id="443BEAD23543087F" data-function-name="get_raw_allocation_id"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#443BEAD23543087F">\xb6</a><code class="hdoc-function-code language-cpp">constexpr <a href="/docs/api/records/36072153F47DBF20/">raw_allocation_id</a>\nget_raw_allocation_id() const</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/types.h#L90">include/types.h:90</a></p><hr class="member-fun-separator"></hr><h2>Friend Functions</h2><h3 id="C8D02A076CC48742" data-function-name="operator!="><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#C8D02A076CC48742">\xb6</a><code class="hdoc-function-code language-cpp">friend constexpr bool operator!=(\n    const <a href="/docs/api/records/1824FC8BEBAA39C7/">allocation_id</a>&amp; lhs,\n    const <a href="/docs/api/records/1824FC8BEBAA39C7/">allocation_id</a>&amp; rhs)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/types.h#L93">include/types.h:93</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/1824FC8BEBAA39C7/">allocation_id</a>&amp;<b> lhs</b></dt><dt class="is-family-code">const <a href="/docs/api/records/1824FC8BEBAA39C7/">allocation_id</a>&amp;<b> rhs</b></dt></dl><hr class="member-fun-separator"></hr><h3 id="EA92BD895E1A8B17" data-function-name="operator=="><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#EA92BD895E1A8B17">\xb6</a><code class="hdoc-function-code language-cpp">friend constexpr bool operator==(\n    const <a href="/docs/api/records/1824FC8BEBAA39C7/">allocation_id</a>&amp; lhs,\n    const <a href="/docs/api/records/1824FC8BEBAA39C7/">allocation_id</a>&amp; rhs)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/types.h#L92">include/types.h:92</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/1824FC8BEBAA39C7/">allocation_id</a>&amp;<b> lhs</b></dt><dt class="is-family-code">const <a href="/docs/api/records/1824FC8BEBAA39C7/">allocation_id</a>&amp;<b> rhs</b></dt></dl><hr class="member-fun-separator"></hr></main>',s={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class allocation_id"},c=void 0,l={id:"api/records/1824FC8BEBAA39C7",title:"class allocation_id",description:"",source:"@site/celerity-runtime/docs/api/records/1824FC8BEBAA39C7.mdx",sourceDirName:"api/records",slug:"/api/records/1824FC8BEBAA39C7",permalink:"/docs/api/records/1824FC8BEBAA39C7",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class allocation_id"},sidebar:"api"},n={},d=[];function p(a){const{Head:e}={...(0,t.R)(),...a.components};return e||function(a,e){throw new Error("Expected "+(e?"component":"object")+" `"+a+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e,{children:[(0,o.jsx)("script",{src:"/js/highlight.min.js"}),(0,o.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,o.jsx)("div",{dangerouslySetInnerHTML:{__html:r}})]})}function m(a={}){const{wrapper:e}={...(0,t.R)(),...a.components};return e?(0,o.jsx)(e,{...a,children:(0,o.jsx)(p,{...a})}):p(a)}},28453:(a,e,i)=>{i.d(e,{R:()=>s,x:()=>c});var o=i(96540);const t={},r=o.createContext(t);function s(a){const e=o.useContext(r);return o.useMemo((function(){return"function"==typeof a?a(e):{...e,...a}}),[e,a])}function c(a){let e;return e=a.disableParentContext?"function"==typeof a.components?a.components(t):a.components||t:s(a.components),o.createElement(r.Provider,{value:e},a.children)}}}]);