"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[75592],{51465:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>n,toc:()=>d});var t=r(74848),c=r(28453);const i='<!DOCTYPE html><html><head><meta charset="utf-8"></meta><meta content="width=device-width, initial-scale=1" name="viewport"></meta><title>struct buffer_allocation_state: Celerity 0.6.0 documentation</title><link href="../styles.css" rel="stylesheet"></link><script src="../highlight.min.js"><\/script><script>hljs.highlightAll();<\/script><link href="../katex.min.css" rel="stylesheet"></link><script src="../katex.min.js"><\/script><script src="../auto-render.min.js"><\/script><script>\n      document.addEventListener("DOMContentLoaded", function() {\n        renderMathInElement(document.body, {\n          delimiters: [\n            {left: \'$$\', right: \'$$\', display: true},\n            {left: \'$\', right: \'$\', display: false},\n          ],\n        });\n      });\n    <\/script><link href="../apple-touch-icon.png" sizes="180x180" rel="apple-touch-icon"></link><link href="../favicon-32x32.png" sizes="32x32" type="image/png" rel="icon"></link><link href="../favicon-16x16.png" sizes="16x16" type="image/png" rel="icon"></link></head><body><div id="wrapper"><section class="section"><div class="container"><div class="columns"><aside class="column is-one-fifth"><ul class="menu-list"><p class="is-size-4">Celerity 0.6.0</p><p class="menu-label">Navigation</p><li><a href="../index/">Home</a></li><li><a href="../search/">Search</a></li><li><a href="https://github.com/celerity/celerity-runtime/">Repository</a></li><p class="menu-label">API Documentation</p><li><a href="/docs/api/namespaces/">Namespaces</a></li><li><a href="/docs/api/records/">Records</a></li><li><a href="/docs/api/enums/">Enums</a></li><li><a href="/docs/api/functions/">Functions</a></li><li><a href="/docs/api/aliases/">Aliases</a></li></ul></aside><div class="column" style="overflow-x: auto"><nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#06885D8AE2CD6C63"><span>namespace detail</span></a></li><li><a href="/docs/api/namespaces/#F04B845B7443865D"><span>namespace instruction_graph_generator_detail</span></a></li><li class="is-active"><a aria-current="pageA9233FB7C525B6CC"><span>struct buffer_allocation_state</span></a></li></ul></nav><main class="content"><h1>struct buffer_allocation_state</h1><h2>Declaration</h2><pre class="p-0"><code class="hdoc-record-code language-cpp">struct buffer_allocation_state { /* full declaration omitted */ };</code></pre><h2>Description</h2><p><p>Per-allocation state for a single buffer. This is where we track last-writer instructions and access fronts.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/instruction_graph_generator.cc#L262">src/instruction_graph_generator.cc:262</a></p><h2>Member Variables</h2><dl><dt class="is-family-code" id="var_aid" data-member-name="aid">  <a href="/docs/api/records/1824FC8BEBAA39C7/">allocation_id</a> <b>aid</b></dt><dt class="is-family-code" id="var_box" data-member-name="box">  <a href="/docs/api/records/A87962C2586A4E24/">detail::box</a>&lt;3&gt; <b>box</b></dt><dd>in buffer coordinates</dd><dt class="is-family-code" id="var_last_writers" data-member-name="last_writers">  <a href="/docs/api/records/42DEA3E8277ABF6F/">region_map</a>&lt;access_front&gt; <b>last_writers</b></dt><dd>in buffer coordinates</dd><dt class="is-family-code" id="var_last_concurrent_accesses" data-member-name="last_concurrent_accesses">  <a href="/docs/api/records/42DEA3E8277ABF6F/">region_map</a>&lt;access_front&gt; <b>last_concurrent_accesses</b></dt><dd>in buffer coordinates</dd></dl><h2>Member Function Overview</h2><ul><li class="is-family-code"><a href="#9EB63558589BE2A5"><b>apply_epoch</b></a>(instruction * epoch) &rarr; void</li><li class="is-family-code"><a href="#7D3396CE5EC12FE4"><b>begin_concurrent_writes</b></a>(const region&lt;3&gt; &amp; region) &rarr; void</li><li class="is-family-code"><a href="#7787056585BB9F5C"><b>buffer_allocation_state</b></a>(allocation_id aid, alloc_instruction * ainstr, const detail::box&lt;3&gt; &amp; allocated_box, const range&lt;3&gt; &amp; buffer_range) &rarr; explicit</li><li class="is-family-code"><a href="#B645B82045AD0929"><b>track_atomic_write</b></a>(const region&lt;3&gt; &amp; region, instruction * instr) &rarr; void</li><li class="is-family-code"><a href="#B2003974BFE40F09"><b>track_concurrent_read</b></a>(const region&lt;3&gt; &amp; region, instruction * instr) &rarr; void</li><li class="is-family-code"><a href="#33033D2C06872CC8"><b>track_concurrent_write</b></a>(const region&lt;3&gt; &amp; region, instruction * instr) &rarr; void</li></ul><h2>Member Functions</h2><h3 id="9EB63558589BE2A5" data-function-name="apply_epoch"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#9EB63558589BE2A5">\xb6</a><code class="hdoc-function-code language-cpp">void apply_epoch(<a href="/docs/api/records/406117B5A814B8B4/">instruction</a>* epoch)</code></pre></h3><h4>Description</h4><p><p>Replace all tracked instructions that older than <code>epoch</code> with <code>epoch</code>.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/instruction_graph_generator.cc#L317">src/instruction_graph_generator.cc:317</a></p><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/406117B5A814B8B4/">instruction</a>*<b> epoch</b></dt></dl><hr class="member-fun-separator"></hr><h3 id="7D3396CE5EC12FE4" data-function-name="begin_concurrent_writes"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#7D3396CE5EC12FE4">\xb6</a><code class="hdoc-function-code language-cpp">void begin_concurrent_writes(\n    const <a href="/docs/api/records/A3975FE869EB8647/">region</a>&lt;3&gt;&amp; region)</code></pre></h3><h4>Description</h4><p><p>Replace the current access front with an empty write-front. This is done in preparation of writes from device kernels and host tasks.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/instruction_graph_generator.cc#L296">src/instruction_graph_generator.cc:296</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/A3975FE869EB8647/">region</a>&lt;3&gt;&amp;<b> region</b></dt></dl><hr class="member-fun-separator"></hr><h3 id="7787056585BB9F5C" data-function-name="buffer_allocation_state"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#7787056585BB9F5C">\xb6</a><code class="hdoc-function-code language-cpp">explicit buffer_allocation_state(\n    <a href="/docs/api/records/1824FC8BEBAA39C7/">allocation_id</a> aid,\n    <a href="/docs/api/records/257C21129DAD63BF/">alloc_instruction</a>* ainstr,\n    const <a href="/docs/api/records/A87962C2586A4E24/">detail::box</a>&lt;3&gt;&amp; allocated_box,\n    const <a href="/docs/api/records/B13622E7024342AF/">range</a>&lt;3&gt;&amp; buffer_range)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/instruction_graph_generator.cc#L268">src/instruction_graph_generator.cc:268</a></p><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/1824FC8BEBAA39C7/">allocation_id</a><b> aid</b></dt><dt class="is-family-code"><a href="/docs/api/records/257C21129DAD63BF/">alloc_instruction</a>*<b> ainstr</b></dt><dt class="is-family-code">const <a href="/docs/api/records/A87962C2586A4E24/">detail::box</a>&lt;3&gt;&amp;<b> allocated_box</b></dt><dt class="is-family-code">const <a href="/docs/api/records/B13622E7024342AF/">range</a>&lt;3&gt;&amp;<b> buffer_range</b></dt></dl><hr class="member-fun-separator"></hr><h3 id="B645B82045AD0929" data-function-name="track_atomic_write"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#B645B82045AD0929">\xb6</a><code class="hdoc-function-code language-cpp">void track_atomic_write(const <a href="/docs/api/records/A3975FE869EB8647/">region</a>&lt;3&gt;&amp; region,\n                        <a href="/docs/api/records/406117B5A814B8B4/">instruction</a>* instr)</code></pre></h3><h4>Description</h4><p><p>Replace the current access front with a write. The write is treated as &quot;atomic&quot; in the sense that there is never a second, concurrent write operation happening simultaneously. This is true for all writes except those from device kernels and host tasks, which might specify overlapping write-accessors.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/instruction_graph_generator.cc#L289">src/instruction_graph_generator.cc:289</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/A3975FE869EB8647/">region</a>&lt;3&gt;&amp;<b> region</b></dt><dt class="is-family-code"><a href="/docs/api/records/406117B5A814B8B4/">instruction</a>*<b> instr</b></dt></dl><hr class="member-fun-separator"></hr><h3 id="B2003974BFE40F09" data-function-name="track_concurrent_read"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#B2003974BFE40F09">\xb6</a><code class="hdoc-function-code language-cpp">void track_concurrent_read(\n    const <a href="/docs/api/records/A3975FE869EB8647/">region</a>&lt;3&gt;&amp; region,\n    <a href="/docs/api/records/406117B5A814B8B4/">instruction</a>* instr)</code></pre></h3><h4>Description</h4><p><p>Add <code>instr</code> to the active set of concurrent reads, or replace the current access front if the last access was not a read.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/instruction_graph_generator.cc#L275">src/instruction_graph_generator.cc:275</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/A3975FE869EB8647/">region</a>&lt;3&gt;&amp;<b> region</b></dt><dt class="is-family-code"><a href="/docs/api/records/406117B5A814B8B4/">instruction</a>*<b> instr</b></dt></dl><hr class="member-fun-separator"></hr><h3 id="33033D2C06872CC8" data-function-name="track_concurrent_write"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#33033D2C06872CC8">\xb6</a><code class="hdoc-function-code language-cpp">void track_concurrent_write(\n    const <a href="/docs/api/records/A3975FE869EB8647/">region</a>&lt;3&gt;&amp; region,\n    <a href="/docs/api/records/406117B5A814B8B4/">instruction</a>* instr)</code></pre></h3><h4>Description</h4><p><p>Add an instruction to the current set of concurrent writes. This is used to track writes from device kernels and host tasks and requires begin_concurrent_writes to be called beforehand. Multiple concurrent writes will only occur when a task declares overlapping writes and overlapping-write detection is disabled via the error policy. In order to still produce an executable (albeit racy instruction graph) in that case, we track multiple last-writers for the same buffer element.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/instruction_graph_generator.cc#L306">src/instruction_graph_generator.cc:306</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/A3975FE869EB8647/">region</a>&lt;3&gt;&amp;<b> region</b></dt><dt class="is-family-code"><a href="/docs/api/records/406117B5A814B8B4/">instruction</a>*<b> instr</b></dt></dl><hr class="member-fun-separator"></hr></main></div></div></div></section></div><footer class="footer"><p>Documentation for Celerity 0.6.0.</p><p>Generated by <a href="https://github.com/PeterTh/hdoc">&#129388;doc</a> version 1.5-internal on 2024-08-13T12:22:54 UTC.</p><p class="has-text-grey-light">19AD43E11B2996</p></footer></body></html>',s={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"struct buffer_allocation_state"},o=void 0,n={id:"api/records/A9233FB7C525B6CC",title:"struct buffer_allocation_state",description:"",source:"@site/celerity-runtime/docs/api/records/A9233FB7C525B6CC.mdx",sourceDirName:"api/records",slug:"/api/records/A9233FB7C525B6CC",permalink:"/docs/api/records/A9233FB7C525B6CC",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"struct buffer_allocation_state"},sidebar:"api"},l={},d=[];function p(e){const{Head:a}={...(0,c.R)(),...e.components};return a||function(e,a){throw new Error("Expected "+(a?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(a,{children:[(0,t.jsx)("script",{src:"/js/highlight.min.js"}),(0,t.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,t.jsx)("div",{dangerouslySetInnerHTML:{__html:i}})]})}function h(e={}){const{wrapper:a}={...(0,c.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},28453:(e,a,r)=>{r.d(a,{R:()=>s,x:()=>o});var t=r(96540);const c={},i=t.createContext(c);function s(e){const a=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),t.createElement(i.Provider,{value:a},e.children)}}}]);