"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[66800],{453:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>n,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var a=s(74848),c=s(28453);const i='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li class="is-active"><a aria-current="page47024B59D846DAA2"><span>class distr_queue</span></a></li></ul></nav>\n<main><h1>class distr_queue</h1><h2>Declaration</h2><pre class="p-0"><code class="hdoc-record-code language-cpp">class distr_queue { /* full declaration omitted */ };</code></pre><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/distr_queue.h#L29">include/distr_queue.h:29</a></p></aside><section><h2>Member Variables</h2><dl><dt class="is-family-code hdoc-private" id="var_m_tracker" data-member-name="m_tracker">  <a href="https://en.cppreference.com/w/cpp/memory/shared_ptr">std::shared_ptr</a>&lt;tracker&gt; <b>m_tracker</b></dt></dl></section><section><h2>Member Function Overview</h2><ul><li class="is-family-code"><a href="#79BB3A8CEFFDA548"><b>distr_queue</b></a>()</li><li class="is-family-code"><a href="#2755451A5CD696A6"><b>distr_queue</b></a>(const std::vector&lt;sycl::device&gt; &amp; devices)</li><li class="is-family-code"><span class="hdoc-overview-template">template &lt;typename DeviceSelector&gt;</span><br><a href="#26F04874BEAC6E36"><b>distr_queue</b></a>(const DeviceSelector &amp; device_selector)</li><li class="is-family-code"><span class="hdoc-overview-template">template &lt;typename T&gt;</span><br><a href="#CE2554643DC7BADE"><b>fence</b></a>(const experimental::host_object&lt;T&gt; &amp; obj) &rarr; [[nodiscard]] std::future&lt;T&gt;</li><li class="is-family-code"><span class="hdoc-overview-template">template &lt;typename DataT, int Dims&gt;</span><br><a href="#3B85F776B0CD4218"><b>fence</b></a>(const buffer&lt;DataT, Dims&gt; &amp; buf, const subrange&lt;Dims&gt; &amp; sr) &rarr; [[nodiscard]] std::future&lt;buffer_snapshot&lt;DataT, Dims&gt;&gt;</li><li class="is-family-code"><span class="hdoc-overview-template">template &lt;typename DataT, int Dims&gt;</span><br><a href="#1F6B6B963E5ABF3A"><b>fence</b></a>(const buffer&lt;DataT, Dims&gt; &amp; buf) &rarr; [[nodiscard]] std::future&lt;buffer_snapshot&lt;DataT, Dims&gt;&gt;</li><li class="is-family-code"><a href="#19FC6D68C2E679DC"><b>slow_full_sync</b></a>() &rarr; void</li><li class="is-family-code"><span class="hdoc-overview-template">template &lt;typename CGF&gt;</span><br><a href="#BB0085E98E1E1781"><b>submit</b></a>(allow_by_ref_t, CGF cgf) &rarr; void</li><li class="is-family-code"><span class="hdoc-overview-template">template &lt;typename CGF&gt;</span><br><a href="#5883AECF11D6FD52"><b>submit</b></a>(CGF cgf) &rarr; void</li><li class="is-family-code hdoc-private"><a href="#BCBF9BECD0A0220F"><b>distr_queue</b></a>(ctor_internal_tag, const detail::devices_or_selector &amp; devices_or_selector)</li></ul></section><section><h2>Member Functions</h2><section><h3 id="79BB3A8CEFFDA548" data-function-name="distr_queue"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#79BB3A8CEFFDA548">\xb6</a><code class="hdoc-function-code language-cpp">distr_queue()</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/distr_queue.h#L31">include/distr_queue.h:31</a></p></aside></section><hr class="member-fun-separator"></hr><section><h3 id="2755451A5CD696A6" data-function-name="distr_queue"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#2755451A5CD696A6">\xb6</a><code class="hdoc-function-code language-cpp">distr_queue(\n    const <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;sycl::device&gt;&amp; devices)</code></pre></h3><section><h4>Description</h4><p><p>Creates a distr_queue and instructs it to use a particular set of devices.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/distr_queue.h#L39">include/distr_queue.h:39</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;sycl::device&gt;&amp;<b> devices</b></dt><dd>The devices to be used on the current node. This can vary between nodes. If there are multiple nodes running on the same host, the list of devices must be the same across nodes on the same host.</dd></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="26F04874BEAC6E36" data-function-name="distr_queue"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#26F04874BEAC6E36">\xb6</a><code class="hdoc-function-code language-cpp">template &lt;typename DeviceSelector&gt;\ndistr_queue(const DeviceSelector&amp; device_selector)</code></pre></h3><section><h4>Description</h4><p><p>Creates a distr_queue and instructs it to use a particular set of devices.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/distr_queue.h#L48">include/distr_queue.h:48</a></p></aside><section><h4>Template Parameters</h4><dl><dt class="is-family-code"><b> DeviceSelector</b></dt></dl></section><section><h4>Parameters</h4><dl><dt class="is-family-code">const DeviceSelector&amp;<b> device_selector</b></dt><dd>The device selector to be used on the current node. This can vary between nodes. If there are multiple nodes running on the same host, the selector must be the same across nodes on the same host.</dd></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="CE2554643DC7BADE" data-function-name="fence"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#CE2554643DC7BADE">\xb6</a><code class="hdoc-function-code language-cpp">template &lt;typename T&gt;\n[[nodiscard]] <a href="https://en.cppreference.com/w/cpp/thread/future">std::future</a>&lt;T&gt; fence(\n    const experimental::host_object&lt;T&gt;&amp; obj)</code></pre></h3><section><h4>Description</h4><p><p>Asynchronously captures the value of a host object by copy, introducing the same dependencies as a side-effect would. Waiting on the returned future in the application thread can stall scheduling of more work. To hide latency, either submit more command groups between fence and wait operations or ensure that other independent command groups are eligible to run while the fence is executed.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/distr_queue.h#L91">include/distr_queue.h:91</a></p></aside><section><h4>Template Parameters</h4><dl><dt class="is-family-code"><b> T</b></dt></dl></section><section><h4>Parameters</h4><dl><dt class="is-family-code">const experimental::host_object&lt;T&gt;&amp;<b> obj</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="3B85F776B0CD4218" data-function-name="fence"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#3B85F776B0CD4218">\xb6</a><code class="hdoc-function-code language-cpp">template &lt;typename DataT, int Dims&gt;\n[[nodiscard]] <a href="https://en.cppreference.com/w/cpp/thread/future">std::future</a>&lt;\n    buffer_snapshot&lt;DataT, Dims&gt;&gt;\nfence(const buffer&lt;DataT, Dims&gt;&amp; buf,\n      const subrange&lt;Dims&gt;&amp; sr)</code></pre></h3><section><h4>Description</h4><p><p>Asynchronously captures the contents of a buffer subrange, introducing the same dependencies as a read-accessor would. Waiting on the returned future in the application thread can stall scheduling of more work. To hide latency, either submit more command groups between fence and wait operations or ensure that other independent command groups are eligible to run while the fence is executed.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/distr_queue.h#L100">include/distr_queue.h:100</a></p></aside><section><h4>Template Parameters</h4><dl><dt class="is-family-code"><b> DataT</b></dt><dt class="is-family-code">int<b> Dims</b></dt></dl></section><section><h4>Parameters</h4><dl><dt class="is-family-code">const buffer&lt;DataT, Dims&gt;&amp;<b> buf</b></dt><dt class="is-family-code">const subrange&lt;Dims&gt;&amp;<b> sr</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="1F6B6B963E5ABF3A" data-function-name="fence"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#1F6B6B963E5ABF3A">\xb6</a><code class="hdoc-function-code language-cpp">template &lt;typename DataT, int Dims&gt;\n[[nodiscard]] <a href="https://en.cppreference.com/w/cpp/thread/future">std::future</a>&lt;\n    buffer_snapshot&lt;DataT, Dims&gt;&gt;\nfence(const buffer&lt;DataT, Dims&gt;&amp; buf)</code></pre></h3><section><h4>Description</h4><p><p>Asynchronously captures the contents of an entire buffer, introducing the same dependencies as a read-accessor would. Waiting on the returned future in the application thread can stall scheduling of more work. To hide latency, either submit more command groups between fence and wait operations or ensure that other independent command groups are eligible to run while the fence is executed.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/distr_queue.h#L109">include/distr_queue.h:109</a></p></aside><section><h4>Template Parameters</h4><dl><dt class="is-family-code"><b> DataT</b></dt><dt class="is-family-code">int<b> Dims</b></dt></dl></section><section><h4>Parameters</h4><dl><dt class="is-family-code">const buffer&lt;DataT, Dims&gt;&amp;<b> buf</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="19FC6D68C2E679DC" data-function-name="slow_full_sync"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#19FC6D68C2E679DC">\xb6</a><code class="hdoc-function-code language-cpp">void slow_full_sync()</code></pre></h3><section><h4>Description</h4><p><p>Fully syncs the entire system.</p>\n</p><p><p>This function is intended for incremental development and debugging. In production, it should only be used at very coarse granularity (second scale).</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/distr_queue.h#L78">include/distr_queue.h:78</a></p></aside></section><hr class="member-fun-separator"></hr><section><h3 id="BB0085E98E1E1781" data-function-name="submit"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#BB0085E98E1E1781">\xb6</a><code class="hdoc-function-code language-cpp">template &lt;typename CGF&gt;\nvoid submit(<a href="/docs/api/records/9CC2C6A4553ECB15/">allow_by_ref_t</a>, CGF cgf)</code></pre></h3><section><h4>Description</h4><p><p>Submits a command group to the queue. Invoke via <code>q.submit(celerity::allow_by_ref, [ &amp; ](celerity::handler  &amp;cgh ) {...})</code>.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/distr_queue.h#L56">include/distr_queue.h:56</a></p></aside><section><h4>Template Parameters</h4><dl><dt class="is-family-code"><b> CGF</b></dt></dl></section><section><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/9CC2C6A4553ECB15/">allow_by_ref_t</a><b> </b></dt><dt class="is-family-code">CGF<b> cgf</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="5883AECF11D6FD52" data-function-name="submit"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#5883AECF11D6FD52">\xb6</a><code class="hdoc-function-code language-cpp">template &lt;typename CGF&gt;\nvoid submit(CGF cgf)</code></pre></h3><section><h4>Description</h4><p><p>Submits a command group to the queue.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/distr_queue.h#L64">include/distr_queue.h:64</a></p></aside><section><h4>Template Parameters</h4><dl><dt class="is-family-code"><b> CGF</b></dt></dl></section><section><h4>Parameters</h4><dl><dt class="is-family-code">CGF<b> cgf</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="BCBF9BECD0A0220F" data-function-name="distr_queue"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#BCBF9BECD0A0220F">\xb6</a><code class="hdoc-function-code language-cpp">distr_queue(<a href="/docs/api/records/E8988B4BD04C88B1/">ctor_internal_tag</a>,\n            const detail::devices_or_selector&amp;\n                devices_or_selector)</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/distr_queue.h#L154">include/distr_queue.h:154</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/records/E8988B4BD04C88B1/">ctor_internal_tag</a><b> </b></dt><dt class="is-family-code">const detail::devices_or_selector&amp;<b> devices_or_selector</b></dt></dl></section></section><hr class="member-fun-separator"></hr></section></main>',r={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class distr_queue"},n=void 0,o={id:"api/records/47024B59D846DAA2",title:"class distr_queue",description:"",source:"@site/celerity-runtime/docs/api/records/47024B59D846DAA2.mdx",sourceDirName:"api/records",slug:"/api/records/47024B59D846DAA2",permalink:"/docs/api/records/47024B59D846DAA2",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class distr_queue"},sidebar:"api"},d={},l=[];function p(e){const{Head:t}={...(0,c.R)(),...e.components};return t||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t,{children:[(0,a.jsx)("script",{src:"/js/highlight.min.js"}),(0,a.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:i}})]})}function u(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>n});var a=s(96540);const c={},i=a.createContext(c);function r(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function n(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);