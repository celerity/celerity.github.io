"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[61753],{14242:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=i(74848),s=i(28453);const n='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#06885D8AE2CD6C63"><span>namespace detail</span></a></li><li><a href="/docs/api/records/168797E532D55862/"><span>class mpi_communicator</span></a></li><li class="is-active"><a aria-current="page5A48F43AE86D2B48"><span>struct mpi_communicator::in_flight_pilot</span></a></li></ul></nav>\n<main><h1>struct mpi_communicator::in_flight_pilot</h1><h2>Declaration</h2><pre class="p-0"><code class="hdoc-record-code language-cpp">struct mpi_communicator::in_flight_pilot { /* full declaration omitted */ };</code></pre><h2>Description</h2><p><p>Keeps a stable pointer to a <code>pilot_message</code> alive during an asynchronous pilot send / receive operation.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/mpi_communicator.h#L55">include/mpi_communicator.h:55</a></p><h2>Member Variables</h2><dl><dt class="is-family-code" id="var_message" data-member-name="message">  <a href="https://en.cppreference.com/w/cpp/memory/unique_ptr">std::unique_ptr</a>&lt;pilot_message&gt; <b>message</b></dt><dt class="is-family-code" id="var_request" data-member-name="request">  MPI_Request <b>request</b> = (static_cast&lt;ompi_request_t *&gt;(static_cast&lt;void *&gt;(&amp;(ompi_request_null))))</dt></dl></main>',r={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"struct mpi_communicator::in_flight_pilot"},c=void 0,o={id:"api/records/5A48F43AE86D2B48",title:"struct mpi_communicator::in_flight_pilot",description:"",source:"@site/celerity-runtime/docs/api/records/5A48F43AE86D2B48.mdx",sourceDirName:"api/records",slug:"/api/records/5A48F43AE86D2B48",permalink:"/docs/api/records/5A48F43AE86D2B48",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"struct mpi_communicator::in_flight_pilot"},sidebar:"api"},l={},p=[];function d(e){const{Head:t}={...(0,s.R)(),...e.components};return t||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t,{children:[(0,a.jsx)("script",{src:"/js/highlight.min.js"}),(0,a.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:n}})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>c});var a=i(96540);const s={},n=a.createContext(s);function r(e){const t=a.useContext(n);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(n.Provider,{value:t},e.children)}}}]);