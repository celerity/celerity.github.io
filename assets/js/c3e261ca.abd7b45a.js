"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[44535],{25145:(e,a,s)=>{s.r(a),s.d(a,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>c,metadata:()=>o,toc:()=>d});var t=s(74848),n=s(28453);const i='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#06885D8AE2CD6C63"><span>namespace detail</span></a></li><li class="is-active"><a aria-current="pageDBE63D9D086598BC"><span>struct node_id</span></a></li></ul></nav>\n<main><h1>struct node_id</h1><h2>Declaration</h2><pre class="p-0"><code class="hdoc-record-code language-cpp">struct node_id { /* full declaration omitted */ };</code></pre><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/types.h#L39">include/types.h:39</a></p></aside><section><h2>Member Variables</h2><dl><dt class="is-family-code" id="var_value" data-member-name="value">  size_t <b>value</b></dt></dl></section><section><h2>Member Aliases</h2><ul><li class="is-family-code">using value_type = size_t;</li></ul></section><section><h2>Member Function Overview</h2><ul><li class="is-family-code"><a href="#AA73F4EA40C8A2A1"><b>node_id</b></a>()</li><li class="is-family-code"><a href="#93D583E949DCA797"><b>node_id</b></a>(value_type value) &rarr; constexpr</li><li class="is-family-code"><a href="#F0D649F884906538"><b>operator const unsigned long &amp;</b></a>() const &rarr; constexpr</li><li class="is-family-code"><a href="#11981F50975C68E0"><b>operator unsigned long &amp;</b></a>() &rarr; constexpr</li></ul></section><section><h2>Member Functions</h2><section><h3 id="AA73F4EA40C8A2A1" data-function-name="node_id"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#AA73F4EA40C8A2A1">\xb6</a><code class="hdoc-function-code language-cpp">node_id()</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/types.h#L39">include/types.h:39</a></p></aside></section><hr class="member-fun-separator"></hr><section><h3 id="93D583E949DCA797" data-function-name="node_id"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#93D583E949DCA797">\xb6</a><code class="hdoc-function-code language-cpp">constexpr node_id(value_type value)</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/types.h#L39">include/types.h:39</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code">value_type<b> value</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="F0D649F884906538" data-function-name="operator const unsigned long &amp;"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#F0D649F884906538">\xb6</a><code class="hdoc-function-code language-cpp">constexpr operator const unsigned long&amp;() const</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/types.h#L29">include/types.h:29</a></p></aside></section><hr class="member-fun-separator"></hr><section><h3 id="11981F50975C68E0" data-function-name="operator unsigned long &amp;"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#11981F50975C68E0">\xb6</a><code class="hdoc-function-code language-cpp">constexpr operator unsigned long&amp;()</code></pre></h3><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/types.h#L28">include/types.h:28</a></p></aside></section><hr class="member-fun-separator"></hr></section></main>',c={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"struct node_id"},r=void 0,o={id:"api/records/DBE63D9D086598BC",title:"struct node_id",description:"",source:"@site/celerity-runtime/docs/api/records/DBE63D9D086598BC.mdx",sourceDirName:"api/records",slug:"/api/records/DBE63D9D086598BC",permalink:"/docs/api/records/DBE63D9D086598BC",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"struct node_id"},sidebar:"api"},l={},d=[];function p(e){const{Head:a}={...(0,n.R)(),...e.components};return a||function(e,a){throw new Error("Expected "+(a?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(a,{children:[(0,t.jsx)("script",{src:"/js/highlight.min.js"}),(0,t.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,t.jsx)("div",{dangerouslySetInnerHTML:{__html:i}})]})}function u(e={}){const{wrapper:a}={...(0,n.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},28453:(e,a,s)=>{s.d(a,{R:()=>c,x:()=>r});var t=s(96540);const n={},i=t.createContext(n);function c(e){const a=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:c(e.components),t.createElement(i.Provider,{value:a},e.children)}}}]);