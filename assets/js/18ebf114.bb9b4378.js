"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[59685],{34656:(e,c,t)=>{t.r(c),t.d(c,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var n=t(74848),a=t(28453);const s='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#06885D8AE2CD6C63"><span>namespace detail</span></a></li><li class="is-active"><a aria-current="page3BF7465D09848DAC"><span>function make_sycl_backend</span></a></li></ul></nav>\n<main><section><h3 id="3BF7465D09848DAC" data-function-name="make_sycl_backend"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#3BF7465D09848DAC">\xb6</a><code class="hdoc-function-code language-cpp"><a href="https://en.cppreference.com/w/cpp/memory/unique_ptr">std::unique_ptr</a>&lt;backend&gt; make_sycl_backend(\n    <a href="/docs/api/enums/433361054E0BC8BC/">sycl_backend_type</a> type,\n    const <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;sycl::device&gt;&amp; devices,\n    bool enable_profiling)</code></pre></h3><section><h4>Description</h4><p><p>Creates a SYCL backend instance of the specified type with the devices listed. Requires that Celerity has been compiled with the given backend and all devices are compatible with it. If <code>enable_profiling</code> is true, events for asynchronous operations will report native execution times.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/src/backend/sycl_backend.cc#L282">src/backend/sycl_backend.cc:282</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/enums/433361054E0BC8BC/">sycl_backend_type</a><b> type</b></dt><dt class="is-family-code">const <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;sycl::device&gt;&amp;<b> devices</b></dt><dt class="is-family-code">bool<b> enable_profiling</b></dt></dl></section></section><hr class="member-fun-separator"></hr><section><h3 id="ADBA7E957505CA0B" data-function-name="make_sycl_backend"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#ADBA7E957505CA0B">\xb6</a><code class="hdoc-function-code language-cpp"><a href="https://en.cppreference.com/w/cpp/memory/unique_ptr">std::unique_ptr</a>&lt;backend&gt; make_sycl_backend(\n    <a href="/docs/api/enums/433361054E0BC8BC/">sycl_backend_type</a> type,\n    const <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;sycl::device&gt;&amp; devices,\n    bool enable_profiling)</code></pre></h3><section><h4>Description</h4><p><p>Creates a SYCL backend instance of the specified type with the devices listed. Requires that Celerity has been compiled with the given backend and all devices are compatible with it. If <code>enable_profiling</code> is true, events for asynchronous operations will report native execution times.</p>\n</p></section><aside><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/backend/sycl_backend.h#L132">include/backend/sycl_backend.h:132</a></p></aside><section><h4>Parameters</h4><dl><dt class="is-family-code"><a href="/docs/api/enums/433361054E0BC8BC/">sycl_backend_type</a><b> type</b></dt><dt class="is-family-code">const <a href="https://en.cppreference.com/w/cpp/container/vector">std::vector</a>&lt;sycl::device&gt;&amp;<b> devices</b></dt><dt class="is-family-code">bool<b> enable_profiling</b></dt></dl></section></section><hr class="member-fun-separator"></hr></main>',i={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"function make_sycl_backend"},r=void 0,o={id:"api/functions/celerity_detail-make_sycl_backend",title:"function make_sycl_backend",description:"",source:"@site/celerity-runtime/docs/api/functions/celerity_detail-make_sycl_backend.mdx",sourceDirName:"api/functions",slug:"/api/functions/celerity_detail-make_sycl_backend",permalink:"/docs/api/functions/celerity_detail-make_sycl_backend",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"function make_sycl_backend"},sidebar:"api"},l={},d=[];function p(e){const{Head:c}={...(0,a.R)(),...e.components};return c||function(e,c){throw new Error("Expected "+(c?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(c,{children:[(0,n.jsx)("script",{src:"/js/highlight.min.js"}),(0,n.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,n.jsx)("div",{dangerouslySetInnerHTML:{__html:s}})]})}function m(e={}){const{wrapper:c}={...(0,a.R)(),...e.components};return c?(0,n.jsx)(c,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},28453:(e,c,t)=>{t.d(c,{R:()=>i,x:()=>r});var n=t(96540);const a={},s=n.createContext(a);function i(e){const c=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(c):{...c,...e}}),[c,e])}function r(e){let c;return c=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(s.Provider,{value:c},e.children)}}}]);