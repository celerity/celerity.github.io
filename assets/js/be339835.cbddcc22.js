"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[86257],{83862:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>p,toc:()=>l});var n=i(74848),a=i(28453);const s='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#06885D8AE2CD6C63"><span>namespace detail</span></a></li><li><a href="/docs/api/namespaces/#A16ACF3ACAFB4303"><span>namespace utils</span></a></li><li class="is-active"><a aria-current="pageA5C97A9E1BDD67F6"><span>function get_simplified_type_name_from_pointer</span></a></li></ul></nav>\n<main><h3 id="A5C97A9E1BDD67F6" data-function-name="get_simplified_type_name_from_pointer"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#A5C97A9E1BDD67F6">\xb6</a><code class="hdoc-function-code language-cpp"><a href="https://en.cppreference.com/w/cpp/string/basic_string">std::string</a> get_simplified_type_name_from_pointer(\n    const std::type_info&amp; pointer_type_info)</code></pre></h3><h4>Description</h4><p><p>Fiddles out the base name of a (possibly templated) struct or class from a full (possibly mangled) type name. The input parameter should be <code>typeid(Struct*)</code>, i.e. a <em>pointer</em> to the desired struct type.</p>\n</p><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/utils.h#L128">include/utils.h:128</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const std::type_info&amp;<b> pointer_type_info</b></dt></dl><hr class="member-fun-separator"></hr></main>',r={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"function get_simplified_type_name_from_pointer"},o=void 0,p={id:"api/functions/celerity_detail_utils-get_simplified_type_name_from_pointer",title:"function get_simplified_type_name_from_pointer",description:"",source:"@site/celerity-runtime/docs/api/functions/celerity_detail_utils-get_simplified_type_name_from_pointer.mdx",sourceDirName:"api/functions",slug:"/api/functions/celerity_detail_utils-get_simplified_type_name_from_pointer",permalink:"/docs/api/functions/celerity_detail_utils-get_simplified_type_name_from_pointer",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"function get_simplified_type_name_from_pointer"},sidebar:"api"},c={},l=[];function d(e){const{Head:t}={...(0,a.R)(),...e.components};return t||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t,{children:[(0,n.jsx)("script",{src:"/js/highlight.min.js"}),(0,n.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,n.jsx)("div",{dangerouslySetInnerHTML:{__html:s}})]})}function m(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>o});var n=i(96540);const a={},s=n.createContext(a);function r(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);