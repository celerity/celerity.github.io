"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[86765],{41299:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>a,frontMatter:()=>s,metadata:()=>d,toc:()=>c});var i=t(74848),r=t(28453);const s={id:"platform-support",title:"Officially Supported Platforms",sidebar_label:"Platform Support"},l=void 0,d={id:"platform-support",title:"Officially Supported Platforms",description:"The most recent version of Celerity aims to support the following environments.",source:"@site/celerity-runtime/docs/platform-support.md",sourceDirName:".",slug:"/platform-support",permalink:"/docs/platform-support",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Fabian Knorr",lastUpdatedAt:1723021792e3,frontMatter:{id:"platform-support",title:"Officially Supported Platforms",sidebar_label:"Platform Support"},sidebar:"docs",previous:{title:"Core Principles",permalink:"/docs/core-principles"}},o={},c=[{value:"SYCL Implementations",id:"sycl-implementations",level:2},{value:"MPI Implementations",id:"mpi-implementations",level:2},{value:"Continuously Tested Configurations",id:"continuously-tested-configurations",level:2}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"The most recent version of Celerity aims to support the following environments."}),"\n",(0,i.jsx)(n.h2,{id:"sycl-implementations",children:"SYCL Implementations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["AdaptiveCpp (formerly hipSYCL) \u2265 revision ",(0,i.jsx)(n.a,{href:"https://github.com/AdaptiveCpp/AdaptiveCpp/tree/v24.06.0",children:(0,i.jsx)(n.code,{children:"v24.06.0"})}),", with","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"CUDA \u2265 11.0"}),"\n",(0,i.jsx)(n.li,{children:"Clang \u2265 14.0 for CUDA < 12.0, Clang \u2265 16.0 for CUDA \u2265 12.0"}),"\n",(0,i.jsxs)(n.li,{children:["on NVIDIA hardware with compute capability \u2265 7.0 (",(0,i.jsx)(n.code,{children:"-DACPP_TARGETS=cuda:*"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["or on CPUs via OpenMP (",(0,i.jsx)(n.code,{children:"-DACPP_TARGETS=omp"}),", implicit)"]}),"\n",(0,i.jsxs)(n.li,{children:["the ",(0,i.jsx)(n.code,{children:"generic"})," SSCP target cannot be supported yet and must be disabled when building Celerity applications."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["DPC++ \u2265 revision ",(0,i.jsx)(n.a,{href:"https://github.com/intel/llvm/commit/89327e0a",children:(0,i.jsx)(n.code,{children:"89327e0a"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/intel/compute-runtime",children:"Intel Compute Runtime"})," \u2265 24.13.29138.7"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/oneapi-src/level-zero",children:"oneAPI Level Zero"})," \u2265 1.17.0"]}),"\n",(0,i.jsx)(n.li,{children:"on integrated and dedicated Intel GPUs"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["SimSYCL ",(0,i.jsx)(n.a,{href:"https://github.com/celerity/SimSYCL",children:"HEAD"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Other hardware or backend configurations might work, but have not been tested or verified."}),"\n",(0,i.jsx)(n.p,{children:"ComputeCpp is no longer supported since its discontinuation."}),"\n",(0,i.jsx)(n.h2,{id:"mpi-implementations",children:"MPI Implementations"}),"\n",(0,i.jsx)(n.p,{children:"Even though we primarily test with OpenMPI, Celerity should be compatible with any MPI 2 implementation."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["Note that the latest version of Celerity breaks with OpenMPI < 4.0.2 due to\n",(0,i.jsxs)(n.a,{href:"https://docs.open-mpi.org/en/main/release-notes/changelog/v4.0.x.html#open-mpi-version-4-0-2",children:["a known bug around ",(0,i.jsx)(n.code,{children:"mpi_assert_allow_overtaking"})]}),".\nMake sure to upgrade your version of OpenMPI if you're currently running 4.0.1 or older."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"continuously-tested-configurations",children:"Continuously Tested Configurations"}),"\n",(0,i.jsx)(n.p,{children:"We automatically verify Celerity's build process and test suites against a select number of system configurations."}),"\n",(0,i.jsx)(n.p,{children:"Those are (CRT = Intel Compute Runtime, L0 = oneAPI Level Zero):"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"SYCL"}),(0,i.jsx)(n.th,{children:"SYCL version"}),(0,i.jsx)(n.th,{children:"OS"}),(0,i.jsx)(n.th,{children:"GPU"}),(0,i.jsx)(n.th,{children:"Build type"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"DPC++"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.a,{href:"https://github.com/intel/llvm/tree/89327e0a",children:(0,i.jsx)(n.code,{children:"89327e0a"})})," (CRT 24.13.29138.7, L0 1.17.0)"]}),(0,i.jsx)(n.td,{children:"Ubuntu 22.04"}),(0,i.jsx)(n.td,{children:"Intel Arc A770"}),(0,i.jsx)(n.td,{children:"Debug, Release"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"DPC++"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.a,{href:"https://github.com/intel/llvm/",children:(0,i.jsx)(n.code,{children:"HEAD"})})," (CRT 24.13.29138.7, L0 1.17.0)"]}),(0,i.jsx)(n.td,{children:"Ubuntu 24.04"}),(0,i.jsx)(n.td,{children:"Intel Arc A770"}),(0,i.jsx)(n.td,{children:"Debug, Release"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"AdaptiveCpp"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.a,{href:"https://github.com/AdaptiveCpp/AdaptiveCpp/tree/v24.06.0",children:(0,i.jsx)(n.code,{children:"v24.06.0"})})," (Clang 14.0, CUDA 11.8.0)"]}),(0,i.jsx)(n.td,{children:"Ubuntu 22.04"}),(0,i.jsx)(n.td,{children:"NVIDIA RTX 2070"}),(0,i.jsx)(n.td,{children:"Debug, Release"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"AdaptiveCpp"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.a,{href:"https://github.com/AdaptiveCpp/AdaptiveCpp",children:(0,i.jsx)(n.code,{children:"HEAD"})})," (Clang 18.0, CUDA 12.5.0)*"]}),(0,i.jsx)(n.td,{children:"Ubuntu 24.04"}),(0,i.jsx)(n.td,{children:"NVIDIA RTX 2070"}),(0,i.jsx)(n.td,{children:"Debug, Release"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"SimSYCL"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.a,{href:"https://github.com/celerity/SimSYCL",children:(0,i.jsx)(n.code,{children:"HEAD"})})," (GCC 13.2)"]}),(0,i.jsx)(n.td,{children:"Ubuntu 24.04"}),(0,i.jsx)(n.td,{children:"(None)"}),(0,i.jsx)(n.td,{children:"Debug, Release"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"* currently requires a patch for an illegal macro definition in CUDA:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-diff",children:"--- a/include/crt/host_defines.h\t2023-04-03 14:40:16.471254404 +0200\n+++ b/include/crt/host_defines.h\t2023-03-23 22:07:22.000000000 +0100\n@@ -70,7 +70,7 @@\n #define __no_return__ \\\n         __attribute__((noreturn))\n         \n-#if defined(__CUDACC__) || defined(__CUDA_ARCH__) || defined(__CUDA_LIBDEVICE__)\n+#if (defined(__CUDACC__) || defined(__CUDA_ARCH__) || defined(__CUDA_LIBDEVICE__)) && !defined(__clang__)\n /* gcc allows users to define attributes with underscores, \n    e.g., __attribute__((__noinline__)).\n    Consider a non-CUDA source file (e.g. .cpp) that has the \n\n"})})]})}function a(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>d});var i=t(96540);const r={},s=i.createContext(r);function l(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);