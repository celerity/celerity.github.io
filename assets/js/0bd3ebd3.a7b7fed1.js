"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[20628],{89166:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>n,toc:()=>d});var t=r(74848),i=r(28453);const c='<nav class="breadcrumb has-arrow-separator" aria-label="breadcrumbs"><ul><li><a href="/docs/api/namespaces/#95420D3AD49404C0"><span>namespace celerity</span></a></li><li><a href="/docs/api/namespaces/#06885D8AE2CD6C63"><span>namespace detail</span></a></li><li class="is-active"><a aria-current="pageD5D8A02E761474E8"><span>class filter_iterator</span></a></li></ul></nav>\n<main><h1>class filter_iterator</h1><h2>Declaration</h2><pre class="p-0"><code class="hdoc-record-code language-cpp">template &lt;typename Iterator, typename PredicateFn&gt;\nclass filter_iterator { /* full declaration omitted */ };</code></pre><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/command_graph.h#L20">include/command_graph.h:20</a></p><h2>Template Parameters</h2><dl><dt class="is-family-code"><b> Iterator</b></dt><dt class="is-family-code"><b> PredicateFn</b></dt></dl><h2>Member Variables</h2><dl><dt class="is-family-code hdoc-private" id="var_m_it" data-member-name="m_it">  Iterator <b>m_it</b></dt><dt class="is-family-code hdoc-private" id="var_m_end" data-member-name="m_end">  const Iterator <b>m_end</b></dt><dt class="is-family-code hdoc-private" id="var_m_fn" data-member-name="m_fn">  PredicateFn <b>m_fn</b></dt></dl><h2>Member Aliases</h2><ul><li class="is-family-code">using difference_type =\n    typename std::iterator_traits&lt;\n        Iterator&gt;::difference_type;</li><li class="is-family-code">using iterator_category =\n    std::forward_iterator_tag;</li><li class="is-family-code">using pointer = typename std::iterator_traits&lt;\n    Iterator&gt;::pointer;</li><li class="is-family-code">using reference = typename std::iterator_traits&lt;\n    Iterator&gt;::reference;</li><li class="is-family-code">using value_type = typename std::iterator_traits&lt;\n    Iterator&gt;::value_type;</li></ul><h2>Member Function Overview</h2><ul><li class="is-family-code"><a href="#CEF8A68CD20A9447"><b>filter_iterator</b></a>(Iterator begin, Iterator end, PredicateFn fn)</li><li class="is-family-code"><a href="#245AB565A3F7B96E"><b>operator!=</b></a>(const filter_iterator&lt;Iterator, PredicateFn&gt; &amp; rhs) &rarr; bool</li><li class="is-family-code"><a href="#8297576394FF3EBF"><b>operator*</b></a>() &rarr; reference</li><li class="is-family-code"><a href="#96159B1081BD4D9E"><b>operator++</b></a>() &rarr; filter_iterator&lt;Iterator, PredicateFn&gt; &amp;</li><li class="is-family-code"><a href="#8BFE17D6E41E280B"><b>operator-&gt;</b></a>() &rarr; reference</li><li class="is-family-code hdoc-private"><a href="#7BA077BEB4963CC7"><b>advance</b></a>() &rarr; void</li></ul><h2>Member Functions</h2><h3 id="CEF8A68CD20A9447" data-function-name="filter_iterator"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#CEF8A68CD20A9447">\xb6</a><code class="hdoc-function-code language-cpp">filter_iterator(Iterator begin,\n                Iterator end,\n                PredicateFn fn)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/command_graph.h#L28">include/command_graph.h:28</a></p><h4>Parameters</h4><dl><dt class="is-family-code">Iterator<b> begin</b></dt><dt class="is-family-code">Iterator<b> end</b></dt><dt class="is-family-code">PredicateFn<b> fn</b></dt></dl><hr class="member-fun-separator"></hr><h3 id="245AB565A3F7B96E" data-function-name="operator!="><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#245AB565A3F7B96E">\xb6</a><code class="hdoc-function-code language-cpp">bool operator!=(\n    const <a href="/docs/api/records/D5D8A02E761474E8/">filter_iterator</a>&lt;Iterator, PredicateFn&gt;&amp;\n        rhs)</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/command_graph.h#L30">include/command_graph.h:30</a></p><h4>Parameters</h4><dl><dt class="is-family-code">const <a href="/docs/api/records/D5D8A02E761474E8/">filter_iterator</a>&lt;Iterator, PredicateFn&gt;&amp;<b> rhs</b></dt></dl><hr class="member-fun-separator"></hr><h3 id="8297576394FF3EBF" data-function-name="operator*"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#8297576394FF3EBF">\xb6</a><code class="hdoc-function-code language-cpp">reference operator*()</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/command_graph.h#L32">include/command_graph.h:32</a></p><hr class="member-fun-separator"></hr><h3 id="96159B1081BD4D9E" data-function-name="operator++"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#96159B1081BD4D9E">\xb6</a><code class="hdoc-function-code language-cpp"><a href="/docs/api/records/D5D8A02E761474E8/">filter_iterator</a>&lt;Iterator, PredicateFn&gt;&amp;\noperator++()</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/command_graph.h#L35">include/command_graph.h:35</a></p><hr class="member-fun-separator"></hr><h3 id="8BFE17D6E41E280B" data-function-name="operator-&gt;"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#8BFE17D6E41E280B">\xb6</a><code class="hdoc-function-code language-cpp">reference operator-&gt;()</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/command_graph.h#L33">include/command_graph.h:33</a></p><hr class="member-fun-separator"></hr><h3 id="7BA077BEB4963CC7" data-function-name="advance"><pre class="p-0 hdoc-pre-parent"><a class="hdoc-permalink-icon" href="#7BA077BEB4963CC7">\xb6</a><code class="hdoc-function-code language-cpp">void advance()</code></pre></h3><p>Declared at: <a class="is-family-code" href="https://github.com/celerity/celerity-runtime/blob/master/include/command_graph.h#L48">include/command_graph.h:48</a></p><hr class="member-fun-separator"></hr></main>',s={hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class filter_iterator"},o=void 0,n={id:"api/records/D5D8A02E761474E8",title:"class filter_iterator",description:"",source:"@site/celerity-runtime/docs/api/records/D5D8A02E761474E8.mdx",sourceDirName:"api/records",slug:"/api/records/D5D8A02E761474E8",permalink:"/docs/api/records/D5D8A02E761474E8",draft:!1,unlisted:!1,editUrl:null,tags:[],version:"current",frontMatter:{hide_title:!0,pagination_next:null,pagination_prev:null,custom_edit_url:null,sidebar_class_name:"sidebar-hidden",title:"class filter_iterator"},sidebar:"api"},l={},d=[];function p(e){const{Head:a}={...(0,i.R)(),...e.components};return a||function(e,a){throw new Error("Expected "+(a?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(a,{children:[(0,t.jsx)("script",{src:"/js/highlight.min.js"}),(0,t.jsx)("script",{src:"/js/api_docs.js",defer:!0})]}),"\n",(0,t.jsx)("div",{dangerouslySetInnerHTML:{__html:c}})]})}function m(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},28453:(e,a,r)=>{r.d(a,{R:()=>s,x:()=>o});var t=r(96540);const i={},c=t.createContext(i);function s(e){const a=t.useContext(c);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(c.Provider,{value:a},e.children)}}}]);